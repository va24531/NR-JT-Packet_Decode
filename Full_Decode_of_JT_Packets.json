[
    {
        "id": "f848aedb.a536d8",
        "type": "tab",
        "label": "Full Decode Of JTDX Packets",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4ff1b199.57fd08",
        "type": "udp in",
        "z": "f848aedb.a536d8",
        "name": "",
        "iface": "",
        "port": "2237",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "buffer",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "847c048.22ce478"
            ]
        ]
    },
    {
        "id": "847c048.22ce478",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "",
        "func": "// makes duplicate copy of orig message, so it can be passed on further down the line\n// without accidently overwriting it.\n// ---------------------------------------------------------------------------------------\n\nmsg.orig_message = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 260,
        "wires": [
            [
                "39081c81.87119c"
            ]
        ]
    },
    {
        "id": "760f003f.fa4df8",
        "type": "link out",
        "z": "f848aedb.a536d8",
        "name": "WSJT Message Output",
        "links": [
            "8f371112.7b051",
            "bac2ae93.f8a22",
            "258586c0.13870a",
            "3c84a023.9553e8"
        ],
        "x": 1255,
        "y": 540,
        "wires": []
    },
    {
        "id": "86551151.bbfe18",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Decoded RX QSO Message",
        "func": "// Revised - 07-22-21\n// \n// General code cleanup.\n// \n// Output messages:\n//  [ Header ]\n//      msg.magic_packet\n//      msg.version\n//      msg.packet_type\n//      msg.sw_name\n//  [ Header ]\n//  [ General ]\n//      msg.new_decode          0/1\n//      msg.decode_UTC_time     milliseconds\n//      msg.snr_value           -19\n//      msg.delta_time          'Not Functional'\n//      msg.delta_frequency     2716\n//      msg.decode_mode         ~\n//      msg.qso_message_length  14\n//      msg.qso_message         CQ KG4IXS FM06 \n//      msg.decode_confidence   0/1\n//      msg.offline_decode      0/1\n//  [ General ]\n\n\n\n// Do NOT Modify! -------------------------------------------------------------\n\n        msg.payload = msg.orig_message;\n                var string = \"\"\n                const buf = Buffer.from(msg.payload)\n                for (let hex of hexFormatValues(buf)) {string = string + hex } \n\n// Start Decode Header -------------------------------------------------------------------------------------\n\n    placeholder_start = 0;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.magic_packet = string.substring(placeholder_start,placeholder_stop);\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.version = parseInt(string.substring(placeholder_start,placeholder_stop));\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.packet_type = parseInt(string.substring(placeholder_start,placeholder_stop));\n// End Decode Header -------------------------------------------------------------------------------------\n\nif (msg.packet_type !== 2){  msg.other_decode = string; return msg;} // Stop Here If Not A Decode Message!\n\n// Start Software Name -----------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n    sw_size = string.substring(placeholder_start,placeholder_stop);\n    sw_name_length = placeholder_start  + next_value_length + (parseInt(sw_size) * 2);\n    sw_name = string.substring(32,sw_name_length);      // Get hex of software name, length based on above\n\n    var hex  = sw_name.toString();\n\tvar sw_name_2 = '';\n    for (var n = 0; n < hex.length; n += 2) { sw_name_2 += String.fromCharCode(parseInt(hex.substr(n, 2), 16));}\nmsg.sw_name = sw_name_2; \n// End Software Name -----------------------------------------------------------------------------------\n\n// Start Is New Decode ----------------------------------------------------------------------------------\n    placeholder_start = sw_name_length;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_new_decode = string.substring(placeholder_start, placeholder_stop);\nmsg.new_decode = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End New Decode --------------------------------------------------------------------------------------\n\n\n\n// Start Decode Milliseconds After Midnight UTC ---------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_decode_time = string.substring(placeholder_start,placeholder_stop);\nmsg.decode_UTC_time = hexToInt(hex_decode_time);\n// END Decode Milliseconds After Midnight UTC ---------------------------------------------------------------\n\n\n\n// Start Signal-Noise-Ratio ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_snr_report = string.substring(placeholder_start,placeholder_stop);\nmsg.snr_value = hexToInt(hex_snr_report);\n// END Signal-Noise-Ratio ------------------------------------------------------------------------------------\n\n\n\n// Start Delta Time Decode ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 16;\n    placeholder_stop = placeholder_start + next_value_length;\n        hex_delta_time = string.substring(placeholder_start,placeholder_stop);\nmsg.dt_start = placeholder_start;\nmsg.dt_stop = placeholder_stop;\n\nmsg.delta_time = 'Not Functional'; // To Be Fixed.\n\n\n\n// END Delta Time Decode ------------------------------------------------------------------------------------\n\n\n\n\n// Start Delta Frequency Decode ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_delta_freq = string.substring(placeholder_start,placeholder_stop);\nmsg.delta_frequency = hexToInt(hex_delta_freq);\n// END Delta Frequency Decode ------------------------------------------------------------------------------------\n\n\n// Start Mode Decode ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 10;\n    placeholder_stop = placeholder_start + next_value_length;\n        hex_mode = string.substring(placeholder_start,placeholder_stop);\n\n    var hex_mode_string  = hex_mode.toString();\n\tvar string_mode = '';\n    for (n = 0; n < hex_mode_string.length; n += 2) { string_mode += String.fromCharCode(parseInt(hex_mode_string.substr(n, 2), 16));}\nmsg.decode_mode = string_mode;\n// END Mode Decode ------------------------------------------------------------------------------------\n\n\n// Start Actual Message Lenght Value ------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_qso_message_length = string.substring(placeholder_start,placeholder_stop);\nmsg.qso_message_length = parseInt(hex_qso_message_length,16);\n// END Actual Message Lenght Value --------------------------------------------------------------------\n\n\n\n// Start Actual Message Decode ------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = msg.qso_message_length * 2;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_qso_message = string.substring(placeholder_start,placeholder_stop);\n\n\n    var hex_message_convert  = hex_qso_message.toString();\n\tvar ascii_message = '';\n    for (n = 0; n < hex_message_convert.length; n += 2) { ascii_message += String.fromCharCode(parseInt(hex_message_convert.substr(n, 2), 16));}\nmsg.qso_message = ascii_message.trim();\n// Start Actual Message Decode ------------------------------------------------------------------------\n\n\n\n// Low Confidence\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_confidence = string.substring(placeholder_start,placeholder_stop);\nmsg.decode_confidence = parseInt(string.substring(placeholder_start,placeholder_stop));\n// Low Confidence\n\n\n// Off Air \n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_offline = string.substring(placeholder_start,placeholder_stop);\nmsg.offline_decode = parseInt(string.substring(placeholder_start,placeholder_stop));\n// Off Air\n\n\n//msg.magicpacket = magic_packet;\n//msg.version = version;\n//msg.packet_type = packet_type;\n//msg.sw_name = sw_name_2;\n//msg.new_decode = int_new_decode;\n//msg.decode_time_hex = hex_decode_time;\n//msg.real_decode_time = real_decode_time;\n//msg.snr_report_hex = hex_snr_report;\n//msg.snr_report = real_snr_value;\n//msg.delta_time_hex = hex_delta_time;\n//msg.delta_freq_hex = hex_delta_freq;\n//msg.mode_hex = hex_mode;\n//msg.mode_string = string_mode;\n//msg.qso_message_length_hex = hex_qso_message_length;\n//msg.qso_message_length_int = int_qso_message_length;\n//msg.qso_message = hex_qso_message;\n//msg.qso_message_ascii = ascii_message;\n\n//msg.confidence_hex = hex_confidence;\n//msg.confidence_int = int_confidence;\n//msg.offline_hex = hex_offline;\n//msg.offline_int = int_offline;\n\n//msg.packet_length = string.length;\n//msg.full_packet = string;\n\nmsg.payload = ' New Message ';\n\nmsg.test = string;\nreturn msg;\n\n\n\n\n\n\n// -----------------------------------------------------------------------------------------------\n// -----------------------------------------------------------------------------------------------\n// Functions Below Here - DO NOT MODIFY ----------------------------------------------------------\n// -----------------------------------------------------------------------------------------------\n// -----------------------------------------------------------------------------------------------\n\n        function hexToInt(hex) {\n            if (hex.length % 2 != 0) {\n                hex = \"0\" + hex;\n            }\n            var num = parseInt(hex, 16);\n            var maxVal = Math.pow(2, hex.length / 2 * 8);\n            if (num > maxVal / 2 - 1) {\n                num = num - maxVal\n            }\n            return num;\n        }\n\n\n        // Creation of a function to get the Hex Value from a message\n        function* hexFormatValues(buffer) {\n            for (let x of buffer) {\n                const hex = x.toString(16)\n                yield hex.padStart(2, '0')\n            }\n        }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 400,
        "wires": [
            [
                "9583bc9a.4de0c"
            ]
        ]
    },
    {
        "id": "39081c81.87119c",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Header Decode",
        "func": "// This section ONLY decodes what type of packet it is, and handles it as either a type 0, 1, or 2, as per protocol\n// Nothing useful returned here, except      msg.decode_msg_type\n// ------------------------------------------------------------------------------------------------------------------\n\n// Do NOT Modify! -------------------------------------------------------------\n        function hexToInt(hex) {\n            if (hex.length % 2 != 0) { hex = \"0\" + hex; }\n            var num = parseInt(hex, 16);\n            var maxVal = Math.pow(2, hex.length / 2 * 8);\n            if (num > maxVal / 2 - 1) { num = num - maxVal }\n            return num;\n        }\n\n        function* hexFormatValues(buffer) {\n            for (let x of buffer) { const hex = x.toString(16); yield hex.padStart(2, '0'); }\n        }\n\n        msg.payload = msg.orig_message;\n\n                var string = \"\";\n                const buf = Buffer.from(msg.payload);\n\n                for (let hex of hexFormatValues(buf)) {string = string + hex } \n\nplaceholder_start = 0;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nmagic_packet = string.substring(placeholder_start,placeholder_stop);\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nversion = parseInt(string.substring(placeholder_start,placeholder_stop));\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\npacket_type = parseInt(string.substring(placeholder_start,placeholder_stop));\n\n\nmsg.decode_msg_type = packet_type;\nreturn msg;\n\n// Do NOT Modify! -------------------------------------------------------------",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 340,
        "wires": [
            [
                "267c1c5a.6e80dc"
            ]
        ]
    },
    {
        "id": "267c1c5a.6e80dc",
        "type": "switch",
        "z": "f848aedb.a536d8",
        "name": "",
        "property": "decode_msg_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 340,
        "wires": [
            [
                "9e71d881.30f958"
            ],
            [
                "2e3e4f72.0798d"
            ],
            [
                "86551151.bbfe18"
            ]
        ]
    },
    {
        "id": "9e71d881.30f958",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Decode Heartbeat Message",
        "func": "// Standard heartbeat message\n// Only thing really useful in this packet is sw_name, nothing else.\n\n\n\n\n// Do NOT Modify! -------------------------------------------------------------\n        function hexToInt(hex) {\n            if (hex.length % 2 != 0) {\n                hex = \"0\" + hex;\n            }\n            var num = parseInt(hex, 16);\n            var maxVal = Math.pow(2, hex.length / 2 * 8);\n            if (num > maxVal / 2 - 1) {\n                num = num - maxVal\n            }\n            return num;\n        }\n\n\n        // Creation of a function to get the Hex Value from a message\n        function* hexFormatValues(buffer) {\n            for (let x of buffer) {\n                const hex = x.toString(16)\n                yield hex.padStart(2, '0')\n            }\n        }\n\n\n        msg.payload = msg.orig_message;\n\n            // Variable declaration for my loop\n                var string = \"\"\n                const buf = Buffer.from(msg.payload)\n\n            // Concatenation of the buffer in a string \n                for (let hex of hexFormatValues(buf)) {string = string + hex } \n\n            //msg.payload = string;\n\n// Do NOT Modify! -------------------------------------------------------------\n\n\nplaceholder_start = 0;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nmagic_packet = string.substring(placeholder_start,placeholder_stop);\nmsg.magicpacket = magic_packet;\n\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nversion = parseInt(string.substring(placeholder_start,placeholder_stop));\nmsg.version = version;\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\npacket_type = parseInt(string.substring(placeholder_start,placeholder_stop));\nmsg.packet_type = packet_type;\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\n\nsw_size = string.substring(placeholder_start,placeholder_stop); // Decode Length Of Software Name (wsjt-x vs jtdx vs whatever)\nsw_name_length = placeholder_start  + next_value_length + (parseInt(sw_size) * 2); // Convert hex value to true interger value, double it, and add it to the last hex position of 32\nsw_name = string.substring(32,sw_name_length);      // Get hex of software name, length based on above\n\n    var hex  = sw_name.toString();\n\tvar sw_name_2 = '';\n    for (var n = 0; n < hex.length; n += 2) { sw_name_2 += String.fromCharCode(parseInt(hex.substr(n, 2), 16));}\n\t// Convert software name from hex to ascii \n\t\nmsg.sw_name = sw_name_2;\n\n// END Header\n\n\n// ------------------- Based On STATUS UDP Message\n\nplaceholder_start = sw_name_length;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nunique_key = string.substring(placeholder_start, placeholder_stop);\nunique_key = parseInt(unique_key);\nmsg.unique_key = unique_key;\n\n\n\nmsg.payload = ' New Message ';\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 280,
        "wires": [
            [
                "53d0a7d3.511f28",
                "e53c7800.8d1868"
            ]
        ]
    },
    {
        "id": "2e3e4f72.0798d",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Decoded Status Message",
        "func": "// Revision 07-22-21    *Major Update\n//\n//  Major code cleanup, all but .submode are fully functional.\n//\n// Output messages:\n//      [ MSG TYPE ]\n//          +msg.decode_msg_type\n//      [ MSG TYPE ]\n//      [ HEADER ]\n//          +msg.magic_packet: \"adbccbda\"\n//          +msg.version: 2\n//          +msg.packet_type: 1\n//          +msg.sw_name: \"JTDX\"\n//      [ HEADER ]\n//      [ GENERAL ]\n//          +msg.unique_key: 0\n//          +msg.dial_freq: 14074000\n//          +msg.mode_name: \"FT8\"\n//          +msg.dx_call: \"KI7AY\"\n//          +msg.dx_call_snr: \"-12\"\n//          +msg.dx_call_tx_mode: \"FT8\"\n//          +msg.tx_enabled: 0\n//          +msg.transmitting_now: 0\n//          +msg.decoding_now: 0\n//          +msg.rx_delta_frequency: 2671\n//          +msg.tx_delta_frequency: 1500\n//          +msg.de_call: \"KG4IXS\"\n//          +msg.de_call_grid: \"FM06\"\n//          +msg.dx_call_grid: \"EM25\"\n//          +msg.tx_watchdog_active: 0\n//          -msg.submode: \"Not Enabled\"\n//          +msg.fast_mode: 0\n//          +msg.special_mode: 0\n//          +msg.full_decode: \"------\"\n//      [ GENERAL ]\n\n\n\n// Do NOT Modify! -------------------------------------------------------------\n\n\n\n        msg.payload = msg.orig_message;\n\n            var string = \"\"\n            const buf = Buffer.from(msg.payload)\n            for (let hex of hexFormatValues(buf)) {string = string + hex } \n\n// Start Decode Header -------------------------------------------------------------------------------------\n\n    placeholder_start = 0;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.magic_packet = string.substring(placeholder_start,placeholder_stop);\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.version = parseInt(string.substring(placeholder_start,placeholder_stop));\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.packet_type = parseInt(string.substring(placeholder_start,placeholder_stop));\n// End Decode Header -------------------------------------------------------------------------------------\n\nif (msg.packet_type !== 1){  msg.other_decode = string; return msg;} // Stop Here If Not A Decode Message!\n\n// Start Software Name -----------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\n    \nmsg.sw_name = hexToUTF8(hex_string);\n// End Software Name -----------------------------------------------------------------------------------\n\n// -- END Header Decode --------------------------------------------------------------------------------\n\n\n\n// Start Unique Key Decode ------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    unique_key = string.substring(placeholder_start, placeholder_stop);\nmsg.unique_key = parseInt(unique_key);\n// End Unique Key Decode --------------------------------------------------------------------------------\n\n\n// Start Decoded Dial Frequency -------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    dial_freq = string.substring(placeholder_start,placeholder_stop);\nmsg.dial_freq = hexToInt(dial_freq);\n// END Decoded Dial Freq --------------------------------------------------------------------------------\n\n\n// Start Decoded Mode -----------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\nmsg.mode_name = hexToUTF8(hex_string);\n// End Decoded Mode Name --------------------------------------------------------------------------------\n\n// Selected DX Callsign Decode --------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\nmsg.dx_call = hexToUTF8(hex_string);\n// End Selected DX Callsign Decode ----------------------------------------------------------------------\n\n\n// Selected Call Report\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\n    \nmsg.dx_call_snr = hexToUTF8(hex_string);\n// END Selected Call Report --------------------------------------------------------------------------------\n\n// Start TX Mode Decode --------------------------------------------------------------------------------\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\n    \nmsg.dx_call_tx_mode = hexToUTF8(hex_string);\n// End TX Mode Decode --------------------------------------------------------------------------------\n\n// Start TX Enabled Decode --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.tx_enabled = parseInt(string.substring(placeholder_start, placeholder_stop));\n// END TX Enable Decode --------------------------------------------------------------------------------\n\n// Start Transmitting Now Decode --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.transmitting_now = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End Transmitting Now Decode --------------------------------------------------------------------------------\n\n// Start Decoding Now --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.decoding_now = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End Decoding Now --------------------------------------------------------------------------------\n\n// Start RX Delta Frequency Decode ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_delta_freq = string.substring(placeholder_start,placeholder_stop);\nmsg.rx_delta_frequency = hexToInt(string.substring(placeholder_start,placeholder_stop));\n// END Delta Frequency Decode ------------------------------------------------------------------------------------\n\n//\n\n// Start TX Delta Frequency Decode ------------------------------------------------------------------------------------\nplaceholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_delta_freq = string.substring(placeholder_start,placeholder_stop);\nmsg.tx_delta_frequency = hexToInt(string.substring(placeholder_start,placeholder_stop));\n// END Delta Frequency Decode ------------------------------------------------------------------------------------\n\n\n// Start DE Call Decode --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\nmsg.de_call = hexToUTF8(hex_string);\n// End DE Call Decode --------------------------------------------------------------------------------\n\n// Start DE Grid --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\nmsg.de_call_grid = hexToUTF8(hex_string);\n// END DE Grid --------------------------------------------------------------------------------\n\n// Start DX Grid Decode --------------------------------------------------------------------------------\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            \n            if (this_payload_size !== 'ffffffff'){\n                    this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n                    hex_string = string.substring(placeholder_stop,this_payload_length)\n                    placeholder_stop = this_payload_length;\n                msg.dx_call_grid = hexToUTF8(hex_string);\n            } else { msg.dx_call_grid = 'Unknown';}\n\n// END DX Grid Decode --------------------------------------------------------------------------------\n\n// Start TX Watchdog --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.tx_watchdog_active = parseInt(string.substring(placeholder_start, placeholder_stop));\n// END TX Watchdog --------------------------------------------------------------------------------\n\n// Start Sub-mode --------------------------------------------------------------------------------\nmsg.submode = 'Not Enabled';\n// End Sub-Mode Decode --------------------------------------------------------------------------------\n\n// Start Fast Mode Decode --------------------------------------------------------------------------------\n    placeholder_start = (string.length -4)\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.fast_mode = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End Fast Mode Decode --------------------------------------------------------------------------------\n\n// Start Special Mode Decode --------------------------------------------------------------------------------\n    placeholder_start = (string.length -2)\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.special_mode = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End Special Mode Decode --------------------------------------------------------------------------------\n\n\nif (msg.dx_call_snr === ''){msg.payload = 'Partial Status Message';} else { msg.payload = 'Full Status Message'; }\nmsg.full_decode = string;\n\nreturn msg;\n\n\n\n\n// -------------------------------------------------- Functions Below Here - Do Not Edit ---------------------------------------\n\n        function hexToUTF8(hex) {\n            var hex0  = hex.toString();\n\t        var return_2 = '';\n            for (var s = 0; s < hex0.length; s += 2) { return_2 += String.fromCharCode(parseInt(hex0.substr(s, 2), 16));}\n            return return_2;\n        }\n\n        function hexToInt(hex) {\n            if (hex.length % 2 != 0) {\n                hex = \"0\" + hex;\n            }\n            var num = parseInt(hex, 16);\n            var maxVal = Math.pow(2, hex.length / 2 * 8);\n            if (num > maxVal / 2 - 1) {\n                num = num - maxVal\n            }\n            return num;\n        }\n\n\n        // Creation of a function to get the Hex Value from a message\n        function* hexFormatValues(buffer) {\n            for (let x of buffer) {\n                const hex = x.toString(16)\n                yield hex.padStart(2, '0')\n            }\n        }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            [
                "26974000.12f948"
            ]
        ]
    },
    {
        "id": "53d0a7d3.511f28",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "8084c530.af563",
        "type": "link out",
        "z": "f848aedb.a536d8",
        "name": "UDP Status Message",
        "links": [
            "bb1f8e36.db4c98",
            "fd8f2204.5071f",
            "157d43f.602aebc"
        ],
        "x": 1335,
        "y": 400,
        "wires": []
    },
    {
        "id": "e53c7800.8d1868",
        "type": "link out",
        "z": "f848aedb.a536d8",
        "name": "UDP Heartbeat Message",
        "links": [],
        "x": 855,
        "y": 240,
        "wires": []
    },
    {
        "id": "9583bc9a.4de0c",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Decoded RX Message",
        "func": "// Updated 07-22-21\n//\n// Code updated to handle country locations \n//      -- for CQ's, only Origin location is given)\n//      -- for Calling Station messages, both Origin location and Target location is given\n//      -- for In QSO messages, both Origin location and Target location is given\n//  \n//  Updated to handle 4 'word' messages, such as 'CQ DX KG4IXS FM06'\n//  Updated to ignore 1 or 2 'word' messages, such as '73 RICHARD' or 'BAD COPY'\n//\n//  New messages added\n//      + msg.has_origin_callsign\n//      + msg.origin_callsign\n//      + msg.has_origin_gridsquare\n//      + msg.origin_gridsquare\n//      + msg.has_target_callsign\n//      + msg.target_callsign\n//\n// -----------------------------------------------------------------------------------------------------------------\n//\n//\n// ---------------------------------------- Nothing Below Here To Modify -------------------------------------------\nstr = msg.qso_message;\nstr = str.trim();\nmsg.qso_message_ascii = str;\nconst myArr = str.split(\" \");\n\nmsg.has_origin_callsign = false; msg.origin_callsign = null;\nmsg.has_origin_gridsquare = false; msg.origin_gridsquare = null;\nmsg.has_target_callsign = false; msg.target_callsign = null;\nthis_message_type = null;\n\n\n// If nonstandard message, such as 'bad copy' or 'thanks 73' is decoded.\nif (myArr.length < 3){ msg.payload = 'Nonstandard Message.'; return msg; }\n\n\n// Handles a CQ calling DX/NA/OC/AS/Whatever. Last Position is Grid, Second to Last is Callsign\n// Arrays start at 0, common counting starting a 1, hence the -1 offset.\n\nlast_position = (myArr.length -1);  last_pos_chars = myArr[last_position];\n\n\n// Look for starting CQ in message (TX type 6) --------------------------------------\n\n    if (myArr[0] === 'CQ') {\n    \n \n            calling_cq_gridsquare = last_pos_chars.match(/[A-R][A-R][0-9][0-9]/g);\n            \n                        // CQ AS VE2GHI         <- Has CQ, NO Grid, Callsign at last position \n                        // CQ AS KG4GHI FM06    <- Has CQ, Has Grid, Callsign at (last_position-1) Position\n            \n                if (calling_cq_gridsquare){\n                    this_message_type = 'calling_cq';\n                        msg.has_origin_callsign = true;     msg.origin_callsign = myArr[last_position-1];\n                        msg.has_origin_gridsquare = true;   msg.origin_gridsquare = myArr[last_position];\n                        msg.has_target_callsign = false;    msg.template_message_type = this_message_type;\n                return msg;\n                \n                }   else {\n\n                    this_message_type = 'calling_cq';\n                        msg.has_origin_callsign = true;     msg.origin_callsign = myArr[last_position];\n                        msg.has_origin_gridsquare = false;   msg.origin_gridsquare = null;\n                        msg.has_target_callsign = false;    msg.template_message_type = this_message_type;\n                return msg; \n                }\n    }\n\n// -----------------------------------------------------------------------------\n\n// -----------------------------------------------------------------------------\n// Checks for standard exchange/signal report/RR73, ---> TX2, TX3, TX4, TX5\n\n        if (last_pos_chars.charAt(0) === 'R'){\n                if (last_pos_chars.charAt(1) === '+'){this_message_type = 'in_qso';}\n                if (last_pos_chars.charAt(1) === '-'){this_message_type = 'in_qso';}\n        }\n        \n        if (last_pos_chars.charAt(0) === '+'){ this_message_type = 'in_qso';}\n        if (last_pos_chars.charAt(0) === '-'){ this_message_type = 'in_qso';}\n        \n        if (last_pos_chars === 'RRR'  ){this_message_type = 'in_qso';}\n        if (last_pos_chars === 'RR73' ){this_message_type = 'in_qso'; }\n        if (last_pos_chars === '73'   ){this_message_type = 'in_qso';}\n\n            if ( this_message_type === 'in_qso'){\n                    msg.has_origin_callsign = true;     msg.origin_callsign = myArr[last_position-1];\n                    msg.has_target_callsign = true;     msg.target_callsign = myArr[last_position-2];  \n                    msg.has_origin_gridsquare = false;  msg.template_message_type = 'in_qso';\n                return msg;\n            }\n// -----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------------------------\n// Checks Messages that don't start with CQ for a GRID SQUARE Match in the last position\n// This would qualify as a station trying to answer a CQ call, or is a 'Calling Station'\n// Valid Grids are AA00 - RR99\n\n// Check for TX1's\n\ncalling_station_gridsquare = last_pos_chars.match(/[A-R][A-R][0-9][0-9]/g);\nif (calling_station_gridsquare){\n                        \n                    msg.has_origin_callsign = true;     msg.origin_callsign =   myArr[last_position-1];\n                    msg.has_target_callsign = true;     msg.target_callsign =   myArr[last_position-2];\n                    msg.has_origin_gridsquare = true;   msg.origin_gridsquare = myArr[last_position];\n                    msg.template_message_type = 'calling_station';\n        return msg;\n}\n\n// ----------------------------------------------------------------------------------------------\n\nmsg.payload = 'Incorrect - ' + str + ' - Free Form Text?'; return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            [
                "a5ab2bbd.033b4",
                "ea16d494.4e1e68"
            ]
        ]
    },
    {
        "id": "d18eaa76.7c5a98",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Origin Grid To Coords/Distance/Bearing From User QTH",
        "func": "//  If  msg.has_origin_gridsquare true, the converts grid to lat/lon, distance and bearing (your bearing is set in another function)\n//\n//      [ Requires ]\n//          + msg.has_origin_gridsquare\n//          + msg.origin_gridsquare\n//          +   flow.get('my_lat_dec')\n//          +   flow.get('my_lon_dec')\n//\n//      [ Returns ]\n//          + msg.origin_lat_dec: \"33.500\"\n//          + msg.origin_lon_dec: \"-95.000\"\n//          + msg.origin_distance_miles: 927\n//          + msg.origin_distance_kilos: 1493\n//          + msg.origin_distance_miles_named: \"927 Miles\"\n//          + msg.origin_distance_kilos_named: \"1493 Kilometers\"\n//          + msg.origin_bearing: 261\n//          + msg.origin_bearing_name : 'North-East'\n\nif (msg.has_origin_gridsquare){\n\n            convert_grid = msg.origin_gridsquare;\n\n        var str_chr_up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        var str_chr_lo = \"abcdefghijklmnopqrstuvwxyz\";\n        var str_num = \"0123456789\";\n        var lat, lon, qth, deg, min, sec;\n        var directions = [\"North\", \"North-West\", \"West\", \"South-West\", \"South\", \"South-East\", \"East\", \"North-East\"];\n\n            qth = convert_grid;\n            qth = qth.toUpperCase();\n    \n// Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n    if (qth.length != 4) { msg.payload = 'Please enter a valid 4 or 6 characters QTH locator.'; return msg; }\n            valid_qth = qth.match(/[A-R][A-R][0-9]/g);\n    if (!valid_qth) { msg.payload = 'Bad Gridsquare'; return msg;}\n// Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n\n// Start Calculations Now. ------------------------------------------------------------------------------------------------------------\n\n    lat = str_chr_up.indexOf(qth.charAt(1)) * 10; lon = str_chr_up.indexOf(qth.charAt(0)) * 20;\n    lat += str_num.indexOf(qth.charAt(3)) * 1;    lon += str_num.indexOf(qth.charAt(2)) * 2;\n\n    lat += 0.5 * 1;\n    lon += 0.5 * 2;\n\n    lat -= 90;                                                  // Locator lat/lon origin shift.\n    lon -= 180;\n\nmsg.origin_lat_dec = lat.toFixed(3);\nmsg.origin_lon_dec = lon.toFixed(3);\n\n// Start Distance Calculatore From Your Grid To Theirs -------------------------------------------------------------------\n\n        let lat1 = parseFloat(flow.get('my_lat_dec'));\n        let lon1 = parseFloat(flow.get('my_lon_dec'));\n        let lat2 = parseFloat(lat.toFixed(3));\n        let lon2 = parseFloat(lon.toFixed(3));\n        \n        lat1 = lat1 * Math.PI / 180; lon1 = lon1 * Math.PI / 180;\n        lat2 = lat2 * Math.PI / 180; lon2 = lon2 * Math.PI / 180;\n        let dlon = lon2 - lon1; let dlat = lat2 - lat1;\n        let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2),2);\n        let c = 2 * Math.asin(Math.sqrt(a));\n        let rm = 3956; // Radius of earth in kilometers 6371, use 3956 for miles\n        let rk = 6371;\n        \nmsg.origin_distance_miles = parseInt(c * rm);\nmsg.origin_distance_kilos = parseInt(c * rk);\n        \nmsg.origin_distance_miles_named = parseInt(c * rm) + ' Miles';\nmsg.origin_distance_kilos_named = parseInt(c * rk) + ' Kilometers';\n        \n// END Distance Calculatore From Your Grid To Theirs -------------------------------------------------------------------\n\n// Start Bearing In Degrees By WA9WUD Request ---------------------------------------------------------------------------\n\n        startLat = parseFloat(flow.get('my_lat_dec'));\n        startLng = parseFloat(flow.get('my_lon_dec'));\n        destLat = parseFloat(msg.origin_lat_dec);\n        destLng = parseFloat(msg.origin_lon_dec);\n\n            startLat = toRadians(startLat); startLng = toRadians(startLng);\n            destLat = toRadians(destLat);   destLng = toRadians(destLng);\n\n            y = Math.sin(destLng - startLng) * Math.cos(destLat);\n            x = Math.cos(startLat) * Math.sin(destLat) - Math.sin(startLat) * Math.cos(destLat) * Math.cos(destLng - startLng);\n            brng = Math.atan2(y, x);\n            brng = toDegrees(brng);\n    \n    origin_bearing = (brng + 360) % 360;\nmsg.origin_bearing = parseInt(origin_bearing)\nmsg.origin_bearing_name = getDirection(origin_bearing);\n// End Bearing In Degrees By WA9WUD Request ---------------------------------------------------------------------------\n\n}\n\nreturn msg;\n\n\n// Converts from degrees to radians.\nfunction toRadians(degrees) { return degrees * Math.PI / 180; }\n \n// Converts from radians to degrees.\nfunction toDegrees(radians) { return radians * 180 / Math.PI;}\n\nfunction getDirection(heading) {\n    var index = Math.round(((heading %= 360) < 0 ? heading + 360 : heading) / 45) % 8;\n   //var index = Math.round((heading/8)/5,625)\n   return directions[index]}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 580,
        "wires": [
            [
                "ae7be92f.6366c8",
                "760f003f.fa4df8",
                "5fa9b781.3a07d8"
            ]
        ]
    },
    {
        "id": "a5ab2bbd.033b4",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "MY GRID Location",
        "func": "// --------------------------------------------------------------------------------------------------------\n// Last Updated 07-22-21\n// *** Only need to run ONCE at startup if your gridsquare does not change!\n\n// Messages Set/Returned\n//\n// flow.set('my_lat_dec')\n// flow.set('my_lon_dec')\n//\n// msg.my_lat_dec: \"36.500\"\n// msg.my_lon_dec: \"-79.000\"\n\n// -------------------------------------Modify Below To Your Grid ------------------------------------------------------------\n//\n    my_grid = 'FM06';   // Change this to YOUR grid\n//\n// ------------------------------------Nothing Below Needs To Be Modified-----------------------------------------------------\n\n\nif (flow.get('my_lat_dec') !== undefined){return msg;}\n\nvar str_chr_up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";                          // Constants.\nvar str_chr_lo = \"abcdefghijklmnopqrstuvwxyz\";\nvar str_num = \"0123456789\";\nvar lat, lon, qth, deg, min, sec;\n\n    qth = my_grid;\n    qth = qth.toUpperCase();\n    \n// Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n    if (qth.length != 4) { msg.payload = 'Please enter a valid 4 or 6 characters QTH locator.'; return msg; }\n            valid_qth = qth.match(/[A-R][A-R][0-9]/g);\n    if (!valid_qth) { msg.payload = 'Bad Gridsquare'; return msg;}\n// Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n\n\n\n// End Make sure the locator is composed by twho characters and two digits. --------------------------------------------------------\n\n// Start Calculations Now. ------------------------------------------------------------------------------------------------------------\n\n    lat = str_chr_up.indexOf(qth.charAt(1)) * 10;               // 2nd digit: 10deg latitude slot.\n    lon = str_chr_up.indexOf(qth.charAt(0)) * 20;               // 1st digit: 20deg longitude slot.\n    lat += str_num.indexOf(qth.charAt(3)) * 1;                  // 4th digit: 1deg latitude slot.\n    lon += str_num.indexOf(qth.charAt(2)) * 2;                  // 3rd digit: 2deg longitude slot.\n\n    lat += 0.5 * 1;\n    lon += 0.5 * 2;\n\n    lat -= 90;                                                  // Locator lat/lon origin shift.\n    lon -= 180;\n\n            msg.my_lat_dec = lat.toFixed(3);  // Display result (rounded to 3 decimal digits).\n            msg.my_lon_dec= lon.toFixed(3);\n\n            flow.set('my_lat_dec',lat.toFixed(3));\n            flow.set('my_lon_dec',lon.toFixed(3));\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "ea16d494.4e1e68",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Origin Call Country Name",
        "func": "\n// Based on msg.has_origin_callsign and msg.origin_callsign,\n// Results will be either msg.origin_country = <Country Name> or <null>\n\n\nif (msg.has_origin_callsign){\n\n            origin_callsign = msg.origin_callsign;\n            country = null;\n\n        if (country === null){\n            \n            count = 4;\n            find_this = origin_callsign.substring(0,count);\n\n            switch (find_this){\n                case 'HB3Y': country = ' Liechtenstein'; break;\n            }\n        }\n\n        if (country === null){\n\n            count = 3;\n            find_this = origin_callsign.substring(0,count);\n        \n            switch (find_this){\n\n                case '3DA': country = ' Swaziland'; break;\n                case '3DB': country = ' Swaziland'; break;\n                case '3DC': country = ' Swaziland'; break;\n                case '3DD': country = ' Swaziland'; break;\n                case '3DE': country = ' Swaziland'; break;\n                case '3DF': country = ' Swaziland'; break;\n                case '3DG': country = ' Swaziland'; break;\n                case '3DH': country = ' Swaziland'; break;\n                case '3DI': country = ' Swaziland'; break;\n                case '3DJ': country = ' Swaziland'; break;\n                case '3DK': country = ' Swaziland'; break;\n                case '3DL': country = ' Swaziland'; break;\n                case '3DM': country = ' Swaziland'; break;\n                case '3DN': country = ' Fiji'; break;\n                case '3DO': country = ' Fiji'; break;\n                case '3DP': country = ' Fiji'; break;\n                case '3DQ': country = ' Fiji'; break;\n                case '3DR': country = ' Fiji'; break;\n                case '3DS': country = ' Fiji'; break;\n                case '3DT': country = ' Fiji'; break;\n                case '3DU': country = ' Fiji'; break;\n                case '3DV': country = ' Fiji'; break;\n                case '3DW': country = ' Fiji'; break;\n                case '3DX': country = ' Fiji'; break;\n                case '3DY': country = ' Fiji'; break;\n                case '3DZ': country = ' Fiji'; break;\n                case '9M0': country = ' Spratly Islands'; break;\n                case 'BV9': country = ' Spratly Islands'; break;\n                case 'DX0': country = ' Spratly Islands'; break;\n                case 'HB0': country = ' Liechtenstein'; break;\n                case 'HBL': country = ' Liechtenstein'; break;\n                case 'RA6': country = ' Chechnya'; break;\n                case 'SSA': country = ' Egypt'; break;\n                case 'SSB': country = ' Egypt'; break;\n                case 'SSC': country = ' Egypt'; break;\n                case 'SSD': country = ' Egypt'; break;\n                case 'SSE': country = ' Egypt'; break;\n                case 'SSF': country = ' Egypt'; break;\n                case 'SSG': country = ' Egypt'; break;\n                case 'SSH': country = ' Egypt'; break;\n                case 'SSI': country = ' Egypt'; break;\n                case 'SSJ': country = ' Egypt'; break;\n                case 'SSK': country = ' Egypt'; break;\n                case 'SSL': country = ' Egypt'; break;\n                case 'SSM': country = ' Egypt'; break;\n            }\n        }\n\n        if (country === null){\n\n            count = 2;\n            find_this = origin_callsign.substring(0,count);\n    \n            switch (find_this){\n\n                case '0S': country = 'Principality of Seborga'; break;\n                case '1A': country = 'Sovereign Military Order of Malta'; break;\n                case '1B': country = 'Northern Cyprus or Blenheim Reef'; break;\n                case '1G': country = 'Geyser Reef'; break;\n                case '1L': country = 'Liberland'; break;\n                case '1M': country = 'Minerva Reefs'; break;\n                case '1S': country = 'Principality of Sealand'; break;\n                case '1Z': country = 'Kayin State'; break;\n                case '3A': country = 'Monaco'; break;\n                case '3B': country = 'Mauritius'; break;\n                case '3C': country = 'Equatorial Guinea'; break;\n                case '3E': country = 'Panama'; break;\n                case '3F': country = 'Panama'; break;\n                case '3G': country = 'Chile'; break;\n                case '3H': country = 'Peoples Republic of China'; break;\n                case '3I': country = 'Peoples Republic of China'; break;\n                case '3J': country = 'Peoples Republic of China'; break;\n                case '3K': country = 'Peoples Republic of China'; break;\n                case '3L': country = 'Peoples Republic of China'; break;\n                case '3M': country = 'Peoples Republic of China'; break;\n                case '3N': country = 'Peoples Republic of China'; break;\n                case '3O': country = 'Peoples Republic of China'; break;\n                case '3P': country = 'Peoples Republic of China'; break;\n                case '3Q': country = 'Peoples Republic of China'; break;\n                case '3R': country = 'Peoples Republic of China'; break;\n                case '3S': country = 'Peoples Republic of China'; break;\n                case '3T': country = 'Peoples Republic of China'; break;\n                case '3U': country = 'Peoples Republic of China'; break;\n                case '3V': country = 'Tunisia'; break;\n                case '3W': country = 'Vietnam'; break;\n                case '3X': country = 'Guinea'; break;\n                case '3Y': country = 'Norway'; break;\n                case '3Z': country = 'Poland'; break;\n                case '4A': country = 'Mexico'; break;\n                case '4B': country = 'Mexico'; break;\n                case '4C': country = 'Mexico'; break;\n                case '4D': country = 'Philippines'; break;\n                case '4E': country = 'Philippines'; break;\n                case '4F': country = 'Philippines'; break;\n                case '4G': country = 'Philippines'; break;\n                case '4H': country = 'Philippines'; break;\n                case '4I': country = 'Philippines'; break;\n                case '4J': country = 'Azerbaijan'; break;\n                case '4K': country = 'Azerbaijan'; break;\n                case '4L': country = 'Georgia'; break;\n                case '4M': country = 'Venezuela'; break;\n                case '4O': country = 'Montenegro'; break;\n                case '4P': country = 'Sri Lanka'; break;\n                case '4Q': country = 'Sri Lanka'; break;\n                case '4R': country = 'Sri Lanka'; break;\n                case '4S': country = 'Sri Lanka'; break;\n                case '4T': country = 'Peru'; break;\n                case '4U': country = 'United Nations (non-geographical)'; break;\n                case '4V': country = 'Haiti'; break;\n                case '4W': country = 'East Timor'; break;\n                case '4X': country = 'Israel'; break;\n                case '4Y': country = 'International Civil Aviation Organization (non-geographical)'; break;\n                case '4Z': country = 'Israel'; break;\n                case '5A': country = 'Libya'; break;\n                case '5B': country = 'Cyprus'; break;\n                case '5C': country = 'Morocco'; break;\n                case '5D': country = 'Morocco'; break;\n                case '5E': country = 'Morocco'; break;\n                case '5F': country = 'Morocco'; break;\n                case '5G': country = 'Morocco'; break;\n                case '5H': country = 'Tanzania'; break;\n                case '5I': country = 'Tanzania'; break;\n                case '5J': country = 'Colombia'; break;\n                case '5K': country = 'Colombia'; break;\n                case '5L': country = 'Liberia'; break;\n                case '5M': country = 'Liberia'; break;\n                case '5N': country = 'Nigeria'; break;\n                case '5O': country = 'Nigeria'; break;\n                case '5P': country = 'Denmark'; break;\n                case '5Q': country = 'Denmark'; break;\n                case '5R': country = 'Madagascar'; break;\n                case '5S': country = 'Madagascar'; break;\n                case '5T': country = 'Mauritania'; break;\n                case '5U': country = 'Niger'; break;\n                case '5V': country = 'Togo'; break;\n                case '5W': country = 'Western Samoa'; break;\n                case '5X': country = 'Uganda'; break;\n                case '5Y': country = 'Kenya'; break;\n                case '5Z': country = 'Kenya'; break;\n                case '6A': country = 'Egypt'; break;\n                case '6B': country = 'Egypt'; break;\n                case '6C': country = 'Syria'; break;\n                case '6D': country = 'Mexico'; break;\n                case '6E': country = 'Mexico'; break;\n                case '6F': country = 'Mexico'; break;\n                case '6G': country = 'Mexico'; break;\n                case '6H': country = 'Mexico'; break;\n                case '6I': country = 'Mexico'; break;\n                case '6J': country = 'Mexico'; break;\n                case '6K': country = 'South Korea'; break;\n                case '6L': country = 'South Korea'; break;\n                case '6M': country = 'South Korea'; break;\n                case '6N': country = 'South Korea'; break;\n                case '6O': country = 'Somalia'; break;\n                case '6P': country = 'Pakistan'; break;\n                case '6Q': country = 'Pakistan'; break;\n                case '6R': country = 'Pakistan'; break;\n                case '6S': country = 'Pakistan'; break;\n                case '6T': country = 'Sudan'; break;\n                case '6U': country = 'Sudan'; break;\n                case '6V': country = 'Senegal'; break;\n                case '6W': country = 'Senegal'; break;\n                case '6X': country = 'Madagascar'; break;\n                case '6Y': country = 'Jamaica'; break;\n                case '6Z': country = 'Liberia'; break;\n                case '7A': country = 'Indonesia'; break;\n                case '7B': country = 'Indonesia'; break;\n                case '7C': country = 'Indonesia'; break;\n                case '7D': country = 'Indonesia'; break;\n                case '7E': country = 'Indonesia'; break;\n                case '7F': country = 'Indonesia'; break;\n                case '7G': country = 'Indonesia'; break;\n                case '7H': country = 'Indonesia'; break;\n                case '7I': country = 'Indonesia'; break;\n                case '7J': country = 'Japan'; break;\n                case '7K': country = 'Japan'; break;\n                case '7L': country = 'Japan'; break;\n                case '7M': country = 'Japan'; break;\n                case '7N': country = 'Japan'; break;\n                case '7O': country = 'Yemen'; break;\n                case '7P': country = 'Lesotho'; break;\n                case '7Q': country = 'Malawi'; break;\n                case '7R': country = 'Algeria'; break;\n                case '7S': country = 'Sweden'; break;\n                case '7T': country = 'Algeria'; break;\n                case '7U': country = 'Algeria'; break;\n                case '7V': country = 'Algeria'; break;\n                case '7W': country = 'Algeria'; break;\n                case '7X': country = 'Algeria'; break;\n                case '7Y': country = 'Algeria'; break;\n                case '7Z': country = 'Saudi Arabia'; break;\n                case '8A': country = 'Indonesia'; break;\n                case '8B': country = 'Indonesia'; break;\n                case '8C': country = 'Indonesia'; break;\n                case '8D': country = 'Indonesia'; break;\n                case '8E': country = 'Indonesia'; break;\n                case '8F': country = 'Indonesia'; break;\n                case '8G': country = 'Indonesia'; break;\n                case '8H': country = 'Indonesia'; break;\n                case '8I': country = 'Indonesia'; break;\n                case '8J': country = 'Japan'; break;\n                case '8K': country = 'Japan'; break;\n                case '8L': country = 'Japan'; break;\n                case '8M': country = 'Japan'; break;\n                case '8N': country = 'Japan'; break;\n                case '8O': country = 'Botswana'; break;\n                case '8P': country = 'Barbados'; break;\n                case '8Q': country = 'Maldives'; break;\n                case '8R': country = 'Guyana'; break;\n                case '8S': country = 'Sweden'; break;\n                case '8T': country = 'India'; break;\n                case '8U': country = 'India'; break;\n                case '8V': country = 'India'; break;\n                case '8W': country = 'India'; break;\n                case '8X': country = 'India'; break;\n                case '8Y': country = 'India'; break;\n                case '8Z': country = ' Saudi Arabia'; break;\n                case '9A': country = ' Croatia'; break;\n                case '9B': country = ' Iran'; break;\n                case '9C': country = ' Iran'; break;\n                case '9D': country = ' Iran'; break;\n                case '9E': country = ' Ethiopia'; break;\n                case '9F': country = ' Ethiopia'; break;\n                case '9G': country = ' Ghana'; break;\n                case '9H': country = ' Malta'; break;\n                case '9I': country = ' Zambia'; break;\n                case '9J': country = ' Zambia'; break;\n                case '9K': country = ' Kuwait'; break;\n                case '9L': country = ' Sierra Leone'; break;\n                case '9M': country = ' Malaysia'; break;\n                case '9N': country = ' Nepal'; break;\n                case '9O': country = ' Democratic Republic of the Congo'; break;\n                case '9P': country = ' Democratic Republic of the Congo'; break;\n                case '9Q': country = ' Democratic Republic of the Congo'; break;\n                case '9R': country = ' Democratic Republic of the Congo'; break;\n                case '9S': country = ' Democratic Republic of the Congo'; break;\n                case '9T': country = ' Democratic Republic of the Congo'; break;\n                case '9U': country = ' Burundi'; break;\n                case '9V': country = ' Singapore'; break;\n                case '9W': country = ' Malaysia'; break;\n                case '9X': country = ' Rwanda'; break;\n                case '9Y': country = ' Trinidad and Tobago'; break;\n                case '9Z': country = ' Trinidad and Tobago'; break;\n    \n                case 'A2': country = ' Botswana'; break;\n                case 'A3': country = ' Tonga'; break;\n                case 'A4': country = ' Oman'; break;\n                case 'A5': country = ' Bhutan'; break;\n                case 'A6': country = ' United Arab Emirates'; break;\n                case 'A7': country = ' Qatar'; break;\n                case 'A8': country = ' Liberia'; break;\n                case 'A9': country = ' Bahrain'; break;\n                case 'AA': country = ' United States'; break;\n                case 'AB': country = ' United States'; break;\n                case 'AC': country = ' United States'; break;\n                case 'AD': country = ' United States'; break;\n                case 'AE': country = ' United States'; break;\n                case 'AF': country = ' United States'; break;\n                case 'AG': country = ' United States'; break;\n                case 'AH': country = ' United States'; break;\n                case 'AI': country = ' United States'; break;\n                case 'AJ': country = ' United States'; break;\n                case 'AK': country = ' United States'; break;\n                case 'AL': country = ' United States'; break;\n                case 'AM': country = ' Spain'; break;\n                case 'AN': country = ' Spain'; break;\n                case 'AO': country = ' Spain'; break;\n                case 'AP': country = ' Pakistan'; break;\n                case 'AQ': country = ' Pakistan'; break;\n                case 'AR': country = ' Pakistan'; break;\n                case 'AS': country = ' Pakistan'; break;\n                case 'AT': country = ' India'; break;\n                case 'AU': country = ' India'; break;\n                case 'AV': country = ' India'; break;\n                case 'AW': country = ' India'; break;\n                case 'AX': country = ' Australia'; break;\n                case 'AY': country = ' Argentina'; break;\n                case 'AZ': country = ' Argentina'; break;\n    \n                case 'BM': country = ' Taiwan'; break;\n                case 'BN': country = ' Taiwan'; break;\n                case 'BO': country = ' Taiwan'; break;\n                case 'BP': country = ' Taiwan'; break;\n                case 'BQ': country = ' Taiwan'; break;\n                case 'BU': country = ' Taiwan'; break;\n                case 'BV': country = ' Taiwan'; break;\n                case 'BW': country = ' Taiwan'; break;\n                case 'BX': country = ' Taiwan'; break;\n    \n                case 'C2': country = ' Nauru'; break;\n                case 'C3': country = ' Andorra'; break;\n                case 'C4': country = ' Cyprus'; break;\n                case 'C5': country = ' The Gambia'; break;\n                case 'C6': country = ' Bahamas'; break;\n                case 'C7': country = ' World Meteorological Organization (non-geographical)'; break;\n                case 'C8': country = ' Mozambique'; break;\n                case 'C9': country = ' Mozambique'; break;\n                case 'CA': country = ' Chile'; break;\n                case 'CB': country = ' Chile'; break;\n                case 'CC': country = ' Chile'; break;\n                case 'CD': country = ' Chile'; break;\n                case 'CE': country = ' Chile'; break;\n                case 'CF': country = ' Canada'; break;\n                case 'CG': country = ' Canada'; break;\n                case 'CH': country = ' Canada'; break;\n                case 'CI': country = ' Canada'; break;\n                case 'CJ': country = ' Canada'; break;\n                case 'CK': country = ' Canada'; break;\n                case 'CL': country = ' Cuba'; break;\n                case 'CM': country = ' Cuba'; break;\n                case 'CN': country = ' Morocco'; break;\n                case 'CO': country = ' Cuba'; break;\n                case 'CP': country = ' Bolivia'; break;\n                case 'CQ': country = ' Portugal'; break;\n                case 'CR': country = ' Portugal'; break;\n                case 'CS': country = ' Portugal'; break;\n                case 'CT': country = ' Portugal'; break;\n                case 'CU': country = ' Portugal'; break;\n                case 'CV': country = ' Uruguay'; break;\n                case 'CW': country = ' Uruguay'; break;\n                case 'CX': country = ' Uruguay'; break;\n                case 'CY': country = ' Canada'; break;\n                case 'CZ': country = ' Canada'; break;\n            \n                case 'D0': country = ' Donetsk'; break;\n                case 'D1': country = ' Donetsk'; break;\n                case 'D2': country = ' Angola'; break;\n                case 'D3': country = ' Angola'; break;\n                case 'D4': country = ' Cape Verde'; break;\n                case 'D5': country = ' Liberia'; break;\n                case 'D6': country = ' Comoros'; break;\n                case 'D7': country = ' South Korea'; break;\n                case 'D8': country = ' South Korea'; break;\n                case 'D9': country = ' South Korea'; break;\n                case 'DA': country = ' Germany'; break;\n                case 'DB': country = ' Germany'; break;\n                case 'DC': country = ' Germany'; break;\n                case 'DD': country = ' Germany'; break;\n                case 'DE': country = ' Germany'; break;\n                case 'DF': country = ' Germany'; break;\n                case 'DG': country = ' Germany'; break;\n                case 'DH': country = ' Germany'; break;\n                case 'DI': country = ' Germany'; break;\n                case 'DJ': country = ' Germany'; break;\n                case 'DK': country = ' Germany'; break;\n                case 'DL': country = ' Germany'; break;\n                case 'DM': country = ' Germany'; break;\n                case 'DN': country = ' Germany'; break;\n                case 'DO': country = ' Germany'; break;\n                case 'DP': country = ' Germany'; break;\n                case 'DQ': country = ' Germany'; break;\n                case 'DR': country = ' Germany'; break;\n                case 'DS': country = ' South Korea'; break;\n                case 'DT': country = ' South Korea'; break;\n                case 'DU': country = ' Philippines'; break;\n                case 'DV': country = ' Philippines'; break;\n                case 'DW': country = ' Philippines'; break;\n                case 'DX': country = ' Philippines'; break;\n                case 'DY': country = ' Philippines'; break;\n                case 'DZ': country = 'Philippines'; break;\n    \n                case 'E2': country = ' Thailand'; break;\n                case 'E3': country = ' Eritrea'; break;\n                case 'E4': country = ' Palestine'; break;\n                case 'E5': country = ' Cook Islands'; break;\n                case 'E6': country = ' Niue'; break;\n                case 'E7': country = ' Bosnia and Herzegovina'; break;\n                case 'EA': country = ' Spain'; break;\n                case 'EB': country = ' Spain'; break;\n                case 'EC': country = ' Spain'; break;\n                case 'ED': country = ' Spain'; break;\n                case 'EE': country = ' Spain'; break;\n                case 'EF': country = ' Spain'; break;\n                case 'EG': country = ' Spain'; break;\n                case 'EH': country = ' Spain'; break;\n                case 'EI': country = ' Ireland'; break;\n                case 'EJ': country = ' Ireland'; break;\n                case 'EK': country = ' Armenia'; break;\n                case 'EL': country = ' Liberia'; break;\n                case 'EM': country = ' Ukraine'; break;\n                case 'EN': country = ' Ukraine'; break;\n                case 'EO': country = ' Ukraine'; break;\n                case 'EP': country = ' Iran'; break;\n                case 'EQ': country = ' Iran'; break;\n                case 'ER': country = ' Moldova'; break;\n                case 'ES': country = ' Estonia'; break;\n                case 'ET': country = ' Ethiopia'; break;\n                case 'EU': country = ' Belarus'; break;\n                case 'EV': country = ' Belarus'; break;\n                case 'EW': country = ' Belarus'; break;\n                case 'EX': country = ' Kyrgyzstan'; break;\n                case 'EY': country = ' Tajikistan'; break;\n                case 'EZ': country = ' Turkmenistan'; break;\n    \n                case 'H2': country = ' Cyprus'; break;\n                case 'H3': country = ' Panama'; break;\n                case 'H4': country = ' Solomon Islands'; break;\n                case 'H5': country = ' Bophuthatswana'; break;\n                case 'H6': country = ' Nicaragua'; break;\n                case 'H7': country = ' Nicaragua'; break;\n                case 'H8': country = ' Panama'; break;\n                case 'H9': country = ' Panama'; break;\n                case 'HA': country = ' Hungary'; break;\n                case 'HB': country = ' Switzerland'; break;\n                case 'HC': country = ' Ecuador'; break;\n                case 'HD': country = ' Ecuador'; break;\n                case 'HE': country = ' Switzerland'; break;\n                case 'HF': country = ' Poland'; break;\n                case 'HG': country = ' Hungary'; break;\n                case 'HH': country = ' Haiti'; break;\n                case 'HI': country = ' Dominican Republic'; break;\n                case 'HJ': country = ' Colombia'; break;\n                case 'HK': country = ' Colombia'; break;\n                case 'HL': country = ' South Korea'; break;\n                case 'HM': country = ' North Korea'; break;\n                case 'HN': country = ' Iraq'; break;\n                case 'HO': country = ' Panama'; break;\n                case 'HP': country = ' Panama'; break;\n                case 'HQ': country = ' Honduras'; break;\n                case 'HR': country = ' Honduras'; break;\n                case 'HS': country = ' Thailand'; break;\n                case 'HT': country = ' Nicaragua'; break;\n                case 'HU': country = ' El Salvador'; break;\n                case 'HV': country = ' Vatican City'; break;\n                case 'HW': country = ' France / overseas departments / territories'; break;\n                case 'HX': country = ' France / overseas departments / territories'; break;\n                case 'HY': country = ' France / overseas departments / territories'; break;\n                case 'HZ': country = ' Saudi Arabia'; break;\n    \n                case 'J2': country = ' Djibouti'; break;\n                case 'J3': country = ' Grenada'; break;\n                case 'J4': country = ' Greece'; break;\n                case 'J5': country = ' Guinea-Bissau'; break;\n                case 'J6': country = ' Saint Lucia'; break;\n                case 'J7': country = ' Dominica'; break;\n                case 'J8': country = ' Saint Vincent and the Grenadines'; break;\n                case 'JA': country = ' Japan'; break;\n                case 'JB': country = ' Japan'; break;\n                case 'JC': country = ' Japan'; break;\n                case 'JD': country = ' Japan'; break;\n                case 'JE': country = ' Japan'; break;\n                case 'JF': country = ' Japan'; break;\n                case 'JG': country = ' Japan'; break;\n                case 'JH': country = ' Japan'; break;\n                case 'JI': country = ' Japan'; break;\n                case 'JJ': country = ' Japan'; break;\n                case 'JK': country = ' Japan'; break;\n                case 'JL': country = ' Japan'; break;\n                case 'JM': country = ' Japan'; break;\n                case 'JN': country = ' Japan'; break;\n                case 'JO': country = ' Japan'; break;\n                case 'JP': country = ' Japan'; break;\n                case 'JQ': country = ' Japan'; break;\n                case 'JR': country = ' Japan'; break;\n                case 'JS': country = ' Japan'; break;\n                case 'JT': country = ' Mongolia'; break;\n                case 'JU': country = ' Mongolia'; break;\n                case 'JV': country = ' Mongolia'; break;\n                case 'JW': country = ' Norway'; break;\n                case 'JX': country = ' Norway'; break;\n                case 'JY': country = ' Jordan'; break;\n                case 'JZ': country = ' Indonesia'; break;\n\n                case 'L2': country = ' Argentina'; break;\n                case 'L3': country = ' Argentina'; break;\n                case 'L4': country = ' Argentina'; break;\n                case 'L5': country = ' Argentina'; break;\n                case 'L6': country = ' Argentina'; break;\n                case 'L7': country = ' Argentina'; break;\n                case 'L8': country = ' Argentina'; break;\n                case 'L9': country = ' Argentina'; break;\n                case 'LA': country = ' Norway'; break;\n                case 'LB': country = ' Norway'; break;\n                case 'LC': country = ' Norway'; break;\n                case 'LD': country = ' Norway'; break;\n                case 'LE': country = ' Norway'; break;\n                case 'LF': country = ' Norway'; break;\n                case 'LG': country = ' Norway'; break;\n                case 'LH': country = ' Norway'; break;\n                case 'LI': country = ' Norway'; break;\n                case 'LJ': country = ' Norway'; break;\n                case 'LK': country = ' Norway'; break;\n                case 'LL': country = ' Norway'; break;\n                case 'LM': country = ' Norway'; break;\n                case 'LN': country = ' Norway'; break;\n                case 'LO': country = ' Argentina'; break;\n                case 'LP': country = ' Argentina'; break;\n                case 'LQ': country = ' Argentina'; break;\n                case 'LR': country = ' Argentina'; break;\n                case 'LS': country = ' Argentina'; break;\n                case 'LT': country = ' Argentina'; break;\n                case 'LU': country = ' Argentina'; break;\n                case 'LV': country = ' Argentina'; break;\n                case 'LW': country = ' Argentina'; break;\n                case 'LX': country = ' Luxembourg'; break;\n                case 'LY': country = ' Lithuania'; break;\n                case 'LZ': country = ' Bulgaria'; break;\n\n                case 'O1': country = ' South Ossetia'; break;\n                case 'OA': country = ' Peru'; break;\n                case 'OB': country = ' Peru'; break;\n                case 'OC': country = ' Peru'; break;\n                case 'OD': country = ' Lebanon'; break;\n                case 'OE': country = ' Austria'; break;\n                case 'OF': country = ' Finland'; break;\n                case 'OG': country = ' Finland'; break;\n                case 'OH': country = ' Finland'; break;\n                case 'OI': country = ' Finland'; break;\n                case 'OJ': country = ' Finland'; break;\n                case 'OK': country = ' Czech Republic'; break;\n                case 'OL': country = ' Czech Republic'; break;\n                case 'OM': country = ' Slovakia'; break;\n                case 'ON': country = ' Belgium'; break;\n                case 'OO': country = ' Belgium'; break;\n                case 'OP': country = ' Belgium'; break;\n                case 'OQ': country = ' Belgium'; break;\n                case 'OR': country = ' Belgium'; break;\n                case 'OS': country = ' Belgium'; break;\n                case 'OT': country = ' Belgium'; break;\n                case 'OU': country = ' Denmark'; break;\n                case 'OV': country = ' Denmark'; break;\n                case 'OW': country = ' Denmark'; break;\n                case 'OX': country = ' Denmark'; break;\n                case 'OY': country = ' Denmark'; break;\n                case 'OZ': country = ' Denmark'; break;\n\n                case 'P2': country = ' Papua New Guinea'; break;\n                case 'P3': country = ' Cyprus'; break;\n                case 'P4': country = ' Aruba'; break;\n                case 'P5': country = ' North Korea'; break;\n                case 'P6': country = ' North Korea'; break;\n                case 'P7': country = ' North Korea'; break;\n                case 'P8': country = ' North Korea'; break;\n                case 'P9': country = ' North Korea'; break;\n                case 'PA': country = ' Netherlands'; break;\n                case 'PB': country = ' Netherlands'; break;\n                case 'PC': country = ' Netherlands'; break;\n                case 'PD': country = ' Netherlands'; break;\n                case 'PE': country = ' Netherlands'; break;\n                case 'PF': country = ' Netherlands'; break;\n                case 'PG': country = ' Netherlands'; break;\n                case 'PH': country = ' Netherlands'; break;\n                case 'PI': country = ' Netherlands'; break;\n                case 'PJ': country = ' Netherlands - former Netherlands Antilles'; break;\n                case 'PK': country = ' Indonesia'; break;\n                case 'PL': country = ' Indonesia'; break;\n                case 'PM': country = ' Indonesia'; break;\n                case 'PN': country = ' Indonesia'; break;\n                case 'PO': country = ' Indonesia'; break;\n                case 'PP': country = ' Brazil'; break;\n                case 'PQ': country = ' Brazil'; break;\n                case 'PR': country = ' Brazil'; break;\n                case 'PS': country = ' Brazil'; break;\n                case 'PT': country = ' Brazil'; break;\n                case 'PU': country = ' Brazil'; break;\n                case 'PV': country = ' Brazil'; break;\n                case 'PW': country = ' Brazil'; break;\n                case 'PX': country = ' Brazil'; break;\n                case 'PY': country = ' Brazil'; break;\n                case 'PZ': country = ' Suriname'; break;\n\n                case 'S0': country = ' Western Sahara'; break;\n                case 'S2': country = ' Bangladesh'; break;\n                case 'S3': country = ' Bangladesh'; break;\n                case 'S5': country = ' Slovenia'; break;\n                case 'S6': country = ' Singapore'; break;\n                case 'S7': country = ' Seychelles'; break;\n                case 'S8': country = ' South Africa'; break;\n                case 'S9': country = ' São Tomé and Príncipe'; break;\n                case 'SA': country = ' Sweden'; break;\n                case 'SB': country = ' Sweden'; break;\n                case 'SC': country = ' Sweden'; break;\n                case 'SD': country = ' Sweden'; break;\n                case 'SE': country = ' Sweden'; break;\n                case 'SF': country = ' Sweden'; break;\n                case 'SG': country = ' Sweden'; break;\n                case 'SH': country = ' Sweden'; break;\n                case 'SI': country = ' Sweden'; break;\n                case 'SJ': country = ' Sweden'; break;\n                case 'SK': country = ' Sweden'; break;\n                case 'SL': country = ' Sweden'; break;\n                case 'SM': country = ' Sweden'; break;\n                case 'SN': country = ' Poland'; break;\n                case 'SO': country = ' Poland'; break;\n                case 'SP': country = ' Poland'; break;\n                case 'SQ': country = ' Poland'; break;\n                case 'SR': country = ' Poland'; break;\n                case 'SS': country = ' Sudan'; break;\n                case 'ST': country = ' Sudan'; break;\n                case 'SU': country = ' Egypt'; break;\n                case 'SV': country = ' Greece'; break;\n                case 'SW': country = ' Greece'; break;\n                case 'SX': country = ' Greece'; break;\n                case 'SY': country = ' Greece'; break;\n                case 'SZ': country = ' Greece'; break;\n\n                case 'T0': country = ' Principality of Seborga'; break;\n                case 'T1': country = ' Transnistria'; break;\n                case 'T2': country = ' Tuvalu'; break;\n                case 'T3': country = ' Kiribati'; break;\n                case 'T4': country = ' Cuba'; break;\n                case 'T5': country = ' Somalia'; break;\n                case 'T6': country = ' Afghanistan'; break;\n                case 'T7': country = ' San Marino'; break;\n                case 'T8': country = ' Palau'; break;\n                case 'TA': country = ' Turkey'; break;\n                case 'TB': country = ' Turkey'; break;\n                case 'TC': country = ' Turkey'; break;\n                case 'TD': country = ' Guatemala'; break;\n                case 'TE': country = ' Costa Rica'; break;\n                case 'TF': country = ' Iceland'; break;\n                case 'TG': country = ' Guatemala'; break;\n                case 'TH': country = ' France / overseas departments / territories'; break;\n                case 'TI': country = ' Costa Rica'; break;\n                case 'TJ': country = ' Cameroon'; break;\n                case 'TK': country = ' France / overseas departments / territories'; break;\n                case 'TL': country = ' Central African Republic'; break;\n                case 'TM': country = ' France / overseas departments / territories'; break;\n                case 'TN': country = ' Congo'; break;\n                case 'TO': country = ' France / overseas departments / territories'; break;\n                case 'TP': country = ' France / overseas departments / territories'; break;\n                case 'TQ': country = ' France / overseas departments / territories'; break;\n                case 'TR': country = ' Gabon'; break;\n                case 'TS': country = ' Tunisia'; break;\n                case 'TT': country = ' Chad'; break;\n                case 'TU': country = ' Ivory Coast'; break;\n                case 'TV': country = ' France / overseas departments / territories'; break;\n                case 'TW': country = ' France / overseas departments / territories'; break;\n                case 'TX': country = ' France / overseas departments / territories'; break;\n                case 'TY': country = ' Benin'; break;\n                case 'TZ': country = ' Mali'; break;\n\n                case 'UA': country = ' Russia'; break;\n                case 'UB': country = ' Russia'; break;\n                case 'UC': country = ' Russia'; break;\n                case 'UD': country = ' Russia'; break;\n                case 'UE': country = ' Russia'; break;\n                case 'UF': country = ' Russia'; break;\n                case 'UG': country = ' Russia'; break;\n                case 'UH': country = ' Russia'; break;\n                case 'UI': country = ' Russia'; break;\n                case 'UJ': country = ' Uzbekistan'; break;\n                case 'UK': country = ' Uzbekistan'; break;\n                case 'UL': country = ' Uzbekistan'; break;\n                case 'UM': country = ' Uzbekistan'; break;\n                case 'UN': country = ' Kazakhstan'; break;\n                case 'UO': country = ' Kazakhstan'; break;\n                case 'UP': country = ' Kazakhstan'; break;\n                case 'UQ': country = ' Kazakhstan'; break;\n                case 'UR': country = ' Ukraine'; break;\n                case 'US': country = ' Ukraine'; break;\n                case 'UT': country = ' Ukraine'; break;\n                case 'UU': country = ' Ukraine'; break;\n                case 'UV': country = ' Ukraine'; break;\n                case 'UW': country = ' Ukraine'; break;\n                case 'UX': country = ' Ukraine'; break;\n                case 'UY': country = ' Ukraine'; break;\n                case 'UZ': country = ' Ukraine'; break;\n\n                case 'V2': country = ' Antigua and Barbuda'; break;\n                case 'V3': country = ' Belize'; break;\n                case 'V4': country = 'Saint Kitts and Nevis'; break;\n                case 'V5': country = ' Namibia'; break;\n                case 'V6': country = ' Federated States of Micronesia'; break;\n                case 'V7': country = ' Marshall Islands'; break;\n                case 'V8': country = ' Brunei'; break;\n                case 'VA': country = ' Canada'; break;\n                case 'VB': country = ' Canada'; break;\n                case 'VC': country = ' Canada'; break;\n                case 'VD': country = ' Canada'; break;\n                case 'VE': country = ' Canada'; break;\n                case 'VF': country = ' Canada'; break;\n                case 'VG': country = ' Canada'; break;\n                case 'VH': country = ' Australia'; break;\n                case 'VI': country = ' Australia'; break;\n                case 'VJ': country = ' Australia'; break;\n                case 'VK': country = ' Australia'; break;\n                case 'VL': country = ' Australia'; break;\n                case 'VM': country = ' Australia'; break;\n                case 'VN': country = ' Australia'; break;\n                case 'VO': country = ' Canada (Newfoundland)'; break;\n                case 'VP': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'VQ': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'VR': country = ' Hong Kong'; break;\n                case 'VS': country = ' United Kingdom'; break;\n                case 'VT': country = ' India'; break;\n                case 'VU': country = ' India'; break;\n                case 'VV': country = ' India'; break;\n                case 'VW': country = ' India'; break;\n                case 'VX': country = ' Canada'; break;\n                case 'VY': country = ' Canada'; break;\n                case 'VZ': country = ' Australia'; break;\n\n                case 'XA': country = ' Mexico'; break;\n                case 'XB': country = ' Mexico'; break;\n                case 'XC': country = ' Mexico'; break;\n                case 'XD': country = ' Mexico'; break;\n                case 'XE': country = ' Mexico'; break;\n                case 'XF': country = ' Mexico'; break;\n                case 'XG': country = ' Mexico'; break;\n                case 'XH': country = ' Mexico'; break;\n                case 'XI': country = ' Mexico'; break;\n                case 'XJ': country = ' Canada'; break;\n                case 'XK': country = ' Canada'; break;\n                case 'XL': country = ' Canada'; break;\n                case 'XM': country = ' Canada'; break;\n                case 'XN': country = ' Canada'; break;\n                case 'XO': country = ' Canada'; break;\n                case 'XP': country = ' Denmark'; break;\n                case 'XQ': country = ' Chile'; break;\n                case 'XR': country = ' Chile'; break;\n                case 'XS': country = ' Peoples Republic of China'; break;\n                case 'XT': country = ' Burkina Faso'; break;\n                case 'XU': country = ' Cambodia'; break;\n                case 'XV': country = ' Vietnam'; break;\n                case 'XW': country = ' Laos'; break;\n                case 'XX': country = ' Macao'; break;\n                case 'XY': country = ' Burma'; break;\n                case 'XZ': country = ' Burma'; break;\n\n                case 'Y2': country = ' Germany'; break;\n                case 'Y3': country = ' Germany'; break;\n                case 'Y4': country = ' Germany'; break;\n                case 'Y5': country = ' Germany'; break;\n                case 'Y6': country = ' Germany'; break;\n                case 'Y7': country = ' Germany'; break;\n                case 'Y8': country = ' Germany'; break;\n                case 'Y9': country = ' Germany'; break;\n                case 'YA': country = ' Afghanistan'; break;\n                case 'YB': country = ' Indonesia'; break;\n                case 'YC': country = ' Indonesia'; break;\n                case 'YD': country = ' Indonesia'; break;\n                case 'YE': country = ' Indonesia'; break;\n                case 'YF': country = ' Indonesia'; break;\n                case 'YG': country = ' Indonesia'; break;\n                case 'YH': country = ' Indonesia'; break;\n                case 'YI': country = ' Iraq'; break;\n                case 'YJ': country = ' Vanuatu'; break;\n                case 'YK': country = ' Syria'; break;\n                case 'YL': country = ' Latvia'; break;\n                case 'YM': country = ' Turkey'; break;\n                case 'YN': country = ' Nicaragua'; break;\n                case 'YO': country = ' Romania'; break;\n                case 'YP': country = ' Romania'; break;\n                case 'YQ': country = ' Romania'; break;\n                case 'YR': country = ' Romania'; break;\n                case 'YS': country = ' El Salvador'; break;\n                case 'YT': country = ' Serbia'; break;\n                case 'YU': country = ' Serbia'; break;\n                case 'YV': country = ' Venezuela'; break;\n                case 'YW': country = ' Venezuela'; break;\n                case 'YX': country = ' Venezuela'; break;\n                case 'YY': country = ' Venezuela'; break;\n\n                case 'Z2': country = ' Zimbabwe'; break;\n                case 'Z3': country = ' Republic of Macedonia'; break;\n                case 'Z6': country = ' Kosovo'; break;\n                case 'Z8': country = ' South Sudan'; break;\n                case 'ZA': country = ' Albania'; break;\n                case 'ZB': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZC': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZD': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZE': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZF': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZG': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZH': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZI': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZJ': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZK': country = ' New Zealand'; break;\n                case 'ZL': country = ' New Zealand'; break;\n                case 'ZM': country = ' New Zealand'; break;\n                case 'ZN': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZO': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZP': country = ' Paraguay'; break;\n                case 'ZQ': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZR': country = ' South Africa'; break;\n                case 'ZS': country = ' South Africa'; break;\n                case 'ZT': country = ' South Africa'; break;\n                case 'ZU': country = ' South Africa'; break;\n                case 'ZV': country = ' Brazil'; break;\n                case 'ZW': country = ' Brazil'; break;\n                case 'ZX': country = ' Brazil'; break;\n                case 'ZY': country = ' Brazil'; break;\n                case 'ZZ': country = ' Brazil'; break;\n            }\n        }\n\n        if (country === null){\n    \n            count = 1;\n            find_this = origin_callsign.substring(0,count);\n    \n            switch (find_this){\n\n                case '2': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'B': country = ' Peoples Republic of China'; break;\n                case 'F': country = ' France / overseas departments / territories'; break;\n                case 'G': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'I': country = ' Italy'; break;\n                case 'K': country = ' United States'; break;\n                case 'M': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'N': country = ' United States'; break;\n                case 'R': country = ' Russia'; break;\n                case 'W': country = ' United States'; break;\n            }\n        }\n\n\n        if (country !== null) { msg.origin_country = country.trim(); } else { msg.origin_country = null; }\n\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 500,
        "wires": [
            [
                "1f753606.362312"
            ]
        ]
    },
    {
        "id": "1f753606.362312",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Target Call Country Name",
        "func": "// Based on msg.has_origin_callsign and msg.origin_callsign,\n// Results will be either msg.origin_country = <Country Name> or <null>\n\n\nif (msg.has_target_callsign){\n\n            target_callsign = msg.target_callsign;\n            country = null;\n\n        if (country === null){\n            \n            count = 4;\n            find_this = target_callsign.substring(0,count);\n\n            switch (find_this){\n                case 'HB3Y': country = ' Liechtenstein'; break;\n            }\n        }\n\n        if (country === null){\n\n            count = 3;\n            find_this = target_callsign.substring(0,count);\n        \n            switch (find_this){\n\n                case '3DA': country = ' Swaziland'; break;\n                case '3DB': country = ' Swaziland'; break;\n                case '3DC': country = ' Swaziland'; break;\n                case '3DD': country = ' Swaziland'; break;\n                case '3DE': country = ' Swaziland'; break;\n                case '3DF': country = ' Swaziland'; break;\n                case '3DG': country = ' Swaziland'; break;\n                case '3DH': country = ' Swaziland'; break;\n                case '3DI': country = ' Swaziland'; break;\n                case '3DJ': country = ' Swaziland'; break;\n                case '3DK': country = ' Swaziland'; break;\n                case '3DL': country = ' Swaziland'; break;\n                case '3DM': country = ' Swaziland'; break;\n                case '3DN': country = ' Fiji'; break;\n                case '3DO': country = ' Fiji'; break;\n                case '3DP': country = ' Fiji'; break;\n                case '3DQ': country = ' Fiji'; break;\n                case '3DR': country = ' Fiji'; break;\n                case '3DS': country = ' Fiji'; break;\n                case '3DT': country = ' Fiji'; break;\n                case '3DU': country = ' Fiji'; break;\n                case '3DV': country = ' Fiji'; break;\n                case '3DW': country = ' Fiji'; break;\n                case '3DX': country = ' Fiji'; break;\n                case '3DY': country = ' Fiji'; break;\n                case '3DZ': country = ' Fiji'; break;\n                case '9M0': country = ' Spratly Islands'; break;\n                case 'BV9': country = ' Spratly Islands'; break;\n                case 'DX0': country = ' Spratly Islands'; break;\n                case 'HB0': country = ' Liechtenstein'; break;\n                case 'HBL': country = ' Liechtenstein'; break;\n                case 'RA6': country = ' Chechnya'; break;\n                case 'SSA': country = ' Egypt'; break;\n                case 'SSB': country = ' Egypt'; break;\n                case 'SSC': country = ' Egypt'; break;\n                case 'SSD': country = ' Egypt'; break;\n                case 'SSE': country = ' Egypt'; break;\n                case 'SSF': country = ' Egypt'; break;\n                case 'SSG': country = ' Egypt'; break;\n                case 'SSH': country = ' Egypt'; break;\n                case 'SSI': country = ' Egypt'; break;\n                case 'SSJ': country = ' Egypt'; break;\n                case 'SSK': country = ' Egypt'; break;\n                case 'SSL': country = ' Egypt'; break;\n                case 'SSM': country = ' Egypt'; break;\n            }\n        }\n\n        if (country === null){\n\n            count = 2;\n            find_this = target_callsign.substring(0,count);\n    \n            switch (find_this){\n\n                case '0S': country = 'Principality of Seborga'; break;\n                case '1A': country = 'Sovereign Military Order of Malta'; break;\n                case '1B': country = 'Northern Cyprus or Blenheim Reef'; break;\n                case '1G': country = 'Geyser Reef'; break;\n                case '1L': country = 'Liberland'; break;\n                case '1M': country = 'Minerva Reefs'; break;\n                case '1S': country = 'Principality of Sealand'; break;\n                case '1Z': country = 'Kayin State'; break;\n                case '3A': country = 'Monaco'; break;\n                case '3B': country = 'Mauritius'; break;\n                case '3C': country = 'Equatorial Guinea'; break;\n                case '3E': country = 'Panama'; break;\n                case '3F': country = 'Panama'; break;\n                case '3G': country = 'Chile'; break;\n                case '3H': country = 'Peoples Republic of China'; break;\n                case '3I': country = 'Peoples Republic of China'; break;\n                case '3J': country = 'Peoples Republic of China'; break;\n                case '3K': country = 'Peoples Republic of China'; break;\n                case '3L': country = 'Peoples Republic of China'; break;\n                case '3M': country = 'Peoples Republic of China'; break;\n                case '3N': country = 'Peoples Republic of China'; break;\n                case '3O': country = 'Peoples Republic of China'; break;\n                case '3P': country = 'Peoples Republic of China'; break;\n                case '3Q': country = 'Peoples Republic of China'; break;\n                case '3R': country = 'Peoples Republic of China'; break;\n                case '3S': country = 'Peoples Republic of China'; break;\n                case '3T': country = 'Peoples Republic of China'; break;\n                case '3U': country = 'Peoples Republic of China'; break;\n                case '3V': country = 'Tunisia'; break;\n                case '3W': country = 'Vietnam'; break;\n                case '3X': country = 'Guinea'; break;\n                case '3Y': country = 'Norway'; break;\n                case '3Z': country = 'Poland'; break;\n                case '4A': country = 'Mexico'; break;\n                case '4B': country = 'Mexico'; break;\n                case '4C': country = 'Mexico'; break;\n                case '4D': country = 'Philippines'; break;\n                case '4E': country = 'Philippines'; break;\n                case '4F': country = 'Philippines'; break;\n                case '4G': country = 'Philippines'; break;\n                case '4H': country = 'Philippines'; break;\n                case '4I': country = 'Philippines'; break;\n                case '4J': country = 'Azerbaijan'; break;\n                case '4K': country = 'Azerbaijan'; break;\n                case '4L': country = 'Georgia'; break;\n                case '4M': country = 'Venezuela'; break;\n                case '4O': country = 'Montenegro'; break;\n                case '4P': country = 'Sri Lanka'; break;\n                case '4Q': country = 'Sri Lanka'; break;\n                case '4R': country = 'Sri Lanka'; break;\n                case '4S': country = 'Sri Lanka'; break;\n                case '4T': country = 'Peru'; break;\n                case '4U': country = 'United Nations (non-geographical)'; break;\n                case '4V': country = 'Haiti'; break;\n                case '4W': country = 'East Timor'; break;\n                case '4X': country = 'Israel'; break;\n                case '4Y': country = 'International Civil Aviation Organization (non-geographical)'; break;\n                case '4Z': country = 'Israel'; break;\n                case '5A': country = 'Libya'; break;\n                case '5B': country = 'Cyprus'; break;\n                case '5C': country = 'Morocco'; break;\n                case '5D': country = 'Morocco'; break;\n                case '5E': country = 'Morocco'; break;\n                case '5F': country = 'Morocco'; break;\n                case '5G': country = 'Morocco'; break;\n                case '5H': country = 'Tanzania'; break;\n                case '5I': country = 'Tanzania'; break;\n                case '5J': country = 'Colombia'; break;\n                case '5K': country = 'Colombia'; break;\n                case '5L': country = 'Liberia'; break;\n                case '5M': country = 'Liberia'; break;\n                case '5N': country = 'Nigeria'; break;\n                case '5O': country = 'Nigeria'; break;\n                case '5P': country = 'Denmark'; break;\n                case '5Q': country = 'Denmark'; break;\n                case '5R': country = 'Madagascar'; break;\n                case '5S': country = 'Madagascar'; break;\n                case '5T': country = 'Mauritania'; break;\n                case '5U': country = 'Niger'; break;\n                case '5V': country = 'Togo'; break;\n                case '5W': country = 'Western Samoa'; break;\n                case '5X': country = 'Uganda'; break;\n                case '5Y': country = 'Kenya'; break;\n                case '5Z': country = 'Kenya'; break;\n                case '6A': country = 'Egypt'; break;\n                case '6B': country = 'Egypt'; break;\n                case '6C': country = 'Syria'; break;\n                case '6D': country = 'Mexico'; break;\n                case '6E': country = 'Mexico'; break;\n                case '6F': country = 'Mexico'; break;\n                case '6G': country = 'Mexico'; break;\n                case '6H': country = 'Mexico'; break;\n                case '6I': country = 'Mexico'; break;\n                case '6J': country = 'Mexico'; break;\n                case '6K': country = 'South Korea'; break;\n                case '6L': country = 'South Korea'; break;\n                case '6M': country = 'South Korea'; break;\n                case '6N': country = 'South Korea'; break;\n                case '6O': country = 'Somalia'; break;\n                case '6P': country = 'Pakistan'; break;\n                case '6Q': country = 'Pakistan'; break;\n                case '6R': country = 'Pakistan'; break;\n                case '6S': country = 'Pakistan'; break;\n                case '6T': country = 'Sudan'; break;\n                case '6U': country = 'Sudan'; break;\n                case '6V': country = 'Senegal'; break;\n                case '6W': country = 'Senegal'; break;\n                case '6X': country = 'Madagascar'; break;\n                case '6Y': country = 'Jamaica'; break;\n                case '6Z': country = 'Liberia'; break;\n                case '7A': country = 'Indonesia'; break;\n                case '7B': country = 'Indonesia'; break;\n                case '7C': country = 'Indonesia'; break;\n                case '7D': country = 'Indonesia'; break;\n                case '7E': country = 'Indonesia'; break;\n                case '7F': country = 'Indonesia'; break;\n                case '7G': country = 'Indonesia'; break;\n                case '7H': country = 'Indonesia'; break;\n                case '7I': country = 'Indonesia'; break;\n                case '7J': country = 'Japan'; break;\n                case '7K': country = 'Japan'; break;\n                case '7L': country = 'Japan'; break;\n                case '7M': country = 'Japan'; break;\n                case '7N': country = 'Japan'; break;\n                case '7O': country = 'Yemen'; break;\n                case '7P': country = 'Lesotho'; break;\n                case '7Q': country = 'Malawi'; break;\n                case '7R': country = 'Algeria'; break;\n                case '7S': country = 'Sweden'; break;\n                case '7T': country = 'Algeria'; break;\n                case '7U': country = 'Algeria'; break;\n                case '7V': country = 'Algeria'; break;\n                case '7W': country = 'Algeria'; break;\n                case '7X': country = 'Algeria'; break;\n                case '7Y': country = 'Algeria'; break;\n                case '7Z': country = 'Saudi Arabia'; break;\n                case '8A': country = 'Indonesia'; break;\n                case '8B': country = 'Indonesia'; break;\n                case '8C': country = 'Indonesia'; break;\n                case '8D': country = 'Indonesia'; break;\n                case '8E': country = 'Indonesia'; break;\n                case '8F': country = 'Indonesia'; break;\n                case '8G': country = 'Indonesia'; break;\n                case '8H': country = 'Indonesia'; break;\n                case '8I': country = 'Indonesia'; break;\n                case '8J': country = 'Japan'; break;\n                case '8K': country = 'Japan'; break;\n                case '8L': country = 'Japan'; break;\n                case '8M': country = 'Japan'; break;\n                case '8N': country = 'Japan'; break;\n                case '8O': country = 'Botswana'; break;\n                case '8P': country = 'Barbados'; break;\n                case '8Q': country = 'Maldives'; break;\n                case '8R': country = 'Guyana'; break;\n                case '8S': country = 'Sweden'; break;\n                case '8T': country = 'India'; break;\n                case '8U': country = 'India'; break;\n                case '8V': country = 'India'; break;\n                case '8W': country = 'India'; break;\n                case '8X': country = 'India'; break;\n                case '8Y': country = 'India'; break;\n                case '8Z': country = ' Saudi Arabia'; break;\n                case '9A': country = ' Croatia'; break;\n                case '9B': country = ' Iran'; break;\n                case '9C': country = ' Iran'; break;\n                case '9D': country = ' Iran'; break;\n                case '9E': country = ' Ethiopia'; break;\n                case '9F': country = ' Ethiopia'; break;\n                case '9G': country = ' Ghana'; break;\n                case '9H': country = ' Malta'; break;\n                case '9I': country = ' Zambia'; break;\n                case '9J': country = ' Zambia'; break;\n                case '9K': country = ' Kuwait'; break;\n                case '9L': country = ' Sierra Leone'; break;\n                case '9M': country = ' Malaysia'; break;\n                case '9N': country = ' Nepal'; break;\n                case '9O': country = ' Democratic Republic of the Congo'; break;\n                case '9P': country = ' Democratic Republic of the Congo'; break;\n                case '9Q': country = ' Democratic Republic of the Congo'; break;\n                case '9R': country = ' Democratic Republic of the Congo'; break;\n                case '9S': country = ' Democratic Republic of the Congo'; break;\n                case '9T': country = ' Democratic Republic of the Congo'; break;\n                case '9U': country = ' Burundi'; break;\n                case '9V': country = ' Singapore'; break;\n                case '9W': country = ' Malaysia'; break;\n                case '9X': country = ' Rwanda'; break;\n                case '9Y': country = ' Trinidad and Tobago'; break;\n                case '9Z': country = ' Trinidad and Tobago'; break;\n    \n                case 'A2': country = ' Botswana'; break;\n                case 'A3': country = ' Tonga'; break;\n                case 'A4': country = ' Oman'; break;\n                case 'A5': country = ' Bhutan'; break;\n                case 'A6': country = ' United Arab Emirates'; break;\n                case 'A7': country = ' Qatar'; break;\n                case 'A8': country = ' Liberia'; break;\n                case 'A9': country = ' Bahrain'; break;\n                case 'AA': country = ' United States'; break;\n                case 'AB': country = ' United States'; break;\n                case 'AC': country = ' United States'; break;\n                case 'AD': country = ' United States'; break;\n                case 'AE': country = ' United States'; break;\n                case 'AF': country = ' United States'; break;\n                case 'AG': country = ' United States'; break;\n                case 'AH': country = ' United States'; break;\n                case 'AI': country = ' United States'; break;\n                case 'AJ': country = ' United States'; break;\n                case 'AK': country = ' United States'; break;\n                case 'AL': country = ' United States'; break;\n                case 'AM': country = ' Spain'; break;\n                case 'AN': country = ' Spain'; break;\n                case 'AO': country = ' Spain'; break;\n                case 'AP': country = ' Pakistan'; break;\n                case 'AQ': country = ' Pakistan'; break;\n                case 'AR': country = ' Pakistan'; break;\n                case 'AS': country = ' Pakistan'; break;\n                case 'AT': country = ' India'; break;\n                case 'AU': country = ' India'; break;\n                case 'AV': country = ' India'; break;\n                case 'AW': country = ' India'; break;\n                case 'AX': country = ' Australia'; break;\n                case 'AY': country = ' Argentina'; break;\n                case 'AZ': country = ' Argentina'; break;\n    \n                case 'BM': country = ' Taiwan'; break;\n                case 'BN': country = ' Taiwan'; break;\n                case 'BO': country = ' Taiwan'; break;\n                case 'BP': country = ' Taiwan'; break;\n                case 'BQ': country = ' Taiwan'; break;\n                case 'BU': country = ' Taiwan'; break;\n                case 'BV': country = ' Taiwan'; break;\n                case 'BW': country = ' Taiwan'; break;\n                case 'BX': country = ' Taiwan'; break;\n    \n                case 'C2': country = ' Nauru'; break;\n                case 'C3': country = ' Andorra'; break;\n                case 'C4': country = ' Cyprus'; break;\n                case 'C5': country = ' The Gambia'; break;\n                case 'C6': country = ' Bahamas'; break;\n                case 'C7': country = ' World Meteorological Organization (non-geographical)'; break;\n                case 'C8': country = ' Mozambique'; break;\n                case 'C9': country = ' Mozambique'; break;\n                case 'CA': country = ' Chile'; break;\n                case 'CB': country = ' Chile'; break;\n                case 'CC': country = ' Chile'; break;\n                case 'CD': country = ' Chile'; break;\n                case 'CE': country = ' Chile'; break;\n                case 'CF': country = ' Canada'; break;\n                case 'CG': country = ' Canada'; break;\n                case 'CH': country = ' Canada'; break;\n                case 'CI': country = ' Canada'; break;\n                case 'CJ': country = ' Canada'; break;\n                case 'CK': country = ' Canada'; break;\n                case 'CL': country = ' Cuba'; break;\n                case 'CM': country = ' Cuba'; break;\n                case 'CN': country = ' Morocco'; break;\n                case 'CO': country = ' Cuba'; break;\n                case 'CP': country = ' Bolivia'; break;\n                case 'CQ': country = ' Portugal'; break;\n                case 'CR': country = ' Portugal'; break;\n                case 'CS': country = ' Portugal'; break;\n                case 'CT': country = ' Portugal'; break;\n                case 'CU': country = ' Portugal'; break;\n                case 'CV': country = ' Uruguay'; break;\n                case 'CW': country = ' Uruguay'; break;\n                case 'CX': country = ' Uruguay'; break;\n                case 'CY': country = ' Canada'; break;\n                case 'CZ': country = ' Canada'; break;\n            \n                case 'D0': country = ' Donetsk'; break;\n                case 'D1': country = ' Donetsk'; break;\n                case 'D2': country = ' Angola'; break;\n                case 'D3': country = ' Angola'; break;\n                case 'D4': country = ' Cape Verde'; break;\n                case 'D5': country = ' Liberia'; break;\n                case 'D6': country = ' Comoros'; break;\n                case 'D7': country = ' South Korea'; break;\n                case 'D8': country = ' South Korea'; break;\n                case 'D9': country = ' South Korea'; break;\n                case 'DA': country = ' Germany'; break;\n                case 'DB': country = ' Germany'; break;\n                case 'DC': country = ' Germany'; break;\n                case 'DD': country = ' Germany'; break;\n                case 'DE': country = ' Germany'; break;\n                case 'DF': country = ' Germany'; break;\n                case 'DG': country = ' Germany'; break;\n                case 'DH': country = ' Germany'; break;\n                case 'DI': country = ' Germany'; break;\n                case 'DJ': country = ' Germany'; break;\n                case 'DK': country = ' Germany'; break;\n                case 'DL': country = ' Germany'; break;\n                case 'DM': country = ' Germany'; break;\n                case 'DN': country = ' Germany'; break;\n                case 'DO': country = ' Germany'; break;\n                case 'DP': country = ' Germany'; break;\n                case 'DQ': country = ' Germany'; break;\n                case 'DR': country = ' Germany'; break;\n                case 'DS': country = ' South Korea'; break;\n                case 'DT': country = ' South Korea'; break;\n                case 'DU': country = ' Philippines'; break;\n                case 'DV': country = ' Philippines'; break;\n                case 'DW': country = ' Philippines'; break;\n                case 'DX': country = ' Philippines'; break;\n                case 'DY': country = ' Philippines'; break;\n                case 'DZ': country = 'Philippines'; break;\n    \n                case 'E2': country = ' Thailand'; break;\n                case 'E3': country = ' Eritrea'; break;\n                case 'E4': country = ' Palestine'; break;\n                case 'E5': country = ' Cook Islands'; break;\n                case 'E6': country = ' Niue'; break;\n                case 'E7': country = ' Bosnia and Herzegovina'; break;\n                case 'EA': country = ' Spain'; break;\n                case 'EB': country = ' Spain'; break;\n                case 'EC': country = ' Spain'; break;\n                case 'ED': country = ' Spain'; break;\n                case 'EE': country = ' Spain'; break;\n                case 'EF': country = ' Spain'; break;\n                case 'EG': country = ' Spain'; break;\n                case 'EH': country = ' Spain'; break;\n                case 'EI': country = ' Ireland'; break;\n                case 'EJ': country = ' Ireland'; break;\n                case 'EK': country = ' Armenia'; break;\n                case 'EL': country = ' Liberia'; break;\n                case 'EM': country = ' Ukraine'; break;\n                case 'EN': country = ' Ukraine'; break;\n                case 'EO': country = ' Ukraine'; break;\n                case 'EP': country = ' Iran'; break;\n                case 'EQ': country = ' Iran'; break;\n                case 'ER': country = ' Moldova'; break;\n                case 'ES': country = ' Estonia'; break;\n                case 'ET': country = ' Ethiopia'; break;\n                case 'EU': country = ' Belarus'; break;\n                case 'EV': country = ' Belarus'; break;\n                case 'EW': country = ' Belarus'; break;\n                case 'EX': country = ' Kyrgyzstan'; break;\n                case 'EY': country = ' Tajikistan'; break;\n                case 'EZ': country = ' Turkmenistan'; break;\n    \n                case 'H2': country = ' Cyprus'; break;\n                case 'H3': country = ' Panama'; break;\n                case 'H4': country = ' Solomon Islands'; break;\n                case 'H5': country = ' Bophuthatswana'; break;\n                case 'H6': country = ' Nicaragua'; break;\n                case 'H7': country = ' Nicaragua'; break;\n                case 'H8': country = ' Panama'; break;\n                case 'H9': country = ' Panama'; break;\n                case 'HA': country = ' Hungary'; break;\n                case 'HB': country = ' Switzerland'; break;\n                case 'HC': country = ' Ecuador'; break;\n                case 'HD': country = ' Ecuador'; break;\n                case 'HE': country = ' Switzerland'; break;\n                case 'HF': country = ' Poland'; break;\n                case 'HG': country = ' Hungary'; break;\n                case 'HH': country = ' Haiti'; break;\n                case 'HI': country = ' Dominican Republic'; break;\n                case 'HJ': country = ' Colombia'; break;\n                case 'HK': country = ' Colombia'; break;\n                case 'HL': country = ' South Korea'; break;\n                case 'HM': country = ' North Korea'; break;\n                case 'HN': country = ' Iraq'; break;\n                case 'HO': country = ' Panama'; break;\n                case 'HP': country = ' Panama'; break;\n                case 'HQ': country = ' Honduras'; break;\n                case 'HR': country = ' Honduras'; break;\n                case 'HS': country = ' Thailand'; break;\n                case 'HT': country = ' Nicaragua'; break;\n                case 'HU': country = ' El Salvador'; break;\n                case 'HV': country = ' Vatican City'; break;\n                case 'HW': country = ' France / overseas departments / territories'; break;\n                case 'HX': country = ' France / overseas departments / territories'; break;\n                case 'HY': country = ' France / overseas departments / territories'; break;\n                case 'HZ': country = ' Saudi Arabia'; break;\n    \n                case 'J2': country = ' Djibouti'; break;\n                case 'J3': country = ' Grenada'; break;\n                case 'J4': country = ' Greece'; break;\n                case 'J5': country = ' Guinea-Bissau'; break;\n                case 'J6': country = ' Saint Lucia'; break;\n                case 'J7': country = ' Dominica'; break;\n                case 'J8': country = ' Saint Vincent and the Grenadines'; break;\n                case 'JA': country = ' Japan'; break;\n                case 'JB': country = ' Japan'; break;\n                case 'JC': country = ' Japan'; break;\n                case 'JD': country = ' Japan'; break;\n                case 'JE': country = ' Japan'; break;\n                case 'JF': country = ' Japan'; break;\n                case 'JG': country = ' Japan'; break;\n                case 'JH': country = ' Japan'; break;\n                case 'JI': country = ' Japan'; break;\n                case 'JJ': country = ' Japan'; break;\n                case 'JK': country = ' Japan'; break;\n                case 'JL': country = ' Japan'; break;\n                case 'JM': country = ' Japan'; break;\n                case 'JN': country = ' Japan'; break;\n                case 'JO': country = ' Japan'; break;\n                case 'JP': country = ' Japan'; break;\n                case 'JQ': country = ' Japan'; break;\n                case 'JR': country = ' Japan'; break;\n                case 'JS': country = ' Japan'; break;\n                case 'JT': country = ' Mongolia'; break;\n                case 'JU': country = ' Mongolia'; break;\n                case 'JV': country = ' Mongolia'; break;\n                case 'JW': country = ' Norway'; break;\n                case 'JX': country = ' Norway'; break;\n                case 'JY': country = ' Jordan'; break;\n                case 'JZ': country = ' Indonesia'; break;\n\n                case 'L2': country = ' Argentina'; break;\n                case 'L3': country = ' Argentina'; break;\n                case 'L4': country = ' Argentina'; break;\n                case 'L5': country = ' Argentina'; break;\n                case 'L6': country = ' Argentina'; break;\n                case 'L7': country = ' Argentina'; break;\n                case 'L8': country = ' Argentina'; break;\n                case 'L9': country = ' Argentina'; break;\n                case 'LA': country = ' Norway'; break;\n                case 'LB': country = ' Norway'; break;\n                case 'LC': country = ' Norway'; break;\n                case 'LD': country = ' Norway'; break;\n                case 'LE': country = ' Norway'; break;\n                case 'LF': country = ' Norway'; break;\n                case 'LG': country = ' Norway'; break;\n                case 'LH': country = ' Norway'; break;\n                case 'LI': country = ' Norway'; break;\n                case 'LJ': country = ' Norway'; break;\n                case 'LK': country = ' Norway'; break;\n                case 'LL': country = ' Norway'; break;\n                case 'LM': country = ' Norway'; break;\n                case 'LN': country = ' Norway'; break;\n                case 'LO': country = ' Argentina'; break;\n                case 'LP': country = ' Argentina'; break;\n                case 'LQ': country = ' Argentina'; break;\n                case 'LR': country = ' Argentina'; break;\n                case 'LS': country = ' Argentina'; break;\n                case 'LT': country = ' Argentina'; break;\n                case 'LU': country = ' Argentina'; break;\n                case 'LV': country = ' Argentina'; break;\n                case 'LW': country = ' Argentina'; break;\n                case 'LX': country = ' Luxembourg'; break;\n                case 'LY': country = ' Lithuania'; break;\n                case 'LZ': country = ' Bulgaria'; break;\n\n                case 'O1': country = ' South Ossetia'; break;\n                case 'OA': country = ' Peru'; break;\n                case 'OB': country = ' Peru'; break;\n                case 'OC': country = ' Peru'; break;\n                case 'OD': country = ' Lebanon'; break;\n                case 'OE': country = ' Austria'; break;\n                case 'OF': country = ' Finland'; break;\n                case 'OG': country = ' Finland'; break;\n                case 'OH': country = ' Finland'; break;\n                case 'OI': country = ' Finland'; break;\n                case 'OJ': country = ' Finland'; break;\n                case 'OK': country = ' Czech Republic'; break;\n                case 'OL': country = ' Czech Republic'; break;\n                case 'OM': country = ' Slovakia'; break;\n                case 'ON': country = ' Belgium'; break;\n                case 'OO': country = ' Belgium'; break;\n                case 'OP': country = ' Belgium'; break;\n                case 'OQ': country = ' Belgium'; break;\n                case 'OR': country = ' Belgium'; break;\n                case 'OS': country = ' Belgium'; break;\n                case 'OT': country = ' Belgium'; break;\n                case 'OU': country = ' Denmark'; break;\n                case 'OV': country = ' Denmark'; break;\n                case 'OW': country = ' Denmark'; break;\n                case 'OX': country = ' Denmark'; break;\n                case 'OY': country = ' Denmark'; break;\n                case 'OZ': country = ' Denmark'; break;\n\n                case 'P2': country = ' Papua New Guinea'; break;\n                case 'P3': country = ' Cyprus'; break;\n                case 'P4': country = ' Aruba'; break;\n                case 'P5': country = ' North Korea'; break;\n                case 'P6': country = ' North Korea'; break;\n                case 'P7': country = ' North Korea'; break;\n                case 'P8': country = ' North Korea'; break;\n                case 'P9': country = ' North Korea'; break;\n                case 'PA': country = ' Netherlands'; break;\n                case 'PB': country = ' Netherlands'; break;\n                case 'PC': country = ' Netherlands'; break;\n                case 'PD': country = ' Netherlands'; break;\n                case 'PE': country = ' Netherlands'; break;\n                case 'PF': country = ' Netherlands'; break;\n                case 'PG': country = ' Netherlands'; break;\n                case 'PH': country = ' Netherlands'; break;\n                case 'PI': country = ' Netherlands'; break;\n                case 'PJ': country = ' Netherlands - former Netherlands Antilles'; break;\n                case 'PK': country = ' Indonesia'; break;\n                case 'PL': country = ' Indonesia'; break;\n                case 'PM': country = ' Indonesia'; break;\n                case 'PN': country = ' Indonesia'; break;\n                case 'PO': country = ' Indonesia'; break;\n                case 'PP': country = ' Brazil'; break;\n                case 'PQ': country = ' Brazil'; break;\n                case 'PR': country = ' Brazil'; break;\n                case 'PS': country = ' Brazil'; break;\n                case 'PT': country = ' Brazil'; break;\n                case 'PU': country = ' Brazil'; break;\n                case 'PV': country = ' Brazil'; break;\n                case 'PW': country = ' Brazil'; break;\n                case 'PX': country = ' Brazil'; break;\n                case 'PY': country = ' Brazil'; break;\n                case 'PZ': country = ' Suriname'; break;\n\n                case 'S0': country = ' Western Sahara'; break;\n                case 'S2': country = ' Bangladesh'; break;\n                case 'S3': country = ' Bangladesh'; break;\n                case 'S5': country = ' Slovenia'; break;\n                case 'S6': country = ' Singapore'; break;\n                case 'S7': country = ' Seychelles'; break;\n                case 'S8': country = ' South Africa'; break;\n                case 'S9': country = ' São Tomé and Príncipe'; break;\n                case 'SA': country = ' Sweden'; break;\n                case 'SB': country = ' Sweden'; break;\n                case 'SC': country = ' Sweden'; break;\n                case 'SD': country = ' Sweden'; break;\n                case 'SE': country = ' Sweden'; break;\n                case 'SF': country = ' Sweden'; break;\n                case 'SG': country = ' Sweden'; break;\n                case 'SH': country = ' Sweden'; break;\n                case 'SI': country = ' Sweden'; break;\n                case 'SJ': country = ' Sweden'; break;\n                case 'SK': country = ' Sweden'; break;\n                case 'SL': country = ' Sweden'; break;\n                case 'SM': country = ' Sweden'; break;\n                case 'SN': country = ' Poland'; break;\n                case 'SO': country = ' Poland'; break;\n                case 'SP': country = ' Poland'; break;\n                case 'SQ': country = ' Poland'; break;\n                case 'SR': country = ' Poland'; break;\n                case 'SS': country = ' Sudan'; break;\n                case 'ST': country = ' Sudan'; break;\n                case 'SU': country = ' Egypt'; break;\n                case 'SV': country = ' Greece'; break;\n                case 'SW': country = ' Greece'; break;\n                case 'SX': country = ' Greece'; break;\n                case 'SY': country = ' Greece'; break;\n                case 'SZ': country = ' Greece'; break;\n\n                case 'T0': country = ' Principality of Seborga'; break;\n                case 'T1': country = ' Transnistria'; break;\n                case 'T2': country = ' Tuvalu'; break;\n                case 'T3': country = ' Kiribati'; break;\n                case 'T4': country = ' Cuba'; break;\n                case 'T5': country = ' Somalia'; break;\n                case 'T6': country = ' Afghanistan'; break;\n                case 'T7': country = ' San Marino'; break;\n                case 'T8': country = ' Palau'; break;\n                case 'TA': country = ' Turkey'; break;\n                case 'TB': country = ' Turkey'; break;\n                case 'TC': country = ' Turkey'; break;\n                case 'TD': country = ' Guatemala'; break;\n                case 'TE': country = ' Costa Rica'; break;\n                case 'TF': country = ' Iceland'; break;\n                case 'TG': country = ' Guatemala'; break;\n                case 'TH': country = ' France / overseas departments / territories'; break;\n                case 'TI': country = ' Costa Rica'; break;\n                case 'TJ': country = ' Cameroon'; break;\n                case 'TK': country = ' France / overseas departments / territories'; break;\n                case 'TL': country = ' Central African Republic'; break;\n                case 'TM': country = ' France / overseas departments / territories'; break;\n                case 'TN': country = ' Congo'; break;\n                case 'TO': country = ' France / overseas departments / territories'; break;\n                case 'TP': country = ' France / overseas departments / territories'; break;\n                case 'TQ': country = ' France / overseas departments / territories'; break;\n                case 'TR': country = ' Gabon'; break;\n                case 'TS': country = ' Tunisia'; break;\n                case 'TT': country = ' Chad'; break;\n                case 'TU': country = ' Ivory Coast'; break;\n                case 'TV': country = ' France / overseas departments / territories'; break;\n                case 'TW': country = ' France / overseas departments / territories'; break;\n                case 'TX': country = ' France / overseas departments / territories'; break;\n                case 'TY': country = ' Benin'; break;\n                case 'TZ': country = ' Mali'; break;\n\n                case 'UA': country = ' Russia'; break;\n                case 'UB': country = ' Russia'; break;\n                case 'UC': country = ' Russia'; break;\n                case 'UD': country = ' Russia'; break;\n                case 'UE': country = ' Russia'; break;\n                case 'UF': country = ' Russia'; break;\n                case 'UG': country = ' Russia'; break;\n                case 'UH': country = ' Russia'; break;\n                case 'UI': country = ' Russia'; break;\n                case 'UJ': country = ' Uzbekistan'; break;\n                case 'UK': country = ' Uzbekistan'; break;\n                case 'UL': country = ' Uzbekistan'; break;\n                case 'UM': country = ' Uzbekistan'; break;\n                case 'UN': country = ' Kazakhstan'; break;\n                case 'UO': country = ' Kazakhstan'; break;\n                case 'UP': country = ' Kazakhstan'; break;\n                case 'UQ': country = ' Kazakhstan'; break;\n                case 'UR': country = ' Ukraine'; break;\n                case 'US': country = ' Ukraine'; break;\n                case 'UT': country = ' Ukraine'; break;\n                case 'UU': country = ' Ukraine'; break;\n                case 'UV': country = ' Ukraine'; break;\n                case 'UW': country = ' Ukraine'; break;\n                case 'UX': country = ' Ukraine'; break;\n                case 'UY': country = ' Ukraine'; break;\n                case 'UZ': country = ' Ukraine'; break;\n\n                case 'V2': country = ' Antigua and Barbuda'; break;\n                case 'V3': country = ' Belize'; break;\n                case 'V4': country = 'Saint Kitts and Nevis'; break;\n                case 'V5': country = ' Namibia'; break;\n                case 'V6': country = ' Federated States of Micronesia'; break;\n                case 'V7': country = ' Marshall Islands'; break;\n                case 'V8': country = ' Brunei'; break;\n                case 'VA': country = ' Canada'; break;\n                case 'VB': country = ' Canada'; break;\n                case 'VC': country = ' Canada'; break;\n                case 'VD': country = ' Canada'; break;\n                case 'VE': country = ' Canada'; break;\n                case 'VF': country = ' Canada'; break;\n                case 'VG': country = ' Canada'; break;\n                case 'VH': country = ' Australia'; break;\n                case 'VI': country = ' Australia'; break;\n                case 'VJ': country = ' Australia'; break;\n                case 'VK': country = ' Australia'; break;\n                case 'VL': country = ' Australia'; break;\n                case 'VM': country = ' Australia'; break;\n                case 'VN': country = ' Australia'; break;\n                case 'VO': country = ' Canada (Newfoundland)'; break;\n                case 'VP': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'VQ': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'VR': country = ' Hong Kong'; break;\n                case 'VS': country = ' United Kingdom'; break;\n                case 'VT': country = ' India'; break;\n                case 'VU': country = ' India'; break;\n                case 'VV': country = ' India'; break;\n                case 'VW': country = ' India'; break;\n                case 'VX': country = ' Canada'; break;\n                case 'VY': country = ' Canada'; break;\n                case 'VZ': country = ' Australia'; break;\n\n                case 'XA': country = ' Mexico'; break;\n                case 'XB': country = ' Mexico'; break;\n                case 'XC': country = ' Mexico'; break;\n                case 'XD': country = ' Mexico'; break;\n                case 'XE': country = ' Mexico'; break;\n                case 'XF': country = ' Mexico'; break;\n                case 'XG': country = ' Mexico'; break;\n                case 'XH': country = ' Mexico'; break;\n                case 'XI': country = ' Mexico'; break;\n                case 'XJ': country = ' Canada'; break;\n                case 'XK': country = ' Canada'; break;\n                case 'XL': country = ' Canada'; break;\n                case 'XM': country = ' Canada'; break;\n                case 'XN': country = ' Canada'; break;\n                case 'XO': country = ' Canada'; break;\n                case 'XP': country = ' Denmark'; break;\n                case 'XQ': country = ' Chile'; break;\n                case 'XR': country = ' Chile'; break;\n                case 'XS': country = ' Peoples Republic of China'; break;\n                case 'XT': country = ' Burkina Faso'; break;\n                case 'XU': country = ' Cambodia'; break;\n                case 'XV': country = ' Vietnam'; break;\n                case 'XW': country = ' Laos'; break;\n                case 'XX': country = ' Macao'; break;\n                case 'XY': country = ' Burma'; break;\n                case 'XZ': country = ' Burma'; break;\n\n                case 'Y2': country = ' Germany'; break;\n                case 'Y3': country = ' Germany'; break;\n                case 'Y4': country = ' Germany'; break;\n                case 'Y5': country = ' Germany'; break;\n                case 'Y6': country = ' Germany'; break;\n                case 'Y7': country = ' Germany'; break;\n                case 'Y8': country = ' Germany'; break;\n                case 'Y9': country = ' Germany'; break;\n                case 'YA': country = ' Afghanistan'; break;\n                case 'YB': country = ' Indonesia'; break;\n                case 'YC': country = ' Indonesia'; break;\n                case 'YD': country = ' Indonesia'; break;\n                case 'YE': country = ' Indonesia'; break;\n                case 'YF': country = ' Indonesia'; break;\n                case 'YG': country = ' Indonesia'; break;\n                case 'YH': country = ' Indonesia'; break;\n                case 'YI': country = ' Iraq'; break;\n                case 'YJ': country = ' Vanuatu'; break;\n                case 'YK': country = ' Syria'; break;\n                case 'YL': country = ' Latvia'; break;\n                case 'YM': country = ' Turkey'; break;\n                case 'YN': country = ' Nicaragua'; break;\n                case 'YO': country = ' Romania'; break;\n                case 'YP': country = ' Romania'; break;\n                case 'YQ': country = ' Romania'; break;\n                case 'YR': country = ' Romania'; break;\n                case 'YS': country = ' El Salvador'; break;\n                case 'YT': country = ' Serbia'; break;\n                case 'YU': country = ' Serbia'; break;\n                case 'YV': country = ' Venezuela'; break;\n                case 'YW': country = ' Venezuela'; break;\n                case 'YX': country = ' Venezuela'; break;\n                case 'YY': country = ' Venezuela'; break;\n\n                case 'Z2': country = ' Zimbabwe'; break;\n                case 'Z3': country = ' Republic of Macedonia'; break;\n                case 'Z6': country = ' Kosovo'; break;\n                case 'Z8': country = ' South Sudan'; break;\n                case 'ZA': country = ' Albania'; break;\n                case 'ZB': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZC': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZD': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZE': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZF': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZG': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZH': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZI': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZJ': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZK': country = ' New Zealand'; break;\n                case 'ZL': country = ' New Zealand'; break;\n                case 'ZM': country = ' New Zealand'; break;\n                case 'ZN': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZO': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZP': country = ' Paraguay'; break;\n                case 'ZQ': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZR': country = ' South Africa'; break;\n                case 'ZS': country = ' South Africa'; break;\n                case 'ZT': country = ' South Africa'; break;\n                case 'ZU': country = ' South Africa'; break;\n                case 'ZV': country = ' Brazil'; break;\n                case 'ZW': country = ' Brazil'; break;\n                case 'ZX': country = ' Brazil'; break;\n                case 'ZY': country = ' Brazil'; break;\n                case 'ZZ': country = ' Brazil'; break;\n            }\n        }\n\n        if (country === null){\n    \n            count = 1;\n            find_this = target_callsign.substring(0,count);\n    \n            switch (find_this){\n\n                case '2': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'B': country = ' Peoples Republic of China'; break;\n                case 'F': country = ' France / overseas departments / territories'; break;\n                case 'G': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'I': country = ' Italy'; break;\n                case 'K': country = ' United States'; break;\n                case 'M': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'N': country = ' United States'; break;\n                case 'R': country = ' Russia'; break;\n                case 'W': country = ' United States'; break;\n            }\n        }\n\n\n        if (country !== null) { msg.target_country = country.trim(); } else { msg.target_country = null; }\n\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 540,
        "wires": [
            [
                "d18eaa76.7c5a98"
            ]
        ]
    },
    {
        "id": "2c5088ad.b39aa",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "End Timer",
        "func": "\nmsg.payload = '[ ' + msg.template_message_type + ' ] ';\n\nif (msg.template_message_type === 'calling_cq'){\n\n        msg.payload += msg.origin_callsign +' -> ';\n            msg.payload += '[ ' + msg.origin_country + '] ';\n            if (msg.origin_gridsquare){\n                \n                            msg.payload += '[ ' + msg.origin_gridsquare + ' ] [ ' + msg.origin_distance_miles_named +  '] [ ' + msg.origin_bearing + '° ] [ ' +  msg.origin_bearing_name + ' ]';\n            } else {\n                    \n                            msg.payload += '[ No Grid Given - Unable To Find Bearing ]';\n            }\n}\n\nif (msg.template_message_type === 'in_qso'){\n\n        msg.payload += msg.origin_callsign +' -> ' + msg.target_callsign;\n        msg.payload += '[ ' + msg.origin_country + ' -> ' + msg.target_country + ' ]';\n}\n\nif (msg.template_message_type === 'calling_station'){\n\n        msg.payload += msg.origin_callsign +' -> ' + msg.target_callsign;\n            msg.payload += '[ ' + msg.origin_country + '] -> [ ' + msg.target_country + ' ] [ ' + msg.origin_gridsquare;\n            msg.payload += '] [ ' + msg.origin_distance_miles_named +  '] [ ' + msg.origin_bearing + '° ] [ '  +  msg.origin_bearing_name + ' ]';\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 900,
        "wires": [
            [
                "a32f7eb.dee7a"
            ]
        ]
    },
    {
        "id": "a32f7eb.dee7a",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 940,
        "wires": []
    },
    {
        "id": "ae7be92f.6366c8",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 580,
        "wires": []
    },
    {
        "id": "c559f3cc.e2fa08",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Target Call Country Name",
        "func": "// Based on msg.dx_call\n// Results will be either msg.origin_country = <Country Name> or <null>\n\n\nif (msg.dx_call && msg.dx_call !== 'Unknown'){\n\n            target_callsign = msg.dx_call;\n            country = null;\n\n        if (country === null){\n            \n            count = 4;\n            find_this = target_callsign.substring(0,count);\n\n            switch (find_this){\n                case 'HB3Y': country = ' Liechtenstein'; break;\n            }\n        }\n\n        if (country === null){\n\n            count = 3;\n            find_this = target_callsign.substring(0,count);\n        \n            switch (find_this){\n\n                case '3DA': country = ' Swaziland'; break;\n                case '3DB': country = ' Swaziland'; break;\n                case '3DC': country = ' Swaziland'; break;\n                case '3DD': country = ' Swaziland'; break;\n                case '3DE': country = ' Swaziland'; break;\n                case '3DF': country = ' Swaziland'; break;\n                case '3DG': country = ' Swaziland'; break;\n                case '3DH': country = ' Swaziland'; break;\n                case '3DI': country = ' Swaziland'; break;\n                case '3DJ': country = ' Swaziland'; break;\n                case '3DK': country = ' Swaziland'; break;\n                case '3DL': country = ' Swaziland'; break;\n                case '3DM': country = ' Swaziland'; break;\n                case '3DN': country = ' Fiji'; break;\n                case '3DO': country = ' Fiji'; break;\n                case '3DP': country = ' Fiji'; break;\n                case '3DQ': country = ' Fiji'; break;\n                case '3DR': country = ' Fiji'; break;\n                case '3DS': country = ' Fiji'; break;\n                case '3DT': country = ' Fiji'; break;\n                case '3DU': country = ' Fiji'; break;\n                case '3DV': country = ' Fiji'; break;\n                case '3DW': country = ' Fiji'; break;\n                case '3DX': country = ' Fiji'; break;\n                case '3DY': country = ' Fiji'; break;\n                case '3DZ': country = ' Fiji'; break;\n                case '9M0': country = ' Spratly Islands'; break;\n                case 'BV9': country = ' Spratly Islands'; break;\n                case 'DX0': country = ' Spratly Islands'; break;\n                case 'HB0': country = ' Liechtenstein'; break;\n                case 'HBL': country = ' Liechtenstein'; break;\n                case 'RA6': country = ' Chechnya'; break;\n                case 'SSA': country = ' Egypt'; break;\n                case 'SSB': country = ' Egypt'; break;\n                case 'SSC': country = ' Egypt'; break;\n                case 'SSD': country = ' Egypt'; break;\n                case 'SSE': country = ' Egypt'; break;\n                case 'SSF': country = ' Egypt'; break;\n                case 'SSG': country = ' Egypt'; break;\n                case 'SSH': country = ' Egypt'; break;\n                case 'SSI': country = ' Egypt'; break;\n                case 'SSJ': country = ' Egypt'; break;\n                case 'SSK': country = ' Egypt'; break;\n                case 'SSL': country = ' Egypt'; break;\n                case 'SSM': country = ' Egypt'; break;\n            }\n        }\n\n        if (country === null){\n\n            count = 2;\n            find_this = target_callsign.substring(0,count);\n    \n            switch (find_this){\n\n                case '0S': country = 'Principality of Seborga'; break;\n                case '1A': country = 'Sovereign Military Order of Malta'; break;\n                case '1B': country = 'Northern Cyprus or Blenheim Reef'; break;\n                case '1G': country = 'Geyser Reef'; break;\n                case '1L': country = 'Liberland'; break;\n                case '1M': country = 'Minerva Reefs'; break;\n                case '1S': country = 'Principality of Sealand'; break;\n                case '1Z': country = 'Kayin State'; break;\n                case '3A': country = 'Monaco'; break;\n                case '3B': country = 'Mauritius'; break;\n                case '3C': country = 'Equatorial Guinea'; break;\n                case '3E': country = 'Panama'; break;\n                case '3F': country = 'Panama'; break;\n                case '3G': country = 'Chile'; break;\n                case '3H': country = 'Peoples Republic of China'; break;\n                case '3I': country = 'Peoples Republic of China'; break;\n                case '3J': country = 'Peoples Republic of China'; break;\n                case '3K': country = 'Peoples Republic of China'; break;\n                case '3L': country = 'Peoples Republic of China'; break;\n                case '3M': country = 'Peoples Republic of China'; break;\n                case '3N': country = 'Peoples Republic of China'; break;\n                case '3O': country = 'Peoples Republic of China'; break;\n                case '3P': country = 'Peoples Republic of China'; break;\n                case '3Q': country = 'Peoples Republic of China'; break;\n                case '3R': country = 'Peoples Republic of China'; break;\n                case '3S': country = 'Peoples Republic of China'; break;\n                case '3T': country = 'Peoples Republic of China'; break;\n                case '3U': country = 'Peoples Republic of China'; break;\n                case '3V': country = 'Tunisia'; break;\n                case '3W': country = 'Vietnam'; break;\n                case '3X': country = 'Guinea'; break;\n                case '3Y': country = 'Norway'; break;\n                case '3Z': country = 'Poland'; break;\n                case '4A': country = 'Mexico'; break;\n                case '4B': country = 'Mexico'; break;\n                case '4C': country = 'Mexico'; break;\n                case '4D': country = 'Philippines'; break;\n                case '4E': country = 'Philippines'; break;\n                case '4F': country = 'Philippines'; break;\n                case '4G': country = 'Philippines'; break;\n                case '4H': country = 'Philippines'; break;\n                case '4I': country = 'Philippines'; break;\n                case '4J': country = 'Azerbaijan'; break;\n                case '4K': country = 'Azerbaijan'; break;\n                case '4L': country = 'Georgia'; break;\n                case '4M': country = 'Venezuela'; break;\n                case '4O': country = 'Montenegro'; break;\n                case '4P': country = 'Sri Lanka'; break;\n                case '4Q': country = 'Sri Lanka'; break;\n                case '4R': country = 'Sri Lanka'; break;\n                case '4S': country = 'Sri Lanka'; break;\n                case '4T': country = 'Peru'; break;\n                case '4U': country = 'United Nations (non-geographical)'; break;\n                case '4V': country = 'Haiti'; break;\n                case '4W': country = 'East Timor'; break;\n                case '4X': country = 'Israel'; break;\n                case '4Y': country = 'International Civil Aviation Organization (non-geographical)'; break;\n                case '4Z': country = 'Israel'; break;\n                case '5A': country = 'Libya'; break;\n                case '5B': country = 'Cyprus'; break;\n                case '5C': country = 'Morocco'; break;\n                case '5D': country = 'Morocco'; break;\n                case '5E': country = 'Morocco'; break;\n                case '5F': country = 'Morocco'; break;\n                case '5G': country = 'Morocco'; break;\n                case '5H': country = 'Tanzania'; break;\n                case '5I': country = 'Tanzania'; break;\n                case '5J': country = 'Colombia'; break;\n                case '5K': country = 'Colombia'; break;\n                case '5L': country = 'Liberia'; break;\n                case '5M': country = 'Liberia'; break;\n                case '5N': country = 'Nigeria'; break;\n                case '5O': country = 'Nigeria'; break;\n                case '5P': country = 'Denmark'; break;\n                case '5Q': country = 'Denmark'; break;\n                case '5R': country = 'Madagascar'; break;\n                case '5S': country = 'Madagascar'; break;\n                case '5T': country = 'Mauritania'; break;\n                case '5U': country = 'Niger'; break;\n                case '5V': country = 'Togo'; break;\n                case '5W': country = 'Western Samoa'; break;\n                case '5X': country = 'Uganda'; break;\n                case '5Y': country = 'Kenya'; break;\n                case '5Z': country = 'Kenya'; break;\n                case '6A': country = 'Egypt'; break;\n                case '6B': country = 'Egypt'; break;\n                case '6C': country = 'Syria'; break;\n                case '6D': country = 'Mexico'; break;\n                case '6E': country = 'Mexico'; break;\n                case '6F': country = 'Mexico'; break;\n                case '6G': country = 'Mexico'; break;\n                case '6H': country = 'Mexico'; break;\n                case '6I': country = 'Mexico'; break;\n                case '6J': country = 'Mexico'; break;\n                case '6K': country = 'South Korea'; break;\n                case '6L': country = 'South Korea'; break;\n                case '6M': country = 'South Korea'; break;\n                case '6N': country = 'South Korea'; break;\n                case '6O': country = 'Somalia'; break;\n                case '6P': country = 'Pakistan'; break;\n                case '6Q': country = 'Pakistan'; break;\n                case '6R': country = 'Pakistan'; break;\n                case '6S': country = 'Pakistan'; break;\n                case '6T': country = 'Sudan'; break;\n                case '6U': country = 'Sudan'; break;\n                case '6V': country = 'Senegal'; break;\n                case '6W': country = 'Senegal'; break;\n                case '6X': country = 'Madagascar'; break;\n                case '6Y': country = 'Jamaica'; break;\n                case '6Z': country = 'Liberia'; break;\n                case '7A': country = 'Indonesia'; break;\n                case '7B': country = 'Indonesia'; break;\n                case '7C': country = 'Indonesia'; break;\n                case '7D': country = 'Indonesia'; break;\n                case '7E': country = 'Indonesia'; break;\n                case '7F': country = 'Indonesia'; break;\n                case '7G': country = 'Indonesia'; break;\n                case '7H': country = 'Indonesia'; break;\n                case '7I': country = 'Indonesia'; break;\n                case '7J': country = 'Japan'; break;\n                case '7K': country = 'Japan'; break;\n                case '7L': country = 'Japan'; break;\n                case '7M': country = 'Japan'; break;\n                case '7N': country = 'Japan'; break;\n                case '7O': country = 'Yemen'; break;\n                case '7P': country = 'Lesotho'; break;\n                case '7Q': country = 'Malawi'; break;\n                case '7R': country = 'Algeria'; break;\n                case '7S': country = 'Sweden'; break;\n                case '7T': country = 'Algeria'; break;\n                case '7U': country = 'Algeria'; break;\n                case '7V': country = 'Algeria'; break;\n                case '7W': country = 'Algeria'; break;\n                case '7X': country = 'Algeria'; break;\n                case '7Y': country = 'Algeria'; break;\n                case '7Z': country = 'Saudi Arabia'; break;\n                case '8A': country = 'Indonesia'; break;\n                case '8B': country = 'Indonesia'; break;\n                case '8C': country = 'Indonesia'; break;\n                case '8D': country = 'Indonesia'; break;\n                case '8E': country = 'Indonesia'; break;\n                case '8F': country = 'Indonesia'; break;\n                case '8G': country = 'Indonesia'; break;\n                case '8H': country = 'Indonesia'; break;\n                case '8I': country = 'Indonesia'; break;\n                case '8J': country = 'Japan'; break;\n                case '8K': country = 'Japan'; break;\n                case '8L': country = 'Japan'; break;\n                case '8M': country = 'Japan'; break;\n                case '8N': country = 'Japan'; break;\n                case '8O': country = 'Botswana'; break;\n                case '8P': country = 'Barbados'; break;\n                case '8Q': country = 'Maldives'; break;\n                case '8R': country = 'Guyana'; break;\n                case '8S': country = 'Sweden'; break;\n                case '8T': country = 'India'; break;\n                case '8U': country = 'India'; break;\n                case '8V': country = 'India'; break;\n                case '8W': country = 'India'; break;\n                case '8X': country = 'India'; break;\n                case '8Y': country = 'India'; break;\n                case '8Z': country = ' Saudi Arabia'; break;\n                case '9A': country = ' Croatia'; break;\n                case '9B': country = ' Iran'; break;\n                case '9C': country = ' Iran'; break;\n                case '9D': country = ' Iran'; break;\n                case '9E': country = ' Ethiopia'; break;\n                case '9F': country = ' Ethiopia'; break;\n                case '9G': country = ' Ghana'; break;\n                case '9H': country = ' Malta'; break;\n                case '9I': country = ' Zambia'; break;\n                case '9J': country = ' Zambia'; break;\n                case '9K': country = ' Kuwait'; break;\n                case '9L': country = ' Sierra Leone'; break;\n                case '9M': country = ' Malaysia'; break;\n                case '9N': country = ' Nepal'; break;\n                case '9O': country = ' Democratic Republic of the Congo'; break;\n                case '9P': country = ' Democratic Republic of the Congo'; break;\n                case '9Q': country = ' Democratic Republic of the Congo'; break;\n                case '9R': country = ' Democratic Republic of the Congo'; break;\n                case '9S': country = ' Democratic Republic of the Congo'; break;\n                case '9T': country = ' Democratic Republic of the Congo'; break;\n                case '9U': country = ' Burundi'; break;\n                case '9V': country = ' Singapore'; break;\n                case '9W': country = ' Malaysia'; break;\n                case '9X': country = ' Rwanda'; break;\n                case '9Y': country = ' Trinidad and Tobago'; break;\n                case '9Z': country = ' Trinidad and Tobago'; break;\n    \n                case 'A2': country = ' Botswana'; break;\n                case 'A3': country = ' Tonga'; break;\n                case 'A4': country = ' Oman'; break;\n                case 'A5': country = ' Bhutan'; break;\n                case 'A6': country = ' United Arab Emirates'; break;\n                case 'A7': country = ' Qatar'; break;\n                case 'A8': country = ' Liberia'; break;\n                case 'A9': country = ' Bahrain'; break;\n                case 'AA': country = ' United States'; break;\n                case 'AB': country = ' United States'; break;\n                case 'AC': country = ' United States'; break;\n                case 'AD': country = ' United States'; break;\n                case 'AE': country = ' United States'; break;\n                case 'AF': country = ' United States'; break;\n                case 'AG': country = ' United States'; break;\n                case 'AH': country = ' United States'; break;\n                case 'AI': country = ' United States'; break;\n                case 'AJ': country = ' United States'; break;\n                case 'AK': country = ' United States'; break;\n                case 'AL': country = ' United States'; break;\n                case 'AM': country = ' Spain'; break;\n                case 'AN': country = ' Spain'; break;\n                case 'AO': country = ' Spain'; break;\n                case 'AP': country = ' Pakistan'; break;\n                case 'AQ': country = ' Pakistan'; break;\n                case 'AR': country = ' Pakistan'; break;\n                case 'AS': country = ' Pakistan'; break;\n                case 'AT': country = ' India'; break;\n                case 'AU': country = ' India'; break;\n                case 'AV': country = ' India'; break;\n                case 'AW': country = ' India'; break;\n                case 'AX': country = ' Australia'; break;\n                case 'AY': country = ' Argentina'; break;\n                case 'AZ': country = ' Argentina'; break;\n    \n                case 'BM': country = ' Taiwan'; break;\n                case 'BN': country = ' Taiwan'; break;\n                case 'BO': country = ' Taiwan'; break;\n                case 'BP': country = ' Taiwan'; break;\n                case 'BQ': country = ' Taiwan'; break;\n                case 'BU': country = ' Taiwan'; break;\n                case 'BV': country = ' Taiwan'; break;\n                case 'BW': country = ' Taiwan'; break;\n                case 'BX': country = ' Taiwan'; break;\n    \n                case 'C2': country = ' Nauru'; break;\n                case 'C3': country = ' Andorra'; break;\n                case 'C4': country = ' Cyprus'; break;\n                case 'C5': country = ' The Gambia'; break;\n                case 'C6': country = ' Bahamas'; break;\n                case 'C7': country = ' World Meteorological Organization (non-geographical)'; break;\n                case 'C8': country = ' Mozambique'; break;\n                case 'C9': country = ' Mozambique'; break;\n                case 'CA': country = ' Chile'; break;\n                case 'CB': country = ' Chile'; break;\n                case 'CC': country = ' Chile'; break;\n                case 'CD': country = ' Chile'; break;\n                case 'CE': country = ' Chile'; break;\n                case 'CF': country = ' Canada'; break;\n                case 'CG': country = ' Canada'; break;\n                case 'CH': country = ' Canada'; break;\n                case 'CI': country = ' Canada'; break;\n                case 'CJ': country = ' Canada'; break;\n                case 'CK': country = ' Canada'; break;\n                case 'CL': country = ' Cuba'; break;\n                case 'CM': country = ' Cuba'; break;\n                case 'CN': country = ' Morocco'; break;\n                case 'CO': country = ' Cuba'; break;\n                case 'CP': country = ' Bolivia'; break;\n                case 'CQ': country = ' Portugal'; break;\n                case 'CR': country = ' Portugal'; break;\n                case 'CS': country = ' Portugal'; break;\n                case 'CT': country = ' Portugal'; break;\n                case 'CU': country = ' Portugal'; break;\n                case 'CV': country = ' Uruguay'; break;\n                case 'CW': country = ' Uruguay'; break;\n                case 'CX': country = ' Uruguay'; break;\n                case 'CY': country = ' Canada'; break;\n                case 'CZ': country = ' Canada'; break;\n            \n                case 'D0': country = ' Donetsk'; break;\n                case 'D1': country = ' Donetsk'; break;\n                case 'D2': country = ' Angola'; break;\n                case 'D3': country = ' Angola'; break;\n                case 'D4': country = ' Cape Verde'; break;\n                case 'D5': country = ' Liberia'; break;\n                case 'D6': country = ' Comoros'; break;\n                case 'D7': country = ' South Korea'; break;\n                case 'D8': country = ' South Korea'; break;\n                case 'D9': country = ' South Korea'; break;\n                case 'DA': country = ' Germany'; break;\n                case 'DB': country = ' Germany'; break;\n                case 'DC': country = ' Germany'; break;\n                case 'DD': country = ' Germany'; break;\n                case 'DE': country = ' Germany'; break;\n                case 'DF': country = ' Germany'; break;\n                case 'DG': country = ' Germany'; break;\n                case 'DH': country = ' Germany'; break;\n                case 'DI': country = ' Germany'; break;\n                case 'DJ': country = ' Germany'; break;\n                case 'DK': country = ' Germany'; break;\n                case 'DL': country = ' Germany'; break;\n                case 'DM': country = ' Germany'; break;\n                case 'DN': country = ' Germany'; break;\n                case 'DO': country = ' Germany'; break;\n                case 'DP': country = ' Germany'; break;\n                case 'DQ': country = ' Germany'; break;\n                case 'DR': country = ' Germany'; break;\n                case 'DS': country = ' South Korea'; break;\n                case 'DT': country = ' South Korea'; break;\n                case 'DU': country = ' Philippines'; break;\n                case 'DV': country = ' Philippines'; break;\n                case 'DW': country = ' Philippines'; break;\n                case 'DX': country = ' Philippines'; break;\n                case 'DY': country = ' Philippines'; break;\n                case 'DZ': country = 'Philippines'; break;\n    \n                case 'E2': country = ' Thailand'; break;\n                case 'E3': country = ' Eritrea'; break;\n                case 'E4': country = ' Palestine'; break;\n                case 'E5': country = ' Cook Islands'; break;\n                case 'E6': country = ' Niue'; break;\n                case 'E7': country = ' Bosnia and Herzegovina'; break;\n                case 'EA': country = ' Spain'; break;\n                case 'EB': country = ' Spain'; break;\n                case 'EC': country = ' Spain'; break;\n                case 'ED': country = ' Spain'; break;\n                case 'EE': country = ' Spain'; break;\n                case 'EF': country = ' Spain'; break;\n                case 'EG': country = ' Spain'; break;\n                case 'EH': country = ' Spain'; break;\n                case 'EI': country = ' Ireland'; break;\n                case 'EJ': country = ' Ireland'; break;\n                case 'EK': country = ' Armenia'; break;\n                case 'EL': country = ' Liberia'; break;\n                case 'EM': country = ' Ukraine'; break;\n                case 'EN': country = ' Ukraine'; break;\n                case 'EO': country = ' Ukraine'; break;\n                case 'EP': country = ' Iran'; break;\n                case 'EQ': country = ' Iran'; break;\n                case 'ER': country = ' Moldova'; break;\n                case 'ES': country = ' Estonia'; break;\n                case 'ET': country = ' Ethiopia'; break;\n                case 'EU': country = ' Belarus'; break;\n                case 'EV': country = ' Belarus'; break;\n                case 'EW': country = ' Belarus'; break;\n                case 'EX': country = ' Kyrgyzstan'; break;\n                case 'EY': country = ' Tajikistan'; break;\n                case 'EZ': country = ' Turkmenistan'; break;\n    \n                case 'H2': country = ' Cyprus'; break;\n                case 'H3': country = ' Panama'; break;\n                case 'H4': country = ' Solomon Islands'; break;\n                case 'H5': country = ' Bophuthatswana'; break;\n                case 'H6': country = ' Nicaragua'; break;\n                case 'H7': country = ' Nicaragua'; break;\n                case 'H8': country = ' Panama'; break;\n                case 'H9': country = ' Panama'; break;\n                case 'HA': country = ' Hungary'; break;\n                case 'HB': country = ' Switzerland'; break;\n                case 'HC': country = ' Ecuador'; break;\n                case 'HD': country = ' Ecuador'; break;\n                case 'HE': country = ' Switzerland'; break;\n                case 'HF': country = ' Poland'; break;\n                case 'HG': country = ' Hungary'; break;\n                case 'HH': country = ' Haiti'; break;\n                case 'HI': country = ' Dominican Republic'; break;\n                case 'HJ': country = ' Colombia'; break;\n                case 'HK': country = ' Colombia'; break;\n                case 'HL': country = ' South Korea'; break;\n                case 'HM': country = ' North Korea'; break;\n                case 'HN': country = ' Iraq'; break;\n                case 'HO': country = ' Panama'; break;\n                case 'HP': country = ' Panama'; break;\n                case 'HQ': country = ' Honduras'; break;\n                case 'HR': country = ' Honduras'; break;\n                case 'HS': country = ' Thailand'; break;\n                case 'HT': country = ' Nicaragua'; break;\n                case 'HU': country = ' El Salvador'; break;\n                case 'HV': country = ' Vatican City'; break;\n                case 'HW': country = ' France / overseas departments / territories'; break;\n                case 'HX': country = ' France / overseas departments / territories'; break;\n                case 'HY': country = ' France / overseas departments / territories'; break;\n                case 'HZ': country = ' Saudi Arabia'; break;\n    \n                case 'J2': country = ' Djibouti'; break;\n                case 'J3': country = ' Grenada'; break;\n                case 'J4': country = ' Greece'; break;\n                case 'J5': country = ' Guinea-Bissau'; break;\n                case 'J6': country = ' Saint Lucia'; break;\n                case 'J7': country = ' Dominica'; break;\n                case 'J8': country = ' Saint Vincent and the Grenadines'; break;\n                case 'JA': country = ' Japan'; break;\n                case 'JB': country = ' Japan'; break;\n                case 'JC': country = ' Japan'; break;\n                case 'JD': country = ' Japan'; break;\n                case 'JE': country = ' Japan'; break;\n                case 'JF': country = ' Japan'; break;\n                case 'JG': country = ' Japan'; break;\n                case 'JH': country = ' Japan'; break;\n                case 'JI': country = ' Japan'; break;\n                case 'JJ': country = ' Japan'; break;\n                case 'JK': country = ' Japan'; break;\n                case 'JL': country = ' Japan'; break;\n                case 'JM': country = ' Japan'; break;\n                case 'JN': country = ' Japan'; break;\n                case 'JO': country = ' Japan'; break;\n                case 'JP': country = ' Japan'; break;\n                case 'JQ': country = ' Japan'; break;\n                case 'JR': country = ' Japan'; break;\n                case 'JS': country = ' Japan'; break;\n                case 'JT': country = ' Mongolia'; break;\n                case 'JU': country = ' Mongolia'; break;\n                case 'JV': country = ' Mongolia'; break;\n                case 'JW': country = ' Norway'; break;\n                case 'JX': country = ' Norway'; break;\n                case 'JY': country = ' Jordan'; break;\n                case 'JZ': country = ' Indonesia'; break;\n\n                case 'L2': country = ' Argentina'; break;\n                case 'L3': country = ' Argentina'; break;\n                case 'L4': country = ' Argentina'; break;\n                case 'L5': country = ' Argentina'; break;\n                case 'L6': country = ' Argentina'; break;\n                case 'L7': country = ' Argentina'; break;\n                case 'L8': country = ' Argentina'; break;\n                case 'L9': country = ' Argentina'; break;\n                case 'LA': country = ' Norway'; break;\n                case 'LB': country = ' Norway'; break;\n                case 'LC': country = ' Norway'; break;\n                case 'LD': country = ' Norway'; break;\n                case 'LE': country = ' Norway'; break;\n                case 'LF': country = ' Norway'; break;\n                case 'LG': country = ' Norway'; break;\n                case 'LH': country = ' Norway'; break;\n                case 'LI': country = ' Norway'; break;\n                case 'LJ': country = ' Norway'; break;\n                case 'LK': country = ' Norway'; break;\n                case 'LL': country = ' Norway'; break;\n                case 'LM': country = ' Norway'; break;\n                case 'LN': country = ' Norway'; break;\n                case 'LO': country = ' Argentina'; break;\n                case 'LP': country = ' Argentina'; break;\n                case 'LQ': country = ' Argentina'; break;\n                case 'LR': country = ' Argentina'; break;\n                case 'LS': country = ' Argentina'; break;\n                case 'LT': country = ' Argentina'; break;\n                case 'LU': country = ' Argentina'; break;\n                case 'LV': country = ' Argentina'; break;\n                case 'LW': country = ' Argentina'; break;\n                case 'LX': country = ' Luxembourg'; break;\n                case 'LY': country = ' Lithuania'; break;\n                case 'LZ': country = ' Bulgaria'; break;\n\n                case 'O1': country = ' South Ossetia'; break;\n                case 'OA': country = ' Peru'; break;\n                case 'OB': country = ' Peru'; break;\n                case 'OC': country = ' Peru'; break;\n                case 'OD': country = ' Lebanon'; break;\n                case 'OE': country = ' Austria'; break;\n                case 'OF': country = ' Finland'; break;\n                case 'OG': country = ' Finland'; break;\n                case 'OH': country = ' Finland'; break;\n                case 'OI': country = ' Finland'; break;\n                case 'OJ': country = ' Finland'; break;\n                case 'OK': country = ' Czech Republic'; break;\n                case 'OL': country = ' Czech Republic'; break;\n                case 'OM': country = ' Slovakia'; break;\n                case 'ON': country = ' Belgium'; break;\n                case 'OO': country = ' Belgium'; break;\n                case 'OP': country = ' Belgium'; break;\n                case 'OQ': country = ' Belgium'; break;\n                case 'OR': country = ' Belgium'; break;\n                case 'OS': country = ' Belgium'; break;\n                case 'OT': country = ' Belgium'; break;\n                case 'OU': country = ' Denmark'; break;\n                case 'OV': country = ' Denmark'; break;\n                case 'OW': country = ' Denmark'; break;\n                case 'OX': country = ' Denmark'; break;\n                case 'OY': country = ' Denmark'; break;\n                case 'OZ': country = ' Denmark'; break;\n\n                case 'P2': country = ' Papua New Guinea'; break;\n                case 'P3': country = ' Cyprus'; break;\n                case 'P4': country = ' Aruba'; break;\n                case 'P5': country = ' North Korea'; break;\n                case 'P6': country = ' North Korea'; break;\n                case 'P7': country = ' North Korea'; break;\n                case 'P8': country = ' North Korea'; break;\n                case 'P9': country = ' North Korea'; break;\n                case 'PA': country = ' Netherlands'; break;\n                case 'PB': country = ' Netherlands'; break;\n                case 'PC': country = ' Netherlands'; break;\n                case 'PD': country = ' Netherlands'; break;\n                case 'PE': country = ' Netherlands'; break;\n                case 'PF': country = ' Netherlands'; break;\n                case 'PG': country = ' Netherlands'; break;\n                case 'PH': country = ' Netherlands'; break;\n                case 'PI': country = ' Netherlands'; break;\n                case 'PJ': country = ' Netherlands - former Netherlands Antilles'; break;\n                case 'PK': country = ' Indonesia'; break;\n                case 'PL': country = ' Indonesia'; break;\n                case 'PM': country = ' Indonesia'; break;\n                case 'PN': country = ' Indonesia'; break;\n                case 'PO': country = ' Indonesia'; break;\n                case 'PP': country = ' Brazil'; break;\n                case 'PQ': country = ' Brazil'; break;\n                case 'PR': country = ' Brazil'; break;\n                case 'PS': country = ' Brazil'; break;\n                case 'PT': country = ' Brazil'; break;\n                case 'PU': country = ' Brazil'; break;\n                case 'PV': country = ' Brazil'; break;\n                case 'PW': country = ' Brazil'; break;\n                case 'PX': country = ' Brazil'; break;\n                case 'PY': country = ' Brazil'; break;\n                case 'PZ': country = ' Suriname'; break;\n\n                case 'S0': country = ' Western Sahara'; break;\n                case 'S2': country = ' Bangladesh'; break;\n                case 'S3': country = ' Bangladesh'; break;\n                case 'S5': country = ' Slovenia'; break;\n                case 'S6': country = ' Singapore'; break;\n                case 'S7': country = ' Seychelles'; break;\n                case 'S8': country = ' South Africa'; break;\n                case 'S9': country = ' São Tomé and Príncipe'; break;\n                case 'SA': country = ' Sweden'; break;\n                case 'SB': country = ' Sweden'; break;\n                case 'SC': country = ' Sweden'; break;\n                case 'SD': country = ' Sweden'; break;\n                case 'SE': country = ' Sweden'; break;\n                case 'SF': country = ' Sweden'; break;\n                case 'SG': country = ' Sweden'; break;\n                case 'SH': country = ' Sweden'; break;\n                case 'SI': country = ' Sweden'; break;\n                case 'SJ': country = ' Sweden'; break;\n                case 'SK': country = ' Sweden'; break;\n                case 'SL': country = ' Sweden'; break;\n                case 'SM': country = ' Sweden'; break;\n                case 'SN': country = ' Poland'; break;\n                case 'SO': country = ' Poland'; break;\n                case 'SP': country = ' Poland'; break;\n                case 'SQ': country = ' Poland'; break;\n                case 'SR': country = ' Poland'; break;\n                case 'SS': country = ' Sudan'; break;\n                case 'ST': country = ' Sudan'; break;\n                case 'SU': country = ' Egypt'; break;\n                case 'SV': country = ' Greece'; break;\n                case 'SW': country = ' Greece'; break;\n                case 'SX': country = ' Greece'; break;\n                case 'SY': country = ' Greece'; break;\n                case 'SZ': country = ' Greece'; break;\n\n                case 'T0': country = ' Principality of Seborga'; break;\n                case 'T1': country = ' Transnistria'; break;\n                case 'T2': country = ' Tuvalu'; break;\n                case 'T3': country = ' Kiribati'; break;\n                case 'T4': country = ' Cuba'; break;\n                case 'T5': country = ' Somalia'; break;\n                case 'T6': country = ' Afghanistan'; break;\n                case 'T7': country = ' San Marino'; break;\n                case 'T8': country = ' Palau'; break;\n                case 'TA': country = ' Turkey'; break;\n                case 'TB': country = ' Turkey'; break;\n                case 'TC': country = ' Turkey'; break;\n                case 'TD': country = ' Guatemala'; break;\n                case 'TE': country = ' Costa Rica'; break;\n                case 'TF': country = ' Iceland'; break;\n                case 'TG': country = ' Guatemala'; break;\n                case 'TH': country = ' France / overseas departments / territories'; break;\n                case 'TI': country = ' Costa Rica'; break;\n                case 'TJ': country = ' Cameroon'; break;\n                case 'TK': country = ' France / overseas departments / territories'; break;\n                case 'TL': country = ' Central African Republic'; break;\n                case 'TM': country = ' France / overseas departments / territories'; break;\n                case 'TN': country = ' Congo'; break;\n                case 'TO': country = ' France / overseas departments / territories'; break;\n                case 'TP': country = ' France / overseas departments / territories'; break;\n                case 'TQ': country = ' France / overseas departments / territories'; break;\n                case 'TR': country = ' Gabon'; break;\n                case 'TS': country = ' Tunisia'; break;\n                case 'TT': country = ' Chad'; break;\n                case 'TU': country = ' Ivory Coast'; break;\n                case 'TV': country = ' France / overseas departments / territories'; break;\n                case 'TW': country = ' France / overseas departments / territories'; break;\n                case 'TX': country = ' France / overseas departments / territories'; break;\n                case 'TY': country = ' Benin'; break;\n                case 'TZ': country = ' Mali'; break;\n\n                case 'UA': country = ' Russia'; break;\n                case 'UB': country = ' Russia'; break;\n                case 'UC': country = ' Russia'; break;\n                case 'UD': country = ' Russia'; break;\n                case 'UE': country = ' Russia'; break;\n                case 'UF': country = ' Russia'; break;\n                case 'UG': country = ' Russia'; break;\n                case 'UH': country = ' Russia'; break;\n                case 'UI': country = ' Russia'; break;\n                case 'UJ': country = ' Uzbekistan'; break;\n                case 'UK': country = ' Uzbekistan'; break;\n                case 'UL': country = ' Uzbekistan'; break;\n                case 'UM': country = ' Uzbekistan'; break;\n                case 'UN': country = ' Kazakhstan'; break;\n                case 'UO': country = ' Kazakhstan'; break;\n                case 'UP': country = ' Kazakhstan'; break;\n                case 'UQ': country = ' Kazakhstan'; break;\n                case 'UR': country = ' Ukraine'; break;\n                case 'US': country = ' Ukraine'; break;\n                case 'UT': country = ' Ukraine'; break;\n                case 'UU': country = ' Ukraine'; break;\n                case 'UV': country = ' Ukraine'; break;\n                case 'UW': country = ' Ukraine'; break;\n                case 'UX': country = ' Ukraine'; break;\n                case 'UY': country = ' Ukraine'; break;\n                case 'UZ': country = ' Ukraine'; break;\n\n                case 'V2': country = ' Antigua and Barbuda'; break;\n                case 'V3': country = ' Belize'; break;\n                case 'V4': country = 'Saint Kitts and Nevis'; break;\n                case 'V5': country = ' Namibia'; break;\n                case 'V6': country = ' Federated States of Micronesia'; break;\n                case 'V7': country = ' Marshall Islands'; break;\n                case 'V8': country = ' Brunei'; break;\n                case 'VA': country = ' Canada'; break;\n                case 'VB': country = ' Canada'; break;\n                case 'VC': country = ' Canada'; break;\n                case 'VD': country = ' Canada'; break;\n                case 'VE': country = ' Canada'; break;\n                case 'VF': country = ' Canada'; break;\n                case 'VG': country = ' Canada'; break;\n                case 'VH': country = ' Australia'; break;\n                case 'VI': country = ' Australia'; break;\n                case 'VJ': country = ' Australia'; break;\n                case 'VK': country = ' Australia'; break;\n                case 'VL': country = ' Australia'; break;\n                case 'VM': country = ' Australia'; break;\n                case 'VN': country = ' Australia'; break;\n                case 'VO': country = ' Canada (Newfoundland)'; break;\n                case 'VP': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'VQ': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'VR': country = ' Hong Kong'; break;\n                case 'VS': country = ' United Kingdom'; break;\n                case 'VT': country = ' India'; break;\n                case 'VU': country = ' India'; break;\n                case 'VV': country = ' India'; break;\n                case 'VW': country = ' India'; break;\n                case 'VX': country = ' Canada'; break;\n                case 'VY': country = ' Canada'; break;\n                case 'VZ': country = ' Australia'; break;\n\n                case 'XA': country = ' Mexico'; break;\n                case 'XB': country = ' Mexico'; break;\n                case 'XC': country = ' Mexico'; break;\n                case 'XD': country = ' Mexico'; break;\n                case 'XE': country = ' Mexico'; break;\n                case 'XF': country = ' Mexico'; break;\n                case 'XG': country = ' Mexico'; break;\n                case 'XH': country = ' Mexico'; break;\n                case 'XI': country = ' Mexico'; break;\n                case 'XJ': country = ' Canada'; break;\n                case 'XK': country = ' Canada'; break;\n                case 'XL': country = ' Canada'; break;\n                case 'XM': country = ' Canada'; break;\n                case 'XN': country = ' Canada'; break;\n                case 'XO': country = ' Canada'; break;\n                case 'XP': country = ' Denmark'; break;\n                case 'XQ': country = ' Chile'; break;\n                case 'XR': country = ' Chile'; break;\n                case 'XS': country = ' Peoples Republic of China'; break;\n                case 'XT': country = ' Burkina Faso'; break;\n                case 'XU': country = ' Cambodia'; break;\n                case 'XV': country = ' Vietnam'; break;\n                case 'XW': country = ' Laos'; break;\n                case 'XX': country = ' Macao'; break;\n                case 'XY': country = ' Burma'; break;\n                case 'XZ': country = ' Burma'; break;\n\n                case 'Y2': country = ' Germany'; break;\n                case 'Y3': country = ' Germany'; break;\n                case 'Y4': country = ' Germany'; break;\n                case 'Y5': country = ' Germany'; break;\n                case 'Y6': country = ' Germany'; break;\n                case 'Y7': country = ' Germany'; break;\n                case 'Y8': country = ' Germany'; break;\n                case 'Y9': country = ' Germany'; break;\n                case 'YA': country = ' Afghanistan'; break;\n                case 'YB': country = ' Indonesia'; break;\n                case 'YC': country = ' Indonesia'; break;\n                case 'YD': country = ' Indonesia'; break;\n                case 'YE': country = ' Indonesia'; break;\n                case 'YF': country = ' Indonesia'; break;\n                case 'YG': country = ' Indonesia'; break;\n                case 'YH': country = ' Indonesia'; break;\n                case 'YI': country = ' Iraq'; break;\n                case 'YJ': country = ' Vanuatu'; break;\n                case 'YK': country = ' Syria'; break;\n                case 'YL': country = ' Latvia'; break;\n                case 'YM': country = ' Turkey'; break;\n                case 'YN': country = ' Nicaragua'; break;\n                case 'YO': country = ' Romania'; break;\n                case 'YP': country = ' Romania'; break;\n                case 'YQ': country = ' Romania'; break;\n                case 'YR': country = ' Romania'; break;\n                case 'YS': country = ' El Salvador'; break;\n                case 'YT': country = ' Serbia'; break;\n                case 'YU': country = ' Serbia'; break;\n                case 'YV': country = ' Venezuela'; break;\n                case 'YW': country = ' Venezuela'; break;\n                case 'YX': country = ' Venezuela'; break;\n                case 'YY': country = ' Venezuela'; break;\n\n                case 'Z2': country = ' Zimbabwe'; break;\n                case 'Z3': country = ' Republic of Macedonia'; break;\n                case 'Z6': country = ' Kosovo'; break;\n                case 'Z8': country = ' South Sudan'; break;\n                case 'ZA': country = ' Albania'; break;\n                case 'ZB': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZC': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZD': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZE': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZF': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZG': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZH': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZI': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZJ': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZK': country = ' New Zealand'; break;\n                case 'ZL': country = ' New Zealand'; break;\n                case 'ZM': country = ' New Zealand'; break;\n                case 'ZN': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZO': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZP': country = ' Paraguay'; break;\n                case 'ZQ': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'ZR': country = ' South Africa'; break;\n                case 'ZS': country = ' South Africa'; break;\n                case 'ZT': country = ' South Africa'; break;\n                case 'ZU': country = ' South Africa'; break;\n                case 'ZV': country = ' Brazil'; break;\n                case 'ZW': country = ' Brazil'; break;\n                case 'ZX': country = ' Brazil'; break;\n                case 'ZY': country = ' Brazil'; break;\n                case 'ZZ': country = ' Brazil'; break;\n            }\n        }\n\n        if (country === null){\n    \n            count = 1;\n            find_this = target_callsign.substring(0,count);\n    \n            switch (find_this){\n\n                case '2': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'B': country = ' Peoples Republic of China'; break;\n                case 'F': country = ' France / overseas departments / territories'; break;\n                case 'G': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'I': country = ' Italy'; break;\n                case 'K': country = ' United States'; break;\n                case 'M': country = ' United Kingdom / overseas territories / dependencies'; break;\n                case 'N': country = ' United States'; break;\n                case 'R': country = ' Russia'; break;\n                case 'W': country = ' United States'; break;\n            }\n        }\n\n\n        if (country !== null) { msg.target_country = country.trim(); } else { msg.target_country = null; }\n\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 280,
        "wires": [
            [
                "ccabfa3b.d01558"
            ]
        ]
    },
    {
        "id": "ccabfa3b.d01558",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Origin Grid To Coords/Distance/Bearing From User QTH",
        "func": "//  If  msg.has_origin_gridsquare true, the converts grid to lat/lon, distance and bearing (your bearing is set in another function)\n//\n//      [ Requires ]\n//          + msg.has_origin_gridsquare\n//          + msg.origin_gridsquare\n//          +   flow.get('my_lat_dec')\n//          +   flow.get('my_lon_dec')\n//\n//      [ Returns ]\n//          + msg.origin_lat_dec: \"33.500\"\n//          + msg.origin_lon_dec: \"-95.000\"\n//          + msg.origin_distance_miles: 927\n//          + msg.origin_distance_kilos: 1493\n//          + msg.origin_distance_miles_named: \"927 Miles\"\n//          + msg.origin_distance_kilos_named: \"1493 Kilometers\"\n//          + msg.origin_bearing: 261\n//          + msg.origin_bearing_name : 'North-East'\n\nif (msg.dx_call_grid){\n\n            convert_grid = msg.dx_call_grid;\n\n        var str_chr_up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        var str_chr_lo = \"abcdefghijklmnopqrstuvwxyz\";\n        var str_num = \"0123456789\";\n        var lat, lon, qth, deg, min, sec;\n        var directions = [\"North\", \"North-East\", \"East\", \"South-East\", \"South\", \"South-West\", \"West\", \"North-West\"];\n\n            qth = convert_grid;\n            qth = qth.toUpperCase();\n    \n// Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n    if (qth.length != 4) { msg.payload = 'Please enter a valid 4 or 6 characters QTH locator.'; return msg; }\n            valid_qth = qth.match(/[A-R][A-R][0-9]/g);\n    if (!valid_qth) { msg.payload = 'Bad Gridsquare'; return msg;}\n// Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n\n// Start Calculations Now. ------------------------------------------------------------------------------------------------------------\n\n    lat = str_chr_up.indexOf(qth.charAt(1)) * 10; lon = str_chr_up.indexOf(qth.charAt(0)) * 20;\n    lat += str_num.indexOf(qth.charAt(3)) * 1;    lon += str_num.indexOf(qth.charAt(2)) * 2;\n\n    lat += 0.5 * 1;\n    lon += 0.5 * 2;\n\n    lat -= 90;                                                  // Locator lat/lon origin shift.\n    lon -= 180;\n\nmsg.origin_lat_dec = lat.toFixed(3);\nmsg.origin_lon_dec = lon.toFixed(3);\n\n// Start Distance Calculatore From Your Grid To Theirs -------------------------------------------------------------------\n\n        let lat1 = parseFloat(flow.get('my_lat_dec'));\n        let lon1 = parseFloat(flow.get('my_lon_dec'));\n        let lat2 = parseFloat(lat.toFixed(3));\n        let lon2 = parseFloat(lon.toFixed(3));\n        \n        lat1 = lat1 * Math.PI / 180; lon1 = lon1 * Math.PI / 180;\n        lat2 = lat2 * Math.PI / 180; lon2 = lon2 * Math.PI / 180;\n        let dlon = lon2 - lon1; let dlat = lat2 - lat1;\n        let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2),2);\n        let c = 2 * Math.asin(Math.sqrt(a));\n        let rm = 3956; // Radius of earth in kilometers 6371, use 3956 for miles\n        let rk = 6371;\n        \nmsg.origin_distance_miles = parseInt(c * rm);\nmsg.origin_distance_kilos = parseInt(c * rk);\n        \nmsg.origin_distance_miles_named = parseInt(c * rm) + ' Miles';\nmsg.origin_distance_kilos_named = parseInt(c * rk) + ' Kilometers';\n        \n// END Distance Calculatore From Your Grid To Theirs -------------------------------------------------------------------\n\n// Start Bearing In Degrees By WA9WUD Request ---------------------------------------------------------------------------\n\n        startLat = parseFloat(flow.get('my_lat_dec'));\n        startLng = parseFloat(flow.get('my_lon_dec'));\n        destLat = parseFloat(msg.origin_lat_dec);\n        destLng = parseFloat(msg.origin_lon_dec);\n\n            startLat = toRadians(startLat); startLng = toRadians(startLng);\n            destLat = toRadians(destLat);   destLng = toRadians(destLng);\n\n            y = Math.sin(destLng - startLng) * Math.cos(destLat);\n            x = Math.cos(startLat) * Math.sin(destLat) - Math.sin(startLat) * Math.cos(destLat) * Math.cos(destLng - startLng);\n            brng = Math.atan2(y, x);\n            brng = toDegrees(brng);\n    \n    origin_bearing = (brng + 360) % 360;\nmsg.origin_bearing = parseInt(origin_bearing)\nmsg.origin_bearing_name = getDirection(origin_bearing);\n// End Bearing In Degrees By WA9WUD Request ---------------------------------------------------------------------------\n\n}\n\n\nreturn msg;\n\n\n\n\n\n// Converts from degrees to radians.\nfunction toRadians(degrees) { return degrees * Math.PI / 180; }\n \n// Converts from radians to degrees.\nfunction toDegrees(radians) { return radians * 180 / Math.PI;}\n\nfunction getDirection(heading) {\n    var index = Math.round(((heading %= 360) < 0 ? heading + 360 : heading) / 45) % 8;\n   //var index = Math.round((heading/8)/5,625)\n   return directions[index]}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "72c5707e.ffb428"
            ]
        ]
    },
    {
        "id": "26974000.12f948",
        "type": "switch",
        "z": "f848aedb.a536d8",
        "name": "Valid DX Call",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Full Status Message",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Partial Status Message",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 340,
        "wires": [
            [
                "c559f3cc.e2fa08"
            ],
            [
                "6c9dedd3.021b9c"
            ]
        ]
    },
    {
        "id": "75bd6bc9.309ee4",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 360,
        "wires": []
    },
    {
        "id": "6c9dedd3.021b9c",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 400,
        "wires": []
    },
    {
        "id": "72c5707e.ffb428",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Details and Pass To Next FLOW",
        "func": "// Full Status Message Includes Followed Decoded Data\n// With The Addition Of DX_Call's Country As Decoded By My Function\n// As Well As Distance and Bearing To DX_Call's Gridquare (If Known)\n\n//  payload: \"Full Status Message\"\n//  fromip: \"127.0.0.1:36390\"\n//  ip: \"127.0.0.1\"\n//  port: 36390\n//  _msgid: \"56a7351c.628ecc\"\n//  orig_message: buffer[102]\n//  decode_msg_type: 1\n//  magic_packet: \"adbccbda\"\n//  version: 2\n//  packet_type: 1\n//  sw_name: \"JTDX\"\n//  unique_key: 0\n//  dial_freq: 14074000\n//  mode_name: \"FT8\"\n//  dx_call: \"ES5QA\"\n//  dx_call_snr: \"-14\"\n//  dx_call_tx_mode: \"FT8\"\n//  tx_enabled: 0\n//  transmitting_now: 0\n//  decoding_now: 0\n//  rx_delta_frequency: 3542\n//  tx_delta_frequency: 1500\n//  de_call: \"KG4IXS\"\n//  de_call_grid: \"FM06\"\n//  dx_call_grid: \"KO38\"\n//  tx_watchdog_active: 0\n//  submode: \"Not Enabled\"\n//  fast_mode: 0\n//  special_mode: 1\n//  full_decode: \"adbccbda........0001\"\n\n//  ---------------------------------- Add by post-processing function, not part of orig. decode\n\n//  target_country: \"Estonia\"\n\n//  origin_lat_dec: \"58.500\"\n//  origin_lon_dec: \"27.000\"\n//  origin_distance_miles: 4623\n//  origin_distance_kilos: 7445\n//  origin_distance_miles_named: \"4623 Miles\"\n//  origin_distance_kilos_named: \"7445 Kilometers\"\n//  origin_bearing: 33\n//  origin_bearing_name: \"North-West\"\n\n// ========================================================================================================\n// ========================================================================================================\n// ============================= End Of Message Headers ===================================================\n// ========================================================================================================\n// ========================================================================================================\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 360,
        "wires": [
            [
                "8084c530.af563",
                "75bd6bc9.309ee4"
            ]
        ]
    },
    {
        "id": "5fa9b781.3a07d8",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "template_message_type",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 620,
        "wires": []
    }
]

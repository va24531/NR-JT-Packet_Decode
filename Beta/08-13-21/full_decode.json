[
    {
        "id": "4ff1b199.57fd08",
        "type": "udp in",
        "z": "f848aedb.a536d8",
        "name": "",
        "iface": "",
        "port": "2237",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "buffer",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "847c048.22ce478"
            ]
        ]
    },
    {
        "id": "847c048.22ce478",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "",
        "func": "// makes duplicate copy of orig message, so it can be passed on further down the line\n// without accidently overwriting it.\n// ---------------------------------------------------------------------------------------\n\nmsg.orig_message = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 200,
        "wires": [
            [
                "39081c81.87119c",
                "a5ab2bbd.033b4"
            ]
        ]
    },
    {
        "id": "760f003f.fa4df8",
        "type": "link out",
        "z": "f848aedb.a536d8",
        "name": "WSJT Message Output",
        "links": [
            "8f371112.7b051",
            "bac2ae93.f8a22",
            "258586c0.13870a",
            "3c84a023.9553e8"
        ],
        "x": 1575,
        "y": 280,
        "wires": []
    },
    {
        "id": "86551151.bbfe18",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Decoded RX QSO Message",
        "func": "// Revised - 07-22-21\n// \n// General code cleanup.\n// \n// Output messages:\n//  [ Header ]\n//      msg.magic_packet\n//      msg.version\n//      msg.packet_type\n//      msg.sw_name\n//  [ Header ]\n//  [ General ]\n//      msg.new_decode          0/1\n//      msg.decode_UTC_time     milliseconds\n//      msg.snr_value           -19\n//      msg.delta_time          'Not Functional'\n//      msg.delta_frequency     2716\n//      msg.decode_mode         ~\n//      msg.qso_message_length  14\n//      msg.qso_message         CQ KG4IXS FM06 \n//      msg.decode_confidence   0/1\n//      msg.offline_decode      0/1\n//  [ General ]\n\n\n\n// Do NOT Modify! -------------------------------------------------------------\n\n        msg.payload = msg.orig_message;\n                var string = \"\"\n                const buf = Buffer.from(msg.payload)\n                for (let hex of hexFormatValues(buf)) {string = string + hex } \n\n// Start Decode Header -------------------------------------------------------------------------------------\n\n    placeholder_start = 0;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.magic_packet = string.substring(placeholder_start,placeholder_stop);\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.version = parseInt(string.substring(placeholder_start,placeholder_stop));\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.packet_type = parseInt(string.substring(placeholder_start,placeholder_stop));\n// End Decode Header -------------------------------------------------------------------------------------\n\nif (msg.packet_type !== 2){  msg.other_decode = string; return msg;} // Stop Here If Not A Decode Message!\n\n// Start Software Name -----------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n    sw_size = string.substring(placeholder_start,placeholder_stop);\n    sw_name_length = placeholder_start  + next_value_length + (parseInt(sw_size) * 2);\n    sw_name = string.substring(32,sw_name_length);      // Get hex of software name, length based on above\n\n    var hex  = sw_name.toString();\n\tvar sw_name_2 = '';\n    for (var n = 0; n < hex.length; n += 2) { sw_name_2 += String.fromCharCode(parseInt(hex.substr(n, 2), 16));}\nmsg.sw_name = sw_name_2; \n// End Software Name -----------------------------------------------------------------------------------\n\n// Start Is New Decode ----------------------------------------------------------------------------------\n    placeholder_start = sw_name_length;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_new_decode = string.substring(placeholder_start, placeholder_stop);\nmsg.new_decode = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End New Decode --------------------------------------------------------------------------------------\n\n\n\n// Start Decode Milliseconds After Midnight UTC ---------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_decode_time = string.substring(placeholder_start,placeholder_stop);\nmsg.decode_UTC_time = hexToInt(hex_decode_time);\n// END Decode Milliseconds After Midnight UTC ---------------------------------------------------------------\n\n\n\n// Start Signal-Noise-Ratio ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_snr_report = string.substring(placeholder_start,placeholder_stop);\nmsg.snr_value = hexToInt(hex_snr_report);\n// END Signal-Noise-Ratio ------------------------------------------------------------------------------------\n\n\n\n// Start Delta Time Decode ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 16;\n    placeholder_stop = placeholder_start + next_value_length;\n        hex_delta_time = string.substring(placeholder_start,placeholder_stop);\nmsg.dt_start = placeholder_start;\nmsg.dt_stop = placeholder_stop;\n\nmsg.delta_time = 'Not Functional'; // To Be Fixed.\n\n\n\n// END Delta Time Decode ------------------------------------------------------------------------------------\n\n\n\n\n// Start Delta Frequency Decode ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_delta_freq = string.substring(placeholder_start,placeholder_stop);\nmsg.delta_frequency = hexToInt(hex_delta_freq);\n// END Delta Frequency Decode ------------------------------------------------------------------------------------\n\n\n// Start Mode Decode ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 10;\n    placeholder_stop = placeholder_start + next_value_length;\n        hex_mode = string.substring(placeholder_start,placeholder_stop);\n\n    var hex_mode_string  = hex_mode.toString();\n\tvar string_mode = '';\n    for (n = 0; n < hex_mode_string.length; n += 2) { string_mode += String.fromCharCode(parseInt(hex_mode_string.substr(n, 2), 16));}\nmsg.decode_mode = string_mode;\n// END Mode Decode ------------------------------------------------------------------------------------\n\n\n// Start Actual Message Lenght Value ------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_qso_message_length = string.substring(placeholder_start,placeholder_stop);\nmsg.qso_message_length = parseInt(hex_qso_message_length,16);\n// END Actual Message Lenght Value --------------------------------------------------------------------\n\n\n\n// Start Actual Message Decode ------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = msg.qso_message_length * 2;\n    placeholder_stop = placeholder_start + next_value_length;\n    hex_qso_message = string.substring(placeholder_start,placeholder_stop);\n\n\n    var hex_message_convert  = hex_qso_message.toString();\n\tvar ascii_message = '';\n    for (n = 0; n < hex_message_convert.length; n += 2) { ascii_message += String.fromCharCode(parseInt(hex_message_convert.substr(n, 2), 16));}\nmsg.qso_message = ascii_message.trim();\n// Start Actual Message Decode ------------------------------------------------------------------------\n\n\n\n// Low Confidence\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_confidence = string.substring(placeholder_start,placeholder_stop);\nmsg.decode_confidence = parseInt(string.substring(placeholder_start,placeholder_stop));\n// Low Confidence\n\n\n// Off Air \n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_offline = string.substring(placeholder_start,placeholder_stop);\nmsg.offline_decode = parseInt(string.substring(placeholder_start,placeholder_stop));\n// Off Air\n\n\n//msg.magicpacket = magic_packet;\n//msg.version = version;\n//msg.packet_type = packet_type;\n//msg.sw_name = sw_name_2;\n//msg.new_decode = int_new_decode;\n//msg.decode_time_hex = hex_decode_time;\n//msg.real_decode_time = real_decode_time;\n//msg.snr_report_hex = hex_snr_report;\n//msg.snr_report = real_snr_value;\n//msg.delta_time_hex = hex_delta_time;\n//msg.delta_freq_hex = hex_delta_freq;\n//msg.mode_hex = hex_mode;\n//msg.mode_string = string_mode;\n//msg.qso_message_length_hex = hex_qso_message_length;\n//msg.qso_message_length_int = int_qso_message_length;\n//msg.qso_message = hex_qso_message;\n//msg.qso_message_ascii = ascii_message;\n\n//msg.confidence_hex = hex_confidence;\n//msg.confidence_int = int_confidence;\n//msg.offline_hex = hex_offline;\n//msg.offline_int = int_offline;\n\n//msg.packet_length = string.length;\n//msg.full_packet = string;\n\nmsg.payload = ' New Message ';\n\nmsg.test = string;\nreturn msg;\n\n\n\n\n\n\n// -----------------------------------------------------------------------------------------------\n// -----------------------------------------------------------------------------------------------\n// Functions Below Here - DO NOT MODIFY ----------------------------------------------------------\n// -----------------------------------------------------------------------------------------------\n// -----------------------------------------------------------------------------------------------\n\n        function hexToInt(hex) {\n            if (hex.length % 2 != 0) {\n                hex = \"0\" + hex;\n            }\n            var num = parseInt(hex, 16);\n            var maxVal = Math.pow(2, hex.length / 2 * 8);\n            if (num > maxVal / 2 - 1) {\n                num = num - maxVal\n            }\n            return num;\n        }\n\n\n        // Creation of a function to get the Hex Value from a message\n        function* hexFormatValues(buffer) {\n            for (let x of buffer) {\n                const hex = x.toString(16)\n                yield hex.padStart(2, '0')\n            }\n        }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 340,
        "wires": [
            [
                "9583bc9a.4de0c"
            ]
        ]
    },
    {
        "id": "39081c81.87119c",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Header Decode",
        "func": "// This section ONLY decodes what type of packet it is, and handles it as either a type 0, 1, or 2, as per protocol\n// Nothing useful returned here, except      msg.decode_msg_type\n// ------------------------------------------------------------------------------------------------------------------\n\n// Do NOT Modify! -------------------------------------------------------------\n        function hexToInt(hex) {\n            if (hex.length % 2 != 0) { hex = \"0\" + hex; }\n            var num = parseInt(hex, 16);\n            var maxVal = Math.pow(2, hex.length / 2 * 8);\n            if (num > maxVal / 2 - 1) { num = num - maxVal }\n            return num;\n        }\n\n        function* hexFormatValues(buffer) {\n            for (let x of buffer) { const hex = x.toString(16); yield hex.padStart(2, '0'); }\n        }\n\n        msg.payload = msg.orig_message;\n\n                var string = \"\";\n                const buf = Buffer.from(msg.payload);\n\n                for (let hex of hexFormatValues(buf)) {string = string + hex } \n\nplaceholder_start = 0;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nmagic_packet = string.substring(placeholder_start,placeholder_stop);\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nversion = parseInt(string.substring(placeholder_start,placeholder_stop));\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\npacket_type = parseInt(string.substring(placeholder_start,placeholder_stop));\n\n\nmsg.decode_msg_type = packet_type;\nreturn msg;\n\n// Do NOT Modify! -------------------------------------------------------------",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 280,
        "wires": [
            [
                "267c1c5a.6e80dc"
            ]
        ]
    },
    {
        "id": "267c1c5a.6e80dc",
        "type": "switch",
        "z": "f848aedb.a536d8",
        "name": "",
        "property": "decode_msg_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 310,
        "y": 280,
        "wires": [
            [
                "9e71d881.30f958"
            ],
            [
                "2e3e4f72.0798d"
            ],
            [
                "86551151.bbfe18"
            ]
        ]
    },
    {
        "id": "9e71d881.30f958",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Decode Heartbeat Message",
        "func": "// Standard heartbeat message\n// Only thing really useful in this packet is sw_name, nothing else.\n\n\n\n\n// Do NOT Modify! -------------------------------------------------------------\n        function hexToInt(hex) {\n            if (hex.length % 2 != 0) {\n                hex = \"0\" + hex;\n            }\n            var num = parseInt(hex, 16);\n            var maxVal = Math.pow(2, hex.length / 2 * 8);\n            if (num > maxVal / 2 - 1) {\n                num = num - maxVal\n            }\n            return num;\n        }\n\n\n        // Creation of a function to get the Hex Value from a message\n        function* hexFormatValues(buffer) {\n            for (let x of buffer) {\n                const hex = x.toString(16)\n                yield hex.padStart(2, '0')\n            }\n        }\n\n\n        msg.payload = msg.orig_message;\n\n            // Variable declaration for my loop\n                var string = \"\"\n                const buf = Buffer.from(msg.payload)\n\n            // Concatenation of the buffer in a string \n                for (let hex of hexFormatValues(buf)) {string = string + hex } \n\n            //msg.payload = string;\n\n// Do NOT Modify! -------------------------------------------------------------\n\n\nplaceholder_start = 0;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nmagic_packet = string.substring(placeholder_start,placeholder_stop);\nmsg.magicpacket = magic_packet;\n\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nversion = parseInt(string.substring(placeholder_start,placeholder_stop));\nmsg.version = version;\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\npacket_type = parseInt(string.substring(placeholder_start,placeholder_stop));\nmsg.packet_type = packet_type;\n\nplaceholder_start = placeholder_stop;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\n\nsw_size = string.substring(placeholder_start,placeholder_stop); // Decode Length Of Software Name (wsjt-x vs jtdx vs whatever)\nsw_name_length = placeholder_start  + next_value_length + (parseInt(sw_size) * 2); // Convert hex value to true interger value, double it, and add it to the last hex position of 32\nsw_name = string.substring(32,sw_name_length);      // Get hex of software name, length based on above\n\n    var hex  = sw_name.toString();\n\tvar sw_name_2 = '';\n    for (var n = 0; n < hex.length; n += 2) { sw_name_2 += String.fromCharCode(parseInt(hex.substr(n, 2), 16));}\n\t// Convert software name from hex to ascii \n\t\nmsg.sw_name = sw_name_2;\n\n// END Header\n\n\n// ------------------- Based On STATUS UDP Message\n\nplaceholder_start = sw_name_length;\nnext_value_length = 8;\nplaceholder_stop = placeholder_start + next_value_length;\nunique_key = string.substring(placeholder_start, placeholder_stop);\nunique_key = parseInt(unique_key);\nmsg.unique_key = unique_key;\n\n\n\nmsg.payload = ' New Message ';\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 220,
        "wires": [
            [
                "53d0a7d3.511f28",
                "e53c7800.8d1868"
            ]
        ]
    },
    {
        "id": "2e3e4f72.0798d",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Decoded Status Message",
        "func": "// Revision 07-22-21    *Major Update\n//\n//  Major code cleanup, all but .submode are fully functional.\n//\n// Output messages:\n//      [ MSG TYPE ]\n//          +msg.decode_msg_type\n//      [ MSG TYPE ]\n//      [ HEADER ]\n//          +msg.magic_packet: \"adbccbda\"\n//          +msg.version: 2\n//          +msg.packet_type: 1\n//          +msg.sw_name: \"JTDX\"\n//      [ HEADER ]\n//      [ GENERAL ]\n//          +msg.unique_key: 0\n//          +msg.dial_freq: 14074000\n//          +msg.mode_name: \"FT8\"\n//          +msg.dx_call: \"KI7AY\"\n//          +msg.dx_call_snr: \"-12\"\n//          +msg.dx_call_tx_mode: \"FT8\"\n//          +msg.tx_enabled: 0\n//          +msg.transmitting_now: 0\n//          +msg.decoding_now: 0\n//          +msg.rx_delta_frequency: 2671\n//          +msg.tx_delta_frequency: 1500\n//          +msg.de_call: \"KG4IXS\"\n//          +msg.de_call_grid: \"FM06\"\n//          +msg.dx_call_grid: \"EM25\"\n//          +msg.tx_watchdog_active: 0\n//          -msg.submode: \"Not Enabled\"\n//          +msg.fast_mode: 0\n//          +msg.special_mode: 0\n//          +msg.full_decode: \"------\"\n//      [ GENERAL ]\n\n\n\n// Do NOT Modify! -------------------------------------------------------------\n\n\n\n        msg.payload = msg.orig_message;\n\n            var string = \"\"\n            const buf = Buffer.from(msg.payload)\n            for (let hex of hexFormatValues(buf)) {string = string + hex } \n\n// Start Decode Header -------------------------------------------------------------------------------------\n\n    placeholder_start = 0;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.magic_packet = string.substring(placeholder_start,placeholder_stop);\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.version = parseInt(string.substring(placeholder_start,placeholder_stop));\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.packet_type = parseInt(string.substring(placeholder_start,placeholder_stop));\n// End Decode Header -------------------------------------------------------------------------------------\n\nif (msg.packet_type !== 1){  msg.other_decode = string; return msg;} // Stop Here If Not A Decode Message!\n\n// Start Software Name -----------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\n    \nmsg.sw_name = hexToUTF8(hex_string);\n// End Software Name -----------------------------------------------------------------------------------\n\n// -- END Header Decode --------------------------------------------------------------------------------\n\n\n\n// Start Unique Key Decode ------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    unique_key = string.substring(placeholder_start, placeholder_stop);\nmsg.unique_key = parseInt(unique_key);\n// End Unique Key Decode --------------------------------------------------------------------------------\n\n\n// Start Decoded Dial Frequency -------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    dial_freq = string.substring(placeholder_start,placeholder_stop);\nmsg.dial_freq = hexToInt(dial_freq);\n// END Decoded Dial Freq --------------------------------------------------------------------------------\n\n\n// Start Decoded Mode -----------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\nmsg.mode_name = hexToUTF8(hex_string);\n// End Decoded Mode Name --------------------------------------------------------------------------------\n\n// Selected DX Callsign Decode --------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\nmsg.dx_call = hexToUTF8(hex_string);\n// End Selected DX Callsign Decode ----------------------------------------------------------------------\n\n\n// Selected Call Report\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\n    \nmsg.dx_call_snr = hexToUTF8(hex_string);\n// END Selected Call Report --------------------------------------------------------------------------------\n\n// Start TX Mode Decode --------------------------------------------------------------------------------\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\n    \nmsg.dx_call_tx_mode = hexToUTF8(hex_string);\n// End TX Mode Decode --------------------------------------------------------------------------------\n\n// Start TX Enabled Decode --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.tx_enabled = parseInt(string.substring(placeholder_start, placeholder_stop));\n// END TX Enable Decode --------------------------------------------------------------------------------\n\n// Start Transmitting Now Decode --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.transmitting_now = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End Transmitting Now Decode --------------------------------------------------------------------------------\n\n// Start Decoding Now --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.decoding_now = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End Decoding Now --------------------------------------------------------------------------------\n\n// Start RX Delta Frequency Decode ------------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_delta_freq = string.substring(placeholder_start,placeholder_stop);\nmsg.rx_delta_frequency = hexToInt(string.substring(placeholder_start,placeholder_stop));\n// END Delta Frequency Decode ------------------------------------------------------------------------------------\n\n//\n\n// Start TX Delta Frequency Decode ------------------------------------------------------------------------------------\nplaceholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n    //hex_delta_freq = string.substring(placeholder_start,placeholder_stop);\nmsg.tx_delta_frequency = hexToInt(string.substring(placeholder_start,placeholder_stop));\n// END Delta Frequency Decode ------------------------------------------------------------------------------------\n\n\n// Start DE Call Decode --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\nmsg.de_call = hexToUTF8(hex_string);\n// End DE Call Decode --------------------------------------------------------------------------------\n\n// Start DE Grid --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n            hex_string = string.substring(placeholder_stop,this_payload_length)\n            \n    placeholder_stop = this_payload_length;\nmsg.de_call_grid = hexToUTF8(hex_string);\n// END DE Grid --------------------------------------------------------------------------------\n\n// Start DX Grid Decode --------------------------------------------------------------------------------\n\n    placeholder_start = placeholder_stop;\n    next_value_length = 8;\n    placeholder_stop = placeholder_start + next_value_length;\n\n            this_payload_size = string.substring(placeholder_start,placeholder_stop);\n            \n            if (this_payload_size !== 'ffffffff'){\n                    this_payload_length = placeholder_start  + next_value_length + (parseInt(this_payload_size) * 2);\n                    hex_string = string.substring(placeholder_stop,this_payload_length)\n                    placeholder_stop = this_payload_length;\n                msg.dx_call_grid = hexToUTF8(hex_string);\n            } else { msg.dx_call_grid = 'Unknown';}\n\n// END DX Grid Decode --------------------------------------------------------------------------------\n\n// Start TX Watchdog --------------------------------------------------------------------------------\n    placeholder_start = placeholder_stop;\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.tx_watchdog_active = parseInt(string.substring(placeholder_start, placeholder_stop));\n// END TX Watchdog --------------------------------------------------------------------------------\n\n// Start Sub-mode --------------------------------------------------------------------------------\nmsg.submode = 'Not Enabled';\n// End Sub-Mode Decode --------------------------------------------------------------------------------\n\n// Start Fast Mode Decode --------------------------------------------------------------------------------\n    placeholder_start = (string.length -4)\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.fast_mode = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End Fast Mode Decode --------------------------------------------------------------------------------\n\n// Start Special Mode Decode --------------------------------------------------------------------------------\n    placeholder_start = (string.length -2)\n    next_value_length = 2;\n    placeholder_stop = placeholder_start + next_value_length;\nmsg.special_mode = parseInt(string.substring(placeholder_start, placeholder_stop));\n// End Special Mode Decode --------------------------------------------------------------------------------\n\n\nif (msg.dx_call_snr === ''){msg.payload = 'Partial Status';} else { msg.payload = 'Full Status'; msg.template_message_type = 'full_status' }\nmsg.full_decode = string;\n\nreturn msg;\n\n\n\n\n// -------------------------------------------------- Functions Below Here - Do Not Edit ---------------------------------------\n\n        function hexToUTF8(hex) {\n            var hex0  = hex.toString();\n\t        var return_2 = '';\n            for (var s = 0; s < hex0.length; s += 2) { return_2 += String.fromCharCode(parseInt(hex0.substr(s, 2), 16));}\n            return return_2;\n        }\n\n        function hexToInt(hex) {\n            if (hex.length % 2 != 0) {\n                hex = \"0\" + hex;\n            }\n            var num = parseInt(hex, 16);\n            var maxVal = Math.pow(2, hex.length / 2 * 8);\n            if (num > maxVal / 2 - 1) {\n                num = num - maxVal\n            }\n            return num;\n        }\n\n\n        // Creation of a function to get the Hex Value from a message\n        function* hexFormatValues(buffer) {\n            for (let x of buffer) {\n                const hex = x.toString(16)\n                yield hex.padStart(2, '0')\n            }\n        }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "5126a898.79621"
            ]
        ]
    },
    {
        "id": "53d0a7d3.511f28",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 140,
        "wires": []
    },
    {
        "id": "e53c7800.8d1868",
        "type": "link out",
        "z": "f848aedb.a536d8",
        "name": "UDP Heartbeat Message",
        "links": [],
        "x": 715,
        "y": 180,
        "wires": []
    },
    {
        "id": "9583bc9a.4de0c",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Decoded RX Message Type",
        "func": "// Updated 07-22-21\n//\n// Code updated to handle country locations \n//      -- for CQ's, only Origin location is given)\n//      -- for Calling Station messages, both Origin location and Target location is given\n//      -- for In QSO messages, both Origin location and Target location is given\n//  \n//  Updated to handle 4 'word' messages, such as 'CQ DX KG4IXS FM06'\n//  Updated to ignore 1 or 2 'word' messages, such as '73 RICHARD' or 'BAD COPY'\n//\n//  New messages added\n//      + msg.has_origin_callsign\n//      + msg.origin_callsign\n//      + msg.has_origin_gridsquare\n//      + msg.origin_gridsquare\n//      + msg.has_target_callsign\n//      + msg.target_callsign\n//\n// -----------------------------------------------------------------------------------------------------------------\n//\n//\n// ---------------------------------------- Nothing Below Here To Modify -------------------------------------------\nstr = msg.qso_message;\nstr = str.trim();\nmsg.qso_message_ascii = str;\nconst myArr = str.split(\" \");\n\nmsg.has_origin_callsign = false; msg.origin_callsign = null;\nmsg.has_origin_gridsquare = false; msg.origin_gridsquare = null;\nmsg.has_target_callsign = false; msg.target_callsign = null;\nthis_message_type = null;\n\n\n// If nonstandard message, such as 'bad copy' or 'thanks 73' is decoded.\nif (myArr.length < 3){ msg.payload = 'Nonstandard Message'; return msg; }\n\n\n// Handles a CQ calling DX/NA/OC/AS/Whatever. Last Position is Grid, Second to Last is Callsign\n// Arrays start at 0, common counting starting a 1, hence the -1 offset.\n\nlast_position = (myArr.length -1);  last_pos_chars = myArr[last_position];\n\n\n// Look for starting CQ in message (TX type 6) --------------------------------------\n\n    if (myArr[0] === 'CQ') {\n    \n \n            calling_cq_gridsquare = last_pos_chars.match(/[A-R][A-R][0-9][0-9]/g);\n            \n                        // CQ AS VE2GHI         <- Has CQ, NO Grid, Callsign at last position \n                        // CQ AS KG4GHI FM06    <- Has CQ, Has Grid, Callsign at (last_position-1) Position\n            \n                if (calling_cq_gridsquare){\n                    this_message_type = 'calling_cq';\n                        msg.has_origin_callsign = true;     msg.origin_callsign = myArr[last_position-1];\n                        msg.has_origin_gridsquare = true;   msg.origin_gridsquare = myArr[last_position];\n                        msg.has_target_callsign = false;    msg.template_message_type = this_message_type;\n                                                                                     msg.payload = 'Calling CQ';\n                return msg;\n                \n                }   else {\n\n                    this_message_type = 'calling_cq';\n                        msg.has_origin_callsign = true;     msg.origin_callsign = myArr[last_position];\n                        msg.has_origin_gridsquare = false;   msg.origin_gridsquare = null;\n                        msg.has_target_callsign = false;    msg.template_message_type = this_message_type;\n                                                                                    msg.payload = 'Calling CQ';\n                return msg; \n                }\n    }\n\n// -----------------------------------------------------------------------------\n\n// -----------------------------------------------------------------------------\n// Checks for standard exchange/signal report/RR73, ---> TX2, TX3, TX4, TX5\n\n        if (last_pos_chars.charAt(0) === 'R'){\n                if (last_pos_chars.charAt(1) === '+'){this_message_type = 'in_qso';}\n                if (last_pos_chars.charAt(1) === '-'){this_message_type = 'in_qso';}\n        }\n        \n        if (last_pos_chars.charAt(0) === '+'){ this_message_type = 'in_qso';}\n        if (last_pos_chars.charAt(0) === '-'){ this_message_type = 'in_qso';}\n        \n        if (last_pos_chars === 'RRR'  ){this_message_type = 'in_qso';}\n        if (last_pos_chars === 'RR73' ){this_message_type = 'in_qso'; }\n        if (last_pos_chars === '73'   ){this_message_type = 'in_qso';}\n\n            if ( this_message_type === 'in_qso'){\n                    msg.has_origin_callsign = true;     msg.origin_callsign = myArr[last_position-1];\n                    msg.has_target_callsign = true;     msg.target_callsign = myArr[last_position-2];  \n                    msg.has_origin_gridsquare = false;  msg.template_message_type = 'in_qso'; msg.payload = 'In QSO';\n                return msg;\n            }\n// -----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------------------------\n// Checks Messages that don't start with CQ for a GRID SQUARE Match in the last position\n// This would qualify as a station trying to answer a CQ call, or is a 'Calling Station'\n// Valid Grids are AA00 - RR99\n\n// Check for TX1's\n\ncalling_station_gridsquare = last_pos_chars.match(/[A-R][A-R][0-9][0-9]/g);\nif (calling_station_gridsquare){\n                        \n                    msg.has_origin_callsign = true;     msg.origin_callsign =   myArr[last_position-1];\n                    msg.has_target_callsign = true;     msg.target_callsign =   myArr[last_position-2];\n                    msg.has_origin_gridsquare = true;   msg.origin_gridsquare = myArr[last_position];\n                    msg.template_message_type = 'calling_station';  msg.payload = 'Calling Station';\n        return msg;\n}\n\n// ----------------------------------------------------------------------------------------------\n\nmsg.payload = 'Incorrect - ' + str + ' - Free Form Text?'; return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 380,
        "wires": [
            [
                "5126a898.79621"
            ]
        ]
    },
    {
        "id": "a5ab2bbd.033b4",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "MY GRID Location",
        "func": "// --------------------------------------------------------------------------------------------------------\n// Last Updated 07-22-21\n// *** Only need to run ONCE at startup if your gridsquare does not change!\n\n// Messages Set/Returned\n//\n// flow.set('my_lat_dec')\n// flow.set('my_lon_dec')\n//\n// msg.my_lat_dec: \"36.500\"\n// msg.my_lon_dec: \"-79.000\"\n\n// -------------------------------------Modify Below To Your Grid ------------------------------------------------------------\n//\n    my_grid = 'FM06';   // Change this to YOUR grid\n//\n// ------------------------------------Nothing Below Needs To Be Modified-----------------------------------------------------\n\n\nif (flow.get('my_lat_dec') !== undefined){return msg;}\n\nvar str_chr_up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";                          // Constants.\nvar str_chr_lo = \"abcdefghijklmnopqrstuvwxyz\";\nvar str_num = \"0123456789\";\nvar lat, lon, qth, deg, min, sec;\n\n    qth = my_grid;\n    qth = qth.toUpperCase();\n    \n// Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n    if (qth.length != 4) { msg.payload = 'Please enter a valid 4 or 6 characters QTH locator.'; return msg; }\n            valid_qth = qth.match(/[A-R][A-R][0-9]/g);\n    if (!valid_qth) { msg.payload = 'Bad Gridsquare'; return msg;}\n// Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n\n\n\n// End Make sure the locator is composed by twho characters and two digits. --------------------------------------------------------\n\n// Start Calculations Now. ------------------------------------------------------------------------------------------------------------\n\n    lat = str_chr_up.indexOf(qth.charAt(1)) * 10;               // 2nd digit: 10deg latitude slot.\n    lon = str_chr_up.indexOf(qth.charAt(0)) * 20;               // 1st digit: 20deg longitude slot.\n    lat += str_num.indexOf(qth.charAt(3)) * 1;                  // 4th digit: 1deg latitude slot.\n    lon += str_num.indexOf(qth.charAt(2)) * 2;                  // 3rd digit: 2deg longitude slot.\n\n    lat += 0.5 * 1;\n    lon += 0.5 * 2;\n\n    lat -= 90;                                                  // Locator lat/lon origin shift.\n    lon -= 180;\n\n            msg.my_lat_dec = lat.toFixed(3);  // Display result (rounded to 3 decimal digits).\n            msg.my_lon_dec= lon.toFixed(3);\n\n            flow.set('my_lat_dec',lat.toFixed(3));\n            flow.set('my_lon_dec',lon.toFixed(3));\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d2a5147b.89fe5",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Process Message",
        "func": "\n//if (msg.next_action === 'done'){msg.payload = '-- Done & Die';return [msg,null];} /// Done with fixing values\nstop = false;\nif (msg.payload === 'Partial Status'){return;} //die\n\nif (msg.payload === 'Full Status'){msg.packet_type = 'status';}\nif (msg.payload === 'Calling CQ'){msg.packet_type = 'message';}\nif (msg.payload === 'In QSO'){msg.packet_type = 'message';}\nif (msg.payload === 'Calling Station'){msg.packet_type = 'message';}\n\n        //if (msg.payload === 'Partial Status' || msg.payload === 'Full Status'){return [msg,null];}\n\n        if (msg.next_action === undefined){msg.next_action = 'step_1_start';return [null,msg];} // Send To Sub-Processing - First Pass\n\n    else{\n\n                if (msg.packet_type ==='status'){\n                    switch (msg.next_action){\n                        case 'step_1_done': stop = true; break; // Destination Processing Done, Die\n                    }\n                }\n                \n        \n                if (msg.packet_type ==='message'){\n                    switch (msg.next_action){\n                        case 'step_1_done': msg.next_action = 'step_2_start'; stop = false; break; // Origin Processing Done, Next Sub-Processing\n                        case 'step_2_done': stop = true; break; // Destination Processing Done, Die\n                    }\n                }\n                \n    }\n    \nif (stop){return [msg,null];}else{return [null,msg];}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "740bb32f.09d05c"
            ],
            [
                "16e19c2c.8e4614"
            ]
        ]
    },
    {
        "id": "71eed9ed.5128f8",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 320,
        "wires": []
    },
    {
        "id": "dd724101.7ef2c8",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Finished Step Pass",
        "func": "if (msg.next_action === 'step_1_start'){msg.next_action = 'step_1_done'; msg.payload1 = 'Step 1 Complete'; return msg;}\nif (msg.next_action === 'step_2_start'){msg.next_action = 'step_2_done'; msg.payload1 = 'Step 2 Complete'; return msg;}\n\nmsg.payload1 = 'Oops, Something Went Wrong.'; return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 420,
        "wires": [
            [
                "d2a5147b.89fe5"
            ]
        ]
    },
    {
        "id": "740bb32f.09d05c",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "<< Finished - Housecleaning >>",
        "func": "// Remove Debug Payload Message  - Housecleaning//\n        delete msg.next_action;\n        delete msg.payload1;\n// Remove Debug Payload Message  - Housecleaning//\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 300,
        "wires": [
            [
                "71eed9ed.5128f8",
                "760f003f.fa4df8"
            ]
        ]
    },
    {
        "id": "16e19c2c.8e4614",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Call To Country Name & Lat/Lon",
        "func": "\n                // Subprocessing Start\n                    search_callsign = null;\n\n                if (msg.next_action === 'step_1_start' && msg.packet_type === 'status'){\n                    if (msg.dx_call === null){return;} else { search_callsign = msg.dx_call; msg.payload1 = 'DX Target';}\n                }\n                    \n                if (msg.next_action === 'step_1_start' && msg.packet_type === 'message'){\n                    if (msg.origin_callsign === '<...>'){ msg.origin_guess_location = 'Unknown'; msg.origin_country = 'Unknown'; return msg; }\n                    if (msg.origin_callsign === null){return;} else { search_callsign = msg.origin_callsign; msg.payload1 = 'Origin Search';}\n                }\n    \n                if (msg.next_action === 'step_2_start' && msg.packet_type === 'message'){\n                    if (msg.target_callsign === '<...>'){ msg.target_guess_location = 'Unknown'; msg.target_country = 'Unknown'; return msg; }\n                    if (msg.target_callsign === null){ msg.target_country = 'none'; msg.target_guess_location = 'none'; return msg; }\n                        else { search_callsign = msg.target_callsign; msg.payload1 = 'Target Search'; }\n                }\n\n\n\nif (search_callsign !== null){\n            guess_location = null;\n            country = null;\n\n                if (country === null){\n            \n                    count = 4;\n                    find_this = search_callsign.substring(0,count);\n\n                    switch (find_this){\n                        case 'HB3Y': country = ' Liechtenstein'; guess_location = '47.166,9.555373';break;\n                    }\n                }\n\n                if (country === null){\n\n                    count = 3;\n                    find_this = search_callsign.substring(0,count);\n\n                    switch (find_this){\n\n                        case '3DA': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DB': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DC': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DD': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DE': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DF': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DG': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DH': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DI': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DJ': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DK': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DL': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DM': country = ' Swaziland'; guess_location = '-26.522503,31.465866';break;\n                        case '3DN': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DO': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DP': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DQ': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DR': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DS': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DT': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DU': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DV': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DW': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DX': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DY': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '3DZ': country = ' Fiji';      guess_location = '-16.578193,179.414413';break;\n                        case '9M0': country = ' Spratly Islands'; guess_location = '8.6447,111.9202';break;\n                        case 'BV9': country = ' Spratly Islands'; guess_location = '8.6447,111.9202';break;\n                        case 'DX0': country = ' Spratly Islands'; guess_location = '8.6447,111.9202';break;\n                        case 'HB0': country = ' Liechtenstein'; guess_location = '47.166,9.555373';break;\n                        case 'HBL': country = ' Liechtenstein'; guess_location = '47.166,9.555373';break;\n                        case 'RA6': country = ' Chechnya';  guess_location = '43.4023, 45.7187';break;\n                        case 'SSA': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSB': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSC': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSD': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSE': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSF': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSG': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSH': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSI': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSJ': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSK': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSL': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                        case 'SSM': country = ' Egypt';     guess_location = '26.820553,30.802498';break;\n                    }\n                }\n\n                if (country === null){\n\n                    count = 2;\n                    find_this = search_callsign.substring(0,count);\n    \n                    switch (find_this){\n\n                        case '0S': country = 'Principality of Seborga'; break;\n                        case '1A': country = 'Sovereign Military Order of Malta'; break;\n                        case '1B': country = 'Northern Cyprus or Blenheim Reef'; guess_location = '35.126413,33.429859';break;\n                        case '1G': country = 'Geyser Reef'; break;   // ------------------------------------------------------------------------Unknown Location\n                        case '1L': country = 'Liberland'; break;     // ------------------------------------------------------------------------Unknown Location\n                        case '1M': country = 'Minerva Reefs'; break; // ------------------------------------------------------------------------Unknown Location\n                        case '1S': country = 'Principality of Sealand'; guess_location = '51.96299,1.40917';break;\n                        case '1Z': country = 'Kayin State';             guess_location = '17.65931,97.56404';break;\n                        case '3A': country = 'Monaco';                  guess_location = '43.750298,7.412841';break;\n                        case '3B': country = 'Mauritius';               guess_location = '-20.348404,57.552152';break;\n                        case '3C': country = 'Equatorial Guinea';       guess_location = '1.54959,10.27624'; break;\n                        case '3E': country = 'Panama';  guess_location = '8.537981,-80.782127';break;\n                        case '3F': country = 'Panama';  guess_location = '8.537981,-80.782127';break;\n                        case '3G': country = 'Chile';   guess_location = '-35.675147,-71.542969';break;\n                        case '3H': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3I': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3J': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3K': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3L': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3M': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3N': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3O': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3P': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3Q': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3R': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3S': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3T': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3U': country = 'P.Rep. of China'; guess_location = '35.86166,104.195397';break;\n                        case '3V': country = 'Tunisia';         guess_location = '33.886917,9.537499';break;\n                        case '3W': country = 'Vietnam';         guess_location = '14.058324,108.277199';break;\n                        case '3X': country = 'Guinea';          guess_location = '9.945587,-9.696645';break;\n                        case '3Y': country = 'Norway';          guess_location = '60.472024,8.468946';break;\n                        case '3Z': country = 'Poland';          guess_location = '51.919438,19.145136';break;\n                        case '4A': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '4B': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '4C': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '4D': country = 'Philippines';     guess_location = '12.879721,121.774017';break;\n                        case '4E': country = 'Philippines';     guess_location = '12.879721,121.774017';break;\n                        case '4F': country = 'Philippines';     guess_location = '12.879721,121.774017';break;\n                        case '4G': country = 'Philippines';     guess_location = '12.879721,121.774017';break;\n                        case '4H': country = 'Philippines';     guess_location = '12.879721,121.774017';break;\n                        case '4I': country = 'Philippines';     guess_location = '12.879721,121.774017';break;\n                        case '4J': country = 'Azerbaijan';      guess_location = '40.143105,47.576927';break;\n                        case '4K': country = 'Azerbaijan';      guess_location = '40.143105,47.576927';break;\n                        case '4L': country = 'Georgia';         guess_location = '42.315407,43.356892';break;\n                        case '4M': country = 'Venezuela';       guess_location = '6.42375,-66.58973';break;\n                        case '4O': country = 'Montenegro';      guess_location = '42.708678,19.37439';break;\n                        case '4P': country = 'Sri Lanka';       guess_location = '7.873054,80.771797';break;\n                        case '4Q': country = 'Sri Lanka';       guess_location = '7.873054,80.771797';break;\n                        case '4R': country = 'Sri Lanka';       guess_location = '7.873054,80.771797';break;\n                        case '4S': country = 'Sri Lanka';       guess_location = '7.873054,80.771797';break;\n                        case '4T': country = 'Peru';            guess_location = '-9.189967,-75.015152';break;\n                        case '4U': country = 'United Nations (non-geographical)'; break;   // ----------------------------------------No Physical Location\n                        case '4V': country = 'Haiti';           guess_location = '18.971187,-72.285215';break;\n                        case '4W': country = 'East Timor';      guess_location = '-8.874217,125.727539';break;\n                        case '4X': country = 'Israel';          guess_location = '31.046051,34.851612';break;\n                        case '4Y': country = 'International Civil Aviation Organization (non-geographical)'; break; // ---------------No Physical Location\n                        case '4Z': country = 'Israel';          guess_location = '31.046051,34.851612';break;\n                        case '5A': country = 'Libya';           guess_location = '26.3351,17.228331';break;\n                        case '5B': country = 'Cyprus';          guess_location = '35.126413,33.429859';break;\n                        case '5C': country = 'Morocco';         guess_location = '31.791702,-7.09262';break;\n                        case '5D': country = 'Morocco';         guess_location = '31.791702,-7.09262';break;\n                        case '5E': country = 'Morocco';         guess_location = '31.791702,-7.09262';break;\n                        case '5F': country = 'Morocco';         guess_location = '31.791702,-7.09262';break;\n                        case '5G': country = 'Morocco';         guess_location = '31.791702,-7.09262';break;\n                        case '5H': country = 'Tanzania';        guess_location = '-6.369028,34.888822';break;\n                        case '5I': country = 'Tanzania';        guess_location = '-6.369028,34.888822';break;\n                        case '5J': country = 'Colombia';        guess_location = '4.570868,-74.297333';break;\n                        case '5K': country = 'Colombia';        guess_location = '4.570868,-74.297333';break;\n                        case '5L': country = 'Liberia';         guess_location = '6.428055,-9.429499';break;\n                        case '5M': country = 'Liberia';         guess_location = '6.428055,-9.429499';break;\n                        case '5N': country = 'Nigeria';         guess_location = '9.081999,8.675277';break;\n                        case '5O': country = 'Nigeria';         guess_location = '9.081999,8.675277';break;\n                        case '5P': country = 'Denmark';         guess_location = '56.26392,9.501785';break;\n                        case '5Q': country = 'Denmark';         guess_location = '56.26392,9.501785';break;\n                        case '5R': country = 'Madagascar';      guess_location = '-18.766947,46.869107';break;\n                        case '5S': country = 'Madagascar';      guess_location = '-18.766947,46.869107';break;\n                        case '5T': country = 'Mauritania';      guess_location = '21.00789,-10.940835';break;\n                        case '5U': country = 'Niger';           guess_location = '17.607789,8.081666';break;\n                        case '5V': country = 'Togo';            guess_location = '8.619543,0.824782';break;\n                        case '5W': country = 'Western Samoa';   guess_location = '-13.759029,-172.104629';break;\n                        case '5X': country = 'Uganda';          guess_location = '1.373333,32.290275';break;\n                        case '5Y': country = 'Kenya';           guess_location = '-0.023559,37.906193';break;\n                        case '5Z': country = 'Kenya';           guess_location = '-0.023559,37.906193';break;\n                        case '6A': country = 'Egypt';           guess_location = '26.820553,30.802498';break;\n                        case '6B': country = 'Egypt';           guess_location = '26.820553,30.802498';break;\n                        case '6C': country = 'Syria';           guess_location = '34.802075,38.996815';break;\n                        case '6D': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '6E': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '6F': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '6G': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '6H': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '6I': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '6J': country = 'Mexico';          guess_location = '23.634501,-102.552784';break;\n                        case '6K': country = 'South Korea';     guess_location = '35.907757,127.766922';break;\n                        case '6L': country = 'South Korea';     guess_location = '35.907757,127.766922';break;\n                        case '6M': country = 'South Korea';     guess_location = '35.907757,127.766922';break;\n                        case '6N': country = 'South Korea';     guess_location = '35.907757,127.766922';break;\n                        case '6O': country = 'Somalia';         guess_location = '5.152149,46.199616';break;\n                        case '6P': country = 'Pakistan';        guess_location = '30.375321,69.345116';break;\n                        case '6Q': country = 'Pakistan';        guess_location = '30.375321,69.345116';break;\n                        case '6R': country = 'Pakistan';        guess_location = '30.375321,69.345116';break;\n                        case '6S': country = 'Pakistan';        guess_location = '30.375321,69.345116';break;\n                        case '6T': country = 'Sudan';           guess_location = '12.862807,30.217636';break;\n                        case '6U': country = 'Sudan';           guess_location = '12.862807,30.217636';break;\n                        case '6V': country = 'Senegal';         guess_location = '14.497401,-14.452362';break;\n                        case '6W': country = 'Senegal';         guess_location = '14.497401,-14.452362';break;\n                        case '6X': country = 'Madagascar';      guess_location = '-18.766947,46.869107';break;\n                        case '6Y': country = 'Jamaica';         guess_location = '18.109581,-77.297508';break;\n                        case '6Z': country = 'Liberia';         guess_location = '6.428055,-9.429499';break;\n                        case '7A': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '7B': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '7C': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '7D': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '7E': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '7F': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '7G': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '7H': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '7I': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '7J': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '7K': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '7L': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '7M': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '7N': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '7O': country = 'Yemen'; guess_location = '15.552727,48.516388';break;\n                        case '7P': country = 'Lesotho'; guess_location = '-29.609988,28.233608'; break;\n                        case '7Q': country = 'Malawi';  guess_location = '-13.254308,34.301525';break;\n                        case '7R': country = 'Algeria'; guess_location = '28.033886,1.659626';break;\n                        case '7S': country = 'Sweden';  guess_location = '60.128161,18.643501';break;\n                        case '7T': country = 'Algeria'; guess_location = '28.033886,1.659626';break;\n                        case '7U': country = 'Algeria'; guess_location = '28.033886,1.659626';break;\n                        case '7V': country = 'Algeria'; guess_location = '28.033886,1.659626';break;\n                        case '7W': country = 'Algeria'; guess_location = '28.033886,1.659626';break;\n                        case '7X': country = 'Algeria'; guess_location = '28.033886,1.659626';break;\n                        case '7Y': country = 'Algeria'; guess_location = '28.033886,1.659626';break;\n                        case '7Z': country = 'Saudi Arabia'; guess_location = '23.885942,45.079162';break;\n                        case '8A': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '8B': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '8C': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '8D': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '8E': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '8F': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '8G': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '8H': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '8I': country = 'Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case '8J': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '8K': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '8L': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '8M': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '8N': country = 'Japan'; guess_location = '36.204824,138.252924';break;\n                        case '8O': country = 'Botswana'; guess_location = '-22.328474,24.684866';break;\n                        case '8P': country = 'Barbados'; guess_location = '13.193887,-59.543198';break;\n                        case '8Q': country = 'Maldives'; guess_location = '3.202778,73.22068';break;\n                        case '8R': country = 'Guyana'; guess_location = '4.860416,-58.93018';break;\n                        case '8S': country = 'Sweden'; guess_location = '60.128161,18.643501';break;\n                        case '8T': country = 'India'; guess_location = '20.593684,78.96288';break;\n                        case '8U': country = 'India'; guess_location = '20.593684,78.96288';break;\n                        case '8V': country = 'India'; guess_location = '20.593684,78.96288';break;\n                        case '8W': country = 'India'; guess_location = '20.593684,78.96288';break;\n                        case '8X': country = 'India'; guess_location = '20.593684,78.96288';break;\n                        case '8Y': country = 'India'; guess_location = '20.593684,78.96288';break;\n                        case '8Z': country = 'Saudi Arabia';   guess_location = '23.885942,45.079162';break;\n                        case '9A': country = 'Croatia';        guess_location = '45.1,15.2';break;\n                        case '9B': country = 'Iran';           guess_location = '32.427908,53.688046';break;\n                        case '9C': country = 'Iran';           guess_location = '32.427908,53.688046';break;\n                        case '9D': country = 'Iran';           guess_location = '32.427908,53.688046';break;\n                        case '9E': country = 'Ethiopia';       guess_location = '9.145,40.489673';break;\n                        case '9F': country = 'Ethiopia';       guess_location = '9.145,40.489673';break;\n                        case '9G': country = 'Ghana';          guess_location = '7.946527,-1.023194';break;\n                        case '9H': country = 'Malta';          guess_location = '35.937496,14.375416';break;\n                        case '9I': country = 'Zambia';         guess_location = '-13.133897,27.849332';break;\n                        case '9J': country = 'Zambia';         guess_location = '-13.133897,27.849332';break;\n                        case '9K': country = 'Kuwait';         guess_location = '29.31166,47.481766';break;\n                        case '9L': country = 'Sierra Leone';   guess_location = '8.460555,-11.779889';break;\n                        case '9M': country = 'Malaysia';       guess_location = '4.210484,101.975766';break;\n                        case '9N': country = 'Nepal';          guess_location = '28.394857,84.124008';break;\n                        case '9O': country = 'D.R. Congo'; guess_location = '-4.038333,21.758664';break;\n                        case '9P': country = 'D.R. Congo'; guess_location = '-4.038333,21.758664';break;\n                        case '9Q': country = 'D.R. Congo'; guess_location = '-4.038333,21.758664';break;\n                        case '9R': country = 'D.R. Congo'; guess_location = '-4.038333,21.758664';break;\n                        case '9S': country = 'D.R. Congo'; guess_location = '-4.038333,21.758664';break;\n                        case '9T': country = 'D.R. Congo'; guess_location = '-4.038333,21.758664';break;\n                        case '9U': country = 'Burundi';        guess_location = '-3.373056,29.918886'; break;\n                        case '9V': country = 'Singapore';      guess_location = '1.352083,103.819836';break;\n                        case '9W': country = 'Malaysia';       guess_location = '4.210484,101.975766';break;\n                        case '9X': country = 'Rwanda';         guess_location = '-1.940278,29.873888';break;\n                        case '9Y': country = 'Trinidad and Tobago'; guess_location = '10.691803,-61.222503';break;\n                        case '9Z': country = 'Trinidad and Tobago'; guess_location = '10.691803,-61.222503';break;\n        \n                        case 'A2': country = ' Botswana';   guess_location = '-22.328474,24.684866'; break;\n                        case 'A3': country = ' Tonga';      guess_location = '-21.178986,-175.198242';break;\n                        case 'A4': country = ' Oman';       guess_location = '21.512583,55.923255';break;\n                        case 'A5': country = ' Bhutan';     guess_location = '27.514162,90.433601'; break;\n                        case 'A6': country = ' United Arab Emirates'; guess_location = '23.424076,53.847818'; break;\n                        case 'A7': country = ' Qatar';      guess_location = '25.354826,51.183884';break;\n                        case 'A8': country = ' Liberia';    guess_location = '6.428055,-9.429499';break;\n                        case 'A9': country = ' Bahrain';    guess_location = '25.930414,50.637772';break;\n                        case 'AA': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AB': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AC': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AD': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AE': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AF': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AG': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AH': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AI': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AJ': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AK': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AL': country = ' United States'; guess_location = '37.09024,-95.712891';break;\n                        case 'AM': country = ' Spain';      guess_location = '40.463667,-3.74922';break;\n                        case 'AN': country = ' Spain';      guess_location = '40.463667,-3.74922';break;\n                        case 'AO': country = ' Spain';      guess_location = '40.463667,-3.74922';break;\n                        case 'AP': country = ' Pakistan'; guess_location = '30.375321;69.345116'; break;\n                        case 'AQ': country = ' Pakistan'; guess_location = '30.375321;69.345116'; break;\n                        case 'AR': country = ' Pakistan'; guess_location = '30.375321;69.345116'; break;\n                        case 'AS': country = ' Pakistan'; guess_location = '30.375321;69.345116'; break;\n                        case 'AT': country = ' India'; guess_location = '20.593684,78.96288';break;\n                        case 'AU': country = ' India'; guess_location = '20.593684,78.96288';break;\n                        case 'AV': country = ' India'; guess_location = '20.593684,78.96288';break;\n                        case 'AW': country = ' India'; guess_location = '20.593684,78.96288';break;\n                        case 'AX': country = ' Australia'; guess_location = '-25.274398,133.775136';break;\n                        case 'AY': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'AZ': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n            \n                        case 'BM': country = ' Taiwan'; guess_location = '23.69781,120.960515';break;\n                        case 'BN': country = ' Taiwan'; guess_location = '23.69781,120.960515';break;\n                        case 'BO': country = ' Taiwan'; guess_location = '23.69781,120.960515';break;\n                        case 'BP': country = ' Taiwan'; guess_location = '23.69781,120.960515';break;\n                        case 'BQ': country = ' Taiwan'; guess_location = '23.69781,120.960515';break;\n                        case 'BU': country = ' Taiwan'; guess_location = '23.69781,120.960515';break;\n                        case 'BV': country = ' Taiwan'; guess_location = '23.69781,120.960515';break;\n                        case 'BW': country = ' Taiwan'; guess_location = '23.69781,120.960515';break;\n                        case 'BX': country = ' Taiwan'; guess_location = '23.69781,120.960515';break;\n            \n                        case 'C2': country = ' Nauru';      guess_location = '-0.522778,166.931503';break;\n                        case 'C3': country = ' Andorra';    guess_location = '42.546245,1.601554';break;\n                        case 'C4': country = ' Cyprus';     guess_location = '35.126413,33.429859';break;\n                        case 'C5': country = ' The Gambia'; guess_location = '13.443182,-15.310139';break;\n                        case 'C6': country = ' Bahamas';    guess_location = '25.03428,-77.39628';break;\n                        case 'C7': country = ' World Meteorological Organization (non-geographical)'; break;\n                        case 'C8': country = ' Mozambique'; guess_location = '-18.665695,35.529562';break;\n                        case 'C9': country = ' Mozambique'; guess_location = '-18.665695,35.529562';break;\n                        case 'CA': country = ' Chile'; guess_location = '-35.675147,-71.542969';break;\n                        case 'CB': country = ' Chile'; guess_location = '-35.675147,-71.542969';break;\n                        case 'CC': country = ' Chile'; guess_location = '-35.675147,-71.542969';break;\n                        case 'CD': country = ' Chile'; guess_location = '-35.675147,-71.542969';break;\n                        case 'CE': country = ' Chile'; guess_location = '-35.675147,-71.542969';break;\n                        case 'CF': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'CG': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'CH': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'CI': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'CJ': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'CK': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'CL': country = ' Cuba';   guess_location = '21.521757,-77.781167';break;\n                        case 'CM': country = ' Cuba';   guess_location = '21.521757,-77.781167';break;\n                        case 'CN': country = ' Morocco';guess_location = '31.791702,-7.09262';break;\n                        case 'CO': country = ' Cuba';       guess_location = '21.521757,-77.781167';break;\n                        case 'CP': country = ' Bolivia';    guess_location = '-16.290154,-63.588653';break;\n                        case 'CQ': country = ' Portugal';   guess_location = '39.399872,-8.224454'; break;\n                        case 'CR': country = ' Portugal';   guess_location = '39.399872,-8.224454'; break;\n                        case 'CS': country = ' Portugal';   guess_location = '39.399872,-8.224454'; break;\n                        case 'CT': country = ' Portugal';   guess_location = '39.399872,-8.224454'; break;\n                        case 'CU': country = ' Portugal';   guess_location = '39.399872,-8.224454'; break;\n                        case 'CV': country = ' Uruguay'; guess_location = '-32.522779,-55.765835';break;\n                        case 'CW': country = ' Uruguay'; guess_location = '-32.522779,-55.765835';break;\n                        case 'CX': country = ' Uruguay'; guess_location = '-32.522779,-55.765835';break;\n                        case 'CY': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'CZ': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                    \n                        case 'D0': country = ' Donetsk';    guess_location = '47.99721,37.80531';break;\n                        case 'D1': country = ' Donetsk';    guess_location = '47.99721,37.80531';break;\n                        case 'D2': country = ' Angola';     guess_location = '-11.202692,17.873887';break;\n                        case 'D3': country = ' Angola';     guess_location = '-11.202692,17.873887';break;\n                        case 'D4': country = ' Cape Verde'; guess_location = '16.002082,-24.013197'; break;\n                        case 'D5': country = ' Liberia';    guess_location = '6.428055,-9.429499';break;\n                        case 'D6': country = ' Comoros';    guess_location = '-11.875001,43.872219';break;\n                        case 'D7': country = ' South Korea'; guess_location = '35.907757,127.766922';break;\n                        case 'D8': country = ' South Korea'; guess_location = '35.907757,127.766922';break;\n                        case 'D9': country = ' South Korea'; guess_location = '35.907757,127.766922';break;\n                        case 'DA': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DB': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DC': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DD': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DE': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DF': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DG': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DH': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DI': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DJ': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DK': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DL': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DM': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DN': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DO': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DP': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DQ': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DR': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'DS': country = ' South Korea'; guess_location = '35.907757,127.766922';break;\n                        case 'DT': country = ' South Korea'; guess_location = '35.907757,127.766922';break;\n                        case 'DU': country = ' Philippines'; guess_location = '12.879721,121.774017';break;\n                        case 'DV': country = ' Philippines'; guess_location = '12.879721,121.774017';break;\n                        case 'DW': country = ' Philippines'; guess_location = '12.879721,121.774017';break;\n                        case 'DX': country = ' Philippines'; guess_location = '12.879721,121.774017';break;\n                        case 'DY': country = ' Philippines'; guess_location = '12.879721,121.774017';break;\n                        case 'DZ': country = ' Philippines'; guess_location = '12.879721,121.774017';break;\n            \n                        case 'E2': country = ' Thailand';       guess_location = '15.870032,100.992541';break;\n                        case 'E3': country = ' Eritrea';        guess_location = '15.179384,39.782334'; break;\n                        case 'E4': country = ' Palestine';      guess_location = '31.952162,35.233154'; break;\n                        case 'E5': country = ' Cook Islands';   guess_location = '-21.236736,-159.777671';break;\n                        case 'E6': country = ' Niue';           guess_location = '-19.054445,-169.867233'; break;\n                        case 'E7': country = ' Bosnia and Herzegovina'; guess_location = '43.915886,17.679076';break;\n                        case 'EA': country = ' Spain'; guess_location = '40.463667,-3.74922';break;\n                        case 'EB': country = ' Spain'; guess_location = '40.463667,-3.74922';break;\n                        case 'EC': country = ' Spain'; guess_location = '40.463667,-3.74922';break;\n                        case 'ED': country = ' Spain'; guess_location = '40.463667,-3.74922';break;\n                        case 'EE': country = ' Spain'; guess_location = '40.463667,-3.74922';break;\n                        case 'EF': country = ' Spain'; guess_location = '40.463667,-3.74922';break;\n                        case 'EG': country = ' Spain'; guess_location = '40.463667,-3.74922';break;\n                        case 'EH': country = ' Spain'; guess_location = '40.463667,-3.74922';break;\n                        case 'EI': country = ' Ireland'; guess_location = '53.41291,-8.24389';break;\n                        case 'EJ': country = ' Ireland'; guess_location = '53.41291,-8.24389';break;\n                        case 'EK': country = ' Armenia'; guess_location = '40.069099,45.038189';break;\n                        case 'EL': country = ' Liberia'; guess_location = '6.428055,-9.429499';break;\n                        case 'EM': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'EN': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'EO': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'EP': country = ' Iran';       guess_location = '32.427908,53.688046'; break;\n                        case 'EQ': country = ' Iran';       guess_location = '32.427908,53.688046'; break;\n                        case 'ER': country = ' Moldova';    guess_location = '47.411631,28.369885';break;\n                        case 'ES': country = ' Estonia';    guess_location = '58.595272,25.013607';break;\n                        case 'ET': country = ' Ethiopia';   guess_location = '9.145,40.489673'; break;\n                        case 'EU': country = ' Belarus';    guess_location = '53.709807,27.953389';break;\n                        case 'EV': country = ' Belarus';    guess_location = '53.709807,27.953389';break;\n                        case 'EW': country = ' Belarus';    guess_location = '53.709807,27.953389';break;\n                        case 'EX': country = ' Kyrgyzstan'; guess_location = '41.20438,74.766098';break;\n                        case 'EY': country = ' Tajikistan'; guess_location = '38.861034,71.276093';break;\n                        case 'EZ': country = ' Turkmenistan'; guess_location = '38.969719,59.556278';break;\n            \n                        case 'H2': country = ' Cyprus';         guess_location = '35.126413,33.429859';break;\n                        case 'H3': country = ' Panama';         guess_location = '8.537981,-80.782127';break;\n                        case 'H4': country = ' Solomon Islands';guess_location = '-9.64571,160.156194';break;\n                        case 'H5': country = ' Bophuthatswana'; guess_location = '-30.559482,22.937506';break;\n                        case 'H6': country = ' Nicaragua';  guess_location = '12.865416,-85.207229';break;\n                        case 'H7': country = ' Nicaragua';  guess_location = '12.865416,-85.207229';break;\n                        case 'H8': country = ' Panama';     guess_location = '8.537981,-80.782127';break;\n                        case 'H9': country = ' Panama';     guess_location = '8.537981,-80.782127';break;\n                        case 'HA': country = ' Hungary';    guess_location = '47.162494,19.503304';break;\n                        case 'HB': country = ' Switzerland';guess_location = '46.818188,8.227512';break;\n                        case 'HC': country = ' Ecuador';    guess_location = '-1.831239,-78.183406';break;\n                        case 'HD': country = ' Ecuador';    guess_location = '-1.831239,-78.183406';break;\n                        case 'HE': country = ' Switzerland';guess_location = '46.818188,8.227512';break;\n                        case 'HF': country = ' Poland';     guess_location = '51.919438,19.145136';break;\n                        case 'HG': country = ' Hungary';    guess_location = '47.162494,19.503304';break;\n                        case 'HH': country = ' Haiti';      guess_location = '18.971187,-72.285215';break;\n                        case 'HI': country = ' Dominican Republic'; guess_location = '18.735693,-70.162651'; break;\n                        case 'HJ': country = ' Colombia';   guess_location = '4.570868,-74.297333';break;\n                        case 'HK': country = ' Colombia';   guess_location = '4.570868,-74.297333';break;\n                        case 'HL': country = ' South Korea';guess_location = '35.907757,127.766922';break;\n                        case 'HM': country = ' North Korea';guess_location = '40.339852,127.510093';break;\n                        case 'HN': country = ' Iraq';       guess_location = '33.223191,43.679291';break;\n                        case 'HO': country = ' Panama';     guess_location = '8.537981,-80.782127';break;\n                        case 'HP': country = ' Panama';     guess_location = '8.537981,-80.782127';break;\n                        case 'HQ': country = ' Honduras';   guess_location = '15.199999,-86.241905';break;\n                        case 'HR': country = ' Honduras';   guess_location = '15.199999,-86.241905';break;\n                        case 'HS': country = ' Thailand';   guess_location = '15.870032,100.992541';break;\n                        case 'HT': country = ' Nicaragua';  guess_location = '12.865416,-85.207229';break;\n                        case 'HU': country = ' El Salvador';    guess_location = '13.794185,-88.89653';break;\n                        case 'HV': country = ' Vatican City';   guess_location = '41.902916,12.453389';break;\n                        case 'HW': country = ' France / Territories'; guess_location = '46.227638,2.213749';break;\n                        case 'HX': country = ' France / Territories'; guess_location = '46.227638,2.213749';break;\n                        case 'HY': country = ' France / Territories'; guess_location = '46.227638,2.213749';break;\n                        case 'HZ': country = ' Saudi Arabia'; guess_location = '23.885942,45.079162';break;\n            \n                        case 'J2': country = ' Djibouti';       guess_location = '11.825138,42.590275'; break;\n                        case 'J3': country = ' Grenada';        guess_location = '12.262776,-61.604171';break;\n                        case 'J4': country = ' Greece';         guess_location = '39.074208,21.824312';break;\n                        case 'J5': country = ' Guinea-Bissau';  guess_location = '11.803749,-15.180413';break;\n                        case 'J6': country = ' Saint Lucia';    guess_location = '13.909444,-60.978893'; break;\n                        case 'J7': country = ' Dominica';       guess_location = '15.414999,-61.370976';break;\n                        case 'J8': country = ' Saint Vincent / Grenadines'; guess_location = '12.984305,-61.287228';break;\n                        case 'JA': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JB': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JC': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JD': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JE': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JF': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JG': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JH': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JI': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JJ': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JK': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JL': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JM': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JN': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JO': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JP': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JQ': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JR': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JS': country = ' Japan'; guess_location = '36.204824,138.252924';break;\n                        case 'JT': country = ' Mongolia'; guess_location = '46.862496,103.846656';break;\n                        case 'JU': country = ' Mongolia'; guess_location = '46.862496,103.846656';break;\n                        case 'JV': country = ' Mongolia'; guess_location = '46.862496,103.846656';break;\n                        case 'JW': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'JX': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'JY': country = ' Jordan'; guess_location = '30.585164,36.238414';break;\n                        case 'JZ': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;                   \n    \n                        case 'L2': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'L3': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'L4': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'L5': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'L6': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'L7': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'L8': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'L9': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LA': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LB': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LC': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LD': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LE': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LF': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LG': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LH': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LI': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LJ': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LK': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LL': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LM': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LN': country = ' Norway'; guess_location = '60.472024,8.468946';break;\n                        case 'LO': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LP': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LQ': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LR': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LS': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LT': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LU': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LV': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LW': country = ' Argentina'; guess_location = '-38.416097,-63.616672';break;\n                        case 'LX': country = ' Luxembourg'; guess_location = '49.815273,6.129583';break;\n                        case 'LY': country = ' Lithuania';  guess_location = '55.169438,23.881275';break;\n                        case 'LZ': country = ' Bulgaria';   guess_location = '42.733883,25.48583';break;                \n    \n                        case 'O1': country = ' South Ossetia'; guess_location = '42.37708,44.145833';break;\n                        case 'OA': country = ' Peru'; guess_location = '-9.189967,-75.015152';break;\n                        case 'OB': country = ' Peru'; guess_location = '-9.189967,-75.015152';break;\n                        case 'OC': country = ' Peru'; guess_location = '-9.189967,-75.015152';break;\n                        case 'OD': country = ' Lebanon'; guess_location = '33.854721,35.862285';break;\n                        case 'OE': country = ' Austria'; guess_location = '47.516231,14.550072';break;\n                        case 'OF': country = ' Finland'; guess_location = '61.92411,25.748151';break;\n                        case 'OG': country = ' Finland'; guess_location = '61.92411,25.748151';break;\n                        case 'OH': country = ' Finland'; guess_location = '61.92411,25.748151';break;\n                        case 'OI': country = ' Finland'; guess_location = '61.92411,25.748151';break;\n                        case 'OJ': country = ' Finland'; guess_location = '61.92411,25.748151';break;\n                        case 'OK': country = ' Czech Republic'; guess_location = '49.817492,15.472962'; break;\n                        case 'OL': country = ' Czech Republic'; guess_location = '49.817492,15.472962'; break;\n                        case 'OM': country = ' Slovakia'; guess_location = '48.669026,19.699024'; break;\n                        case 'ON': country = ' Belgium'; guess_location = '50.503887,4.469936';break;\n                        case 'OO': country = ' Belgium'; guess_location = '50.503887,4.469936';break;\n                        case 'OP': country = ' Belgium'; guess_location = '50.503887,4.469936';break;\n                        case 'OQ': country = ' Belgium'; guess_location = '50.503887,4.469936';break;\n                        case 'OR': country = ' Belgium'; guess_location = '50.503887,4.469936';break;\n                        case 'OS': country = ' Belgium'; guess_location = '50.503887,4.469936';break;\n                        case 'OT': country = ' Belgium'; guess_location = '50.503887,4.469936';break;\n                        case 'OU': country = ' Denmark'; guess_location = '56.26392,9.501785';break;\n                        case 'OV': country = ' Denmark'; guess_location = '56.26392,9.501785';break;\n                        case 'OW': country = ' Denmark'; guess_location = '56.26392,9.501785';break;\n                        case 'OX': country = ' Denmark'; guess_location = '56.26392,9.501785';break;\n                        case 'OY': country = ' Denmark'; guess_location = '56.26392,9.501785';break;\n                        case 'OZ': country = ' Denmark'; guess_location = '56.26392,9.501785';break;                        \n    \n                        case 'P2': country = ' Papua New Guinea'; guess_location = '-6.314993,143.95555';break;\n                        case 'P3': country = ' Cyprus'; guess_location = '35.126413,33.429859';break;\n                        case 'P4': country = ' Aruba';  guess_location = '12.52111,-69.968338';break;\n                        case 'P5': country = ' North Korea'; guess_location = '40.339852,127.510093';break;\n                        case 'P6': country = ' North Korea'; guess_location = '40.339852,127.510093';break;\n                        case 'P7': country = ' North Korea'; guess_location = '40.339852,127.510093';break;\n                        case 'P8': country = ' North Korea'; guess_location = '40.339852,127.510093';break;\n                        case 'P9': country = ' North Korea'; guess_location = '40.339852,127.510093';break;\n                        case 'PA': country = ' Netherlands'; guess_location = '52.132633,5.291266';break;\n                        case 'PB': country = ' Netherlands'; guess_location = '52.132633,5.291266';break;\n                        case 'PC': country = ' Netherlands'; guess_location = '52.132633,5.291266';break;\n                        case 'PD': country = ' Netherlands'; guess_location = '52.132633,5.291266';break;\n                        case 'PE': country = ' Netherlands'; guess_location = '52.132633,5.291266';break;\n                        case 'PF': country = ' Netherlands'; guess_location = '52.132633,5.291266';break;\n                        case 'PG': country = ' Netherlands'; guess_location = '52.132633,5.291266';break;\n                        case 'PH': country = ' Netherlands'; guess_location = '52.132633,5.291266';break;\n                        case 'PI': country = ' Netherlands'; guess_location = '52.132633,5.291266';break;\n                        case 'PJ': country = ' Netherlands / Antilles'; guess_location = '12.226079,-69.060087'; break;\n                        case 'PK': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'PL': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'PM': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'PN': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'PO': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'PP': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PQ': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PR': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PS': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PT': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PU': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PV': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PW': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PX': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PY': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'PZ': country = ' Suriname'; guess_location = '3.919305,-56.027783';break;     \n    \n                        case 'S0': country = ' Western Sahara'; guess_location = '24.215527,-12.885834';break;\n                        case 'S2': country = ' Bangladesh';     guess_location = '23.684994,90.356331';break;\n                        case 'S3': country = ' Bangladesh';     guess_location = '23.684994,90.356331';break;\n                        case 'S5': country = ' Slovenia';       guess_location = '46.151241,14.995463';break;\n                        case 'S6': country = ' Singapore';      guess_location = '1.352083,103.819836';break;\n                        case 'S7': country = ' Seychelles';     guess_location = '-4.679574,55.491977';break;\n                        case 'S8': country = ' South Africa';   guess_location = '-30.559482,22.937506';break;\n                        case 'S9': country = ' Sao Tome and Principe'; guess_location = '0.18636,6.613081';break;\n                        case 'SA': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SB': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SC': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SD': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SE': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SF': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SG': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SH': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SI': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SJ': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SK': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SL': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SM': country = ' Sweden'; guess_location = '60.128161,18.643501';break;\n                        case 'SN': country = ' Poland'; guess_location = '51.919438,19.145136';break;\n                        case 'SO': country = ' Poland'; guess_location = '51.919438,19.145136';break;\n                        case 'SP': country = ' Poland'; guess_location = '51.919438,19.145136';break;\n                        case 'SQ': country = ' Poland'; guess_location = '51.919438,19.145136';break;\n                        case 'SR': country = ' Poland'; guess_location = '51.919438,19.145136';break;\n                        case 'SS': country = ' Sudan'; guess_location = '12.862807,30.217636';break;\n                        case 'ST': country = ' Sudan'; guess_location = '12.862807,30.217636';break;\n                        case 'SU': country = ' Egypt'; guess_location = '26.820553,30.802498';break;\n                        case 'SV': country = ' Greece'; guess_location = '39.074208,21.824312';break;\n                        case 'SW': country = ' Greece'; guess_location = '39.074208,21.824312';break;\n                        case 'SX': country = ' Greece'; guess_location = '39.074208,21.824312';break;\n                        case 'SY': country = ' Greece'; guess_location = '39.074208,21.824312';break;\n                        case 'SZ': country = ' Greece'; guess_location = '39.074208,21.824312';break;           \n\n                        case 'T0': country = ' Principality of Seborga'; guess_location = '43.8317,7.7037';break;\n                        case 'T1': country = ' Transnistria';           guess_location = '47.2153,29.4638';break;\n                        case 'T2': country = ' Tuvalu';                 guess_location = '-7.109535,177.64933';break;\n                        case 'T3': country = ' Kiribati';               guess_location = '-3.370417,-168.734039';break;\n                        case 'T4': country = ' Cuba';                   guess_location = '21.521757,-77.781167'; break;\n                        case 'T5': country = ' Somalia';                guess_location = '5.152149,46.199616'; break;\n                        case 'T6': country = ' Afghanistan';            guess_location = '33.93911,67.709953';break;\n                        case 'T7': country = ' San Marino';             guess_location = '43.94236,12.457777';break;\n                        case 'T8': country = ' Palau';                  guess_location = '7.51498,134.58252';break;\n                        case 'TA': country = ' Turkey';                 guess_location = '38.963745,35.243322';break;\n                        case 'TB': country = ' Turkey';                 guess_location = '38.963745,35.243322';break;\n                        case 'TC': country = ' Turkey';                 guess_location = '38.963745,35.243322';break;\n                        case 'TD': country = ' Guatemala';              guess_location = '15.783471,-90.230759'; break;\n                        case 'TE': country = ' Costa Rica';             guess_location = '9.748917,-83.753428';break;\n                        case 'TF': country = ' Iceland';                guess_location = '64.963051,-19.020835'; break;\n                        case 'TG': country = ' Guatemala';              guess_location = '15.783471,-90.230759'; break;\n                        case 'TH': country = ' France / Territories';   guess_location = '46.227638,2.213749';break;\n                        case 'TI': country = ' Costa Rica';             guess_location = '9.748917,-83.753428';break;\n                        case 'TJ': country = ' Cameroon';               guess_location = '7.369722,12.354722';break;\n                        case 'TK': country = ' France / Territories';   guess_location = '46.227638,2.213749';break;\n                        case 'TL': country = ' Central African Rep.';   guess_location = '6.611111,20.939444'; break;\n                        case 'TM': country = ' France / Territories';   guess_location = '46.227638,2.213749';break;\n                        case 'TN': country = ' Congo';                  guess_location = '-4.038333,21.758664'; break;\n                        case 'TO': country = ' France / Territories';   guess_location = '46.227638,2.213749';break;\n                        case 'TP': country = ' France / Territories';   guess_location = '46.227638,2.213749';break;\n                        case 'TQ': country = ' France / Territories';   guess_location = '46.227638,2.213749';break;\n                        case 'TR': country = ' Gabon';                  guess_location = '-0.803689,11.609444';break;\n                        case 'TS': country = ' Tunisia';                guess_location = '33.886917,9.537499';break;\n                        case 'TT': country = ' Chad';                   guess_location = '15.454166,18.732207';break;\n                        case 'TU': country = ' Ivory Coast';            guess_location = '7.5400,-5.5471';break;\n                        case 'TV': country = ' France / Territories';   guess_location = '46.227638,2.213749';break;\n                        case 'TW': country = ' France / Territories';   guess_location = '46.227638,2.213749';break;\n                        case 'TX': country = ' France / Territories';   guess_location = '46.227638,2.213749';break;\n                        case 'TY': country = ' Benin';                  guess_location = '9.30769,2.315834';break;\n                        case 'TZ': country = ' Mali';                   guess_location = '17.570692,-3.996166';break;           \n\n                        case 'UA': country = ' Russia'; guess_location = '61.52401,105.318756';break;\n                        case 'UB': country = ' Russia'; guess_location = '61.52401,105.318756';break;\n                        case 'UC': country = ' Russia'; guess_location = '61.52401,105.318756';break;\n                        case 'UD': country = ' Russia'; guess_location = '61.52401,105.318756';break;\n                        case 'UE': country = ' Russia'; guess_location = '61.52401,105.318756';break;\n                        case 'UF': country = ' Russia'; guess_location = '61.52401,105.318756';break;\n                        case 'UG': country = ' Russia'; guess_location = '61.52401,105.318756';break;\n                        case 'UH': country = ' Russia'; guess_location = '61.52401,105.318756';break;\n                        case 'UI': country = ' Russia'; guess_location = '61.52401,105.318756';break;\n                        case 'UJ': country = ' Uzbekistan'; guess_location = '41.377491,64.585262';break;\n                        case 'UK': country = ' Uzbekistan'; guess_location = '41.377491,64.585262';break;\n                        case 'UL': country = ' Uzbekistan'; guess_location = '41.377491,64.585262';break;\n                        case 'UM': country = ' Uzbekistan'; guess_location = '41.377491,64.585262';break;\n                        case 'UN': country = ' Kazakhstan'; guess_location = '48.019573,66.923684';break;\n                        case 'UO': country = ' Kazakhstan'; guess_location = '48.019573,66.923684';break;\n                        case 'UP': country = ' Kazakhstan'; guess_location = '48.019573,66.923684';break;\n                        case 'UQ': country = ' Kazakhstan'; guess_location = '48.019573,66.923684';break;\n                        case 'UR': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'US': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'UT': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'UU': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'UV': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'UW': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'UX': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'UY': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n                        case 'UZ': country = ' Ukraine'; guess_location = '48.379433,31.16558';break;\n        \n                        case 'V2': country = ' Antigua and Barbuda';        guess_location = '17.060816,-61.796428';break;\n                        case 'V3': country = ' Belize';                     guess_location = '17.189877,-88.49765';break;\n                        case 'V4': country = ' Saint Kitts and Nevis';      guess_location = '17.357822,-62.782998';break;\n                        case 'V5': country = ' Namibia';                    guess_location = '-22.95764,18.49041';break;\n                        case 'V6': country = ' Fed. States of Micronesia';  guess_location = '7.425554,150.550812';break;\n                        case 'V7': country = ' Marshall Islands';           guess_location = '7.131474,171.184478';break;\n                        case 'V8': country = ' Brunei'; guess_location = '4.535277,114.727669';break;\n                        case 'VA': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'VB': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'VC': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'VD': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'VE': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'VF': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'VG': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'VH': country = ' Australia'; guess_location = '-25.274398,133.775136';break;\n                        case 'VI': country = ' Australia'; guess_location = '-25.274398,133.775136';break;\n                        case 'VJ': country = ' Australia'; guess_location = '-25.274398,133.775136';break;\n                        case 'VK': country = ' Australia'; guess_location = '-25.274398,133.775136';break;\n                        case 'VL': country = ' Australia'; guess_location = '-25.274398,133.775136';break;\n                        case 'VM': country = ' Australia'; guess_location = '-25.274398,133.775136';break;\n                        case 'VN': country = ' Australia'; guess_location = '-25.274398,133.775136';break;\n                        case 'VO': country = ' Canada (Newfoundland)';          guess_location = '56.130366,-106.346771';break;\n                        case 'VP': country = ' United Kingdom / Territories';   guess_location = '55.378051,-3.435973';break;\n                        case 'VQ': country = ' United Kingdom / Territories';   guess_location = '55.378051,-3.435973';break;\n                        case 'VR': country = ' Hong Kong';                      guess_location = '22.396428,114.109497'; break;\n                        case 'VS': country = ' United Kingdom';                 guess_location = '55.378051,-3.435973';break;\n                        case 'VT': country = ' India';  guess_location = '20.593684,78.96288'; break;\n                        case 'VU': country = ' India';  guess_location = '20.593684,78.96288'; break;\n                        case 'VV': country = ' India';  guess_location = '20.593684,78.96288'; break;\n                        case 'VW': country = ' India';  guess_location = '20.593684,78.96288'; break;\n                        case 'VX': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'VY': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'VZ': country = ' Australia';  guess_location = '-25.274398,133.775136';break;\n        \n                        case 'XA': country = ' Mexico'; guess_location = '23.634501,-102.552784';break;\n                        case 'XB': country = ' Mexico'; guess_location = '23.634501,-102.552784';break;\n                        case 'XC': country = ' Mexico'; guess_location = '23.634501,-102.552784';break;\n                        case 'XD': country = ' Mexico'; guess_location = '23.634501,-102.552784';break;\n                        case 'XE': country = ' Mexico'; guess_location = '23.634501,-102.552784';break;\n                        case 'XF': country = ' Mexico'; guess_location = '23.634501,-102.552784';break;\n                        case 'XG': country = ' Mexico'; guess_location = '23.634501,-102.552784';break;\n                        case 'XH': country = ' Mexico'; guess_location = '23.634501,-102.552784';break;\n                        case 'XI': country = ' Mexico'; guess_location = '23.634501,-102.552784';break;\n                        case 'XJ': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'XK': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'XL': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'XM': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'XN': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'XO': country = ' Canada'; guess_location = '56.130366,-106.346771';break;\n                        case 'XP': country = ' Denmark';guess_location = '56.26392,9.501785';break;\n                        case 'XQ': country = ' Chile'; guess_location = '-35.675147,-71.542969';break;\n                        case 'XR': country = ' Chile'; guess_location = '-35.675147,-71.542969';break;\n                        case 'XS': country = ' P.Rep. of China';guess_location = '35.86166,104.195397';break;\n                        case 'XT': country = ' Burkina Faso';   guess_location = '12.238333,-1.561593'; break;\n                        case 'XU': country = ' Cambodia';       guess_location = '12.565679,104.990963';break;\n                        case 'XV': country = ' Vietnam';        guess_location = '14.058324,108.277199';break;\n                        case 'XW': country = ' Laos';           guess_location = '19.85627,102.495496';break;\n                        case 'XX': country = ' Macau';          guess_location = '22.1987,113.5439';break;\n                        case 'XY': country = ' Burma';          guess_location = '21.9162,95.9560'; break;\n                        case 'XZ': country = ' Burma';          guess_location = '21.9162,95.9560'; break;      \n    \n                        case 'Y2': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'Y3': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'Y4': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'Y5': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'Y6': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'Y7': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'Y8': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'Y9': country = ' Germany'; guess_location = '51.165691,10.451526';break;\n                        case 'YA': country = ' Afghanistan'; guess_location = '33.93911,67.709953';break;\n                        case 'YB': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'YC': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'YD': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'YE': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'YF': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'YG': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'YH': country = ' Indonesia'; guess_location = '-0.789275,113.921327';break;\n                        case 'YI': country = ' Iraq';       guess_location = '33.223191,43.679291';break;\n                        case 'YJ': country = ' Vanuatu';    guess_location = '-15.376706,166.959158';break;\n                        case 'YK': country = ' Syria';      guess_location ='34.802075,38.996815';break;\n                        case 'YL': country = ' Latvia';     guess_location = '56.879635,24.603189';break;\n                        case 'YM': country = ' Turkey';     guess_location = '38.963745,35.243322';break;\n                        case 'YN': country = ' Nicaragua';  guess_location = '12.865416,-85.207229';break;\n                        case 'YO': country = ' Romania';    guess_location = '45.943161,24.96676';break;\n                        case 'YP': country = ' Romania';    guess_location = '45.943161,24.96676';break;\n                        case 'YQ': country = ' Romania';    guess_location = '45.943161,24.96676';break;\n                        case 'YR': country = ' Romania';    guess_location = '45.943161,24.96676';break;\n                        case 'YS': country = ' El Salvador';guess_location = '13.794185,-88.89653';break;\n                        case 'YT': country = ' Serbia';     guess_location = '44.016521,21.005859';break;\n                        case 'YU': country = ' Serbia';     guess_location = '44.016521,21.005859';break;\n                        case 'YV': country = ' Venezuela'; guess_location = '6.42375,-66.58973';break;\n                        case 'YW': country = ' Venezuela'; guess_location = '6.42375,-66.58973';break;  \n                        case 'YX': country = ' Venezuela'; guess_location = '6.42375,-66.58973';break;\n                        case 'YY': country = ' Venezuela'; guess_location = '6.42375,-66.58973';break;      \n\n                        case 'Z2': country = ' Zimbabwe';               guess_location = '-19.015438,29.154857';break;\n                        case 'Z3': country = ' Republic of Macedonia';  guess_location = '41.608635,21.745275';break;\n                        case 'Z6': country = ' Kosovo';                 guess_location = '42.602636,20.902977';break;\n                        case 'Z8': country = ' South Sudan';            guess_location = '12.862807,30.217636';break;\n                        case 'ZA': country = ' Albania';                guess_location = '41.153332,20.168331';break;\n                        case 'ZB': country = ' United Kingdom / Territories'; guess_location = '55.378051,-3.435973';break;\n                        case 'ZC': country = ' United Kingdom / Territories'; guess_location = '55.378051,-3.435973';break;\n                        case 'ZD': country = ' United Kingdom / Territories'; guess_location = '55.378051,-3.435973';break;\n                        case 'ZE': country = ' United Kingdom / Territories'; guess_location = '55.378051,-3.435973';break;\n                        case 'ZF': country = ' United Kingdom / Territories'; guess_location = '55.378051,-3.435973';break;\n                        case 'ZG': country = ' United Kingdom / Territories'; guess_location = '55.378051,-3.435973';break;\n                        case 'ZH': country = ' United Kingdom / Territories'; guess_location = '55.378051,-3.435973';break;\n                        case 'ZI': country = ' United Kingdom / Territories'; guess_location = '55.378051,-3.435973';break;\n                        case 'ZJ': country = ' United Kingdom / Territories'; guess_location = '55.378051,-3.435973';break;\n                        case 'ZK': country = ' New Zealand';                    guess_location = '-40.900557,174.885971';break;\n                        case 'ZL': country = ' New Zealand';                    guess_location = '-40.900557,174.885971';break;\n                        case 'ZM': country = ' New Zealand';                    guess_location = '-40.900557,174.885971';break;\n                        case 'ZN': country = ' United Kingdom / Territories';   guess_location = '55.378051,-3.435973';break;\n                        case 'ZO': country = ' United Kingdom / Territories';   guess_location = '55.378051,-3.435973';break;\n                        case 'ZP': country = ' Paraguay';                       guess_location = '-23.442503,-58.443832';break;\n                        case 'ZQ': country = ' United Kingdom / Territories';   guess_location = '55.378051,-3.435973';break;\n                        case 'ZR': country = ' South Africa'; guess_location = '-30.559482,22.937506';break;\n                        case 'ZS': country = ' South Africa'; guess_location = '-30.559482,22.937506';break;\n                        case 'ZT': country = ' South Africa'; guess_location = '-30.559482,22.937506';break;\n                        case 'ZU': country = ' South Africa'; guess_location = '-30.559482,22.937506';break;\n                        case 'ZV': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'ZW': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'ZX': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'ZY': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                        case 'ZZ': country = ' Brazil'; guess_location = '-14.235004,-51.92528';break;\n                    }\n                }\n\n                if (country === null){\n    \n                    count = 1;\n                    find_this = search_callsign.substring(0,count);\n    \n                    switch (find_this){\n\n                        case '2': country = ' United Kingdom / Territories ';   guess_location = '55.378051,-3.435973';break;\n                        case 'B': country = ' Peoples Republic of China';       guess_location = '35.86166,104.195397';break;\n                        case 'F': country = ' France / Territories';            guess_location = '46.227638,2.213749';break;\n                        case 'G': country = ' United Kingdom / Territories';    guess_location = '55.378051,-3.435973';break;\n                        case 'I': country = ' Italy';                           guess_location = '41.87194,12.56738';break;\n                        case 'K': country = ' United States';                   guess_location = '37.09024,-95.712891';break;\n                        case 'M': country = ' United Kingdom / Territories';    guess_location = '55.378051,-3.435973';break;\n                        case 'N': country = ' United States';                   guess_location = '37.09024,-95.712891';break;\n                        case 'R': country = ' Russia';                          guess_location = '61.52401,105.318756';break;\n                        case 'W': country = ' United States';                   guess_location = '37.09024,-95.712891';break;\n                    }\n                }\n\n\n\n            if (country !== null) { country = country.trim(); } else { country = 'Unknown- Not Found!'; }\n            if (guess_location !== null) { guess_location = guess_location.trim(); } else { guess_location = 'Unknown- Not Found!'; }\n\n\n                if (msg.next_action === 'step_1_start' && msg.packet_type === 'status'){            //\n                                    msg.target_country = country;                                   // Status Message Target\n                                    msg.target_guess_location = guess_location;                     //\n                }\n\n                if (msg.next_action === 'step_1_start' && msg.packet_type === 'message'){           //\n                                    msg.origin_country = country;                                   // Message Origin\n                                    msg.origin_guess_location = guess_location;                     //\n                }\n    \n                if (msg.next_action === 'step_2_start' && msg.packet_type === 'message'){           // Message Target\n                                    msg.target_country = country;                                   //\n                                    msg.target_guess_location = guess_location;                     //\n                }\n\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 340,
        "wires": [
            [
                "2b4c2d23.941f8a",
                "7c2cc79.4af00b8"
            ]
        ]
    },
    {
        "id": "2b4c2d23.941f8a",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "Convert Grid To Coords",
        "func": "\nlat = null; lon = null; this_bearing = null; do_grid_convert = false; do_range_to_location = false;\n\n// Always Kill If This Condition Exist --------------------------\n    auto_kill = false;\n    if (msg.origin_guess_location === 'Unknown'){ msg.origin_bearing = 'none'; msg.origin_bearing_name = 'none'; msg.origin_distance_miles = -1; msg.origin_distance_kilos = -1; return msg;}    \n                // Subprocessing Start\n\n\n\n\n\n                if (msg.next_action === 'step_1_start' && msg.packet_type === 'status'){\n                    \n                        location_for = 'target';\n                    \n                            if (msg.dx_call_grid !== 'Unknown'){\n                                convert_this_grid = msg.dx_call_grid;       // Use True Gridsquare\n                                do_grid_convert = true;                     // Convert True Gridsquare\n                                do_range_to_location = true;\n                            } else {\n                                const myArr = msg.target_guess_location.split(\",\");\n                                    lat = parseFloat(myArr[0]);             // Use Subsituted Lat\n                                    lon = parseFloat(myArr[1]);             // Use Subsituted Long\n                                do_range_to_location = true;\n                            }\n                }\n\n\n\n                if (msg.next_action === 'step_1_start' && msg.packet_type === 'message'){\n                    \n                        location_for = 'origin';\n                    \n                            if (msg.has_origin_gridsquare){\n                                convert_this_grid = msg.origin_gridsquare;  // Use True Gridsquare\n                                do_grid_convert = true;                     // Convert True Gridsquare\n                                do_range_to_location = true;\n                            } else {\n                                const myArr = msg.origin_guess_location.split(\",\");\n                                    lat = parseFloat(myArr[0]);             // Use Subsituted Lat\n                                    lon = parseFloat(myArr[1]);             // Use Subsituted Long\n                                do_range_to_location = true;\n                            }\n                }\n    \n                if (msg.next_action === 'step_2_start' && msg.packet_type === 'message'){\n                    \n                        location_for = 'target';\n                    \n                            if (msg.target_callsign === null){\n                                                                msg.target_bearing = 'none';\n                                                                msg.target_bearing_name = 'none';\n                                                                msg.target_distance_miles = -1;\n                                                                msg.target_distance_kilos = -1;\n                                                                return msg;\n                                                                //auto_kill = true;\n                                \n                            } else {\n    \n                                        if (msg.has_target_gridsquare){\n                                            convert_this_grid = msg.target_gridsquare;\n                                            do_grid_convert = true;\n                                            do_range_to_location = true;\n                                        } else {\n                                            const myArr = msg.target_guess_location.split(\",\");\n                                            lat = parseFloat(myArr[0]);             // Use Subsituted Lat\n                                            lon = parseFloat(myArr[1]);             // Use Subsituted Long\n                                            do_range_to_location = true;\n                                        }\n                            }\n                }\n\n\n\n if (auto_kill){return;}\n\n// End Always Kill If This Condition Exist --------------------------\n\n        var lat, lon;\n        var directions = [\"North\", \"North-East\", \"East\", \"South-East\", \"South\", \"South-West\", \"West\", \"North-West\"];\n    do_work = false;\n\nif (do_grid_convert){\n\n            //convert_this_grid = msg.origin_gridsquare;\n\n        var str_chr_up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        var str_chr_lo = \"abcdefghijklmnopqrstuvwxyz\";\n        var str_num = \"0123456789\";\n        var qth, deg, min, sec;\n\n            convert_this_grid = convert_this_grid.toUpperCase();\n    \n        // Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n            if (convert_this_grid.length != 4) { msg.payload = 'Bad Gridsquare Locator.'; return msg; }\n                    valid_grid = convert_this_grid.match(/[A-R][A-R][0-9]/g);\n            if (!valid_grid) { msg.payload = 'Bad Gridsquare'; return msg;}\n        // Check Gridsquare Format ------------------------------------------------------------------------------------------------------------\n\n        // Start Calculations Now. ------------------------------------------------------------------------------------------------------------\n\n                lat = str_chr_up.indexOf(convert_this_grid.charAt(1)) * 10;\n                lon = str_chr_up.indexOf(convert_this_grid.charAt(0)) * 20;\n                lat += str_num.indexOf(convert_this_grid.charAt(3)) * 1;\n                lon += str_num.indexOf(convert_this_grid.charAt(2)) * 2;\n                lat += 0.5 * 1; lon += 0.5 * 2; lat -= 90; lon -= 180;\n    \n                lat = parseFloat(lat.toFixed(3));\n                lon = parseFloat(lon.toFixed(3));\n}\n\n\nif (do_range_to_location){\n    \n// Start Distance Calculatore From Your Grid To Theirs -------------------------------------------------------------------\n\n        let lat1 = parseFloat(flow.get('my_lat_dec'));\n        let lon1 = parseFloat(flow.get('my_lon_dec'));\n        let lat2 = parseFloat(lat.toFixed(3)); \n        let lon2 = parseFloat(lon.toFixed(3));\n        \n        lat1 = lat1 * Math.PI / 180; lon1 = lon1 * Math.PI / 180;\n        lat2 = lat2 * Math.PI / 180; lon2 = lon2 * Math.PI / 180;\n        let dlon = lon2 - lon1; let dlat = lat2 - lat1;\n        let a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2),2);\n        let c = 2 * Math.asin(Math.sqrt(a));\n        let rm = 3956; // Radius of earth in kilometers 6371, use 3956 for miles\n        let rk = 6371;\n        \n        this_distance_miles = parseInt(c * rm);\n        this_distance_kilos = parseInt(c * rk);\n\n// END Distance Calculatore From Your Grid To Theirs -------------------------------------------------------------------\n\n// Start Bearing In Degrees By WA9WUD Request ---------------------------------------------------------------------------\n\n        startLat = parseFloat(flow.get('my_lat_dec'));\n        startLng = parseFloat(flow.get('my_lon_dec'));\n        destLat = parseFloat(lat);\n        destLng = parseFloat(lon);\n\n            startLat = toRadians(startLat); startLng = toRadians(startLng);\n            destLat = toRadians(destLat);   destLng = toRadians(destLng);\n\n            y = Math.sin(destLng - startLng) * Math.cos(destLat);\n            x = Math.cos(startLat) * Math.sin(destLat) - Math.sin(startLat) * Math.cos(destLat) * Math.cos(destLng - startLng);\n            brng = Math.atan2(y, x);\n            brng = toDegrees(brng);\n    \n            origin_bearing = (brng + 360) % 360;\n\n                this_bearing = parseInt(origin_bearing)\n                this_bearing_name = getDirection(origin_bearing);\n\n// End Bearing In Degrees By WA9WUD Request ---------------------------------------------------------------------------\n}\n\n                if (location_for === 'origin'){\n                    //if (lat !== null || lon !== null){  msg.origin_lat_dec = lat;   msg.origin_lon_dec = lon;}\n                    if (this_bearing !== null){\n                            msg.origin_bearing = this_bearing;\n                            msg.origin_bearing_name = this_bearing_name;\n                            msg.origin_distance_miles = this_distance_miles;\n                            msg.origin_distance_kilos = this_distance_kilos;\n                    } else {\n                            msg.origin_bearing = 'none';\n                            msg.origin_bearing_name = 'none';\n                            msg.origin_distance_miles = -1;\n                            msg.origin_distance_kilos = -1;\n                    }\n                }\n                \n                \n                if (location_for === 'target'){\n                    //if (lat !== null || lon !== null){  msg.origin_lat_dec = lat;   msg.origin_lon_dec = lon;}\n                    if (this_bearing !== null){\n                            msg.target_bearing = this_bearing;\n                            msg.target_bearing_name = this_bearing_name;\n                            msg.target_distance_miles = this_distance_miles;\n                            msg.target_distance_kilos = this_distance_kilos;\n                    } else {\n                            msg.target_bearing = 'none';\n                            msg.target_bearing_name = 'none';\n                            msg.target_distance_miles = -1;\n                            msg.target_distance_kilos = -1;\n                    }\n                }\n\nreturn msg;\n\n\n\n\n\n\n\n\n\n\n\n// Converts from degrees to radians.\nfunction toRadians(degrees) { return degrees * Math.PI / 180; }\n \n// Converts from radians to degrees.\nfunction toDegrees(radians) { return radians * 180 / Math.PI;}\n\nfunction getDirection(heading) {\n    var index = Math.round(((heading %= 360) < 0 ? heading + 360 : heading) / 45) % 8;\n   //var index = Math.round((heading/8)/5,625)\n   return directions[index]}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 380,
        "wires": [
            [
                "dd724101.7ef2c8",
                "ee689f26.96c968"
            ]
        ]
    },
    {
        "id": "ee689f26.96c968",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 380,
        "wires": []
    },
    {
        "id": "1510236b.c83e25",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "MY GRID Location",
        "func": "// --------------------------------------------------------------------------------------------------------\n// Last Updated 07-22-21\n// *** Only need to run ONCE at startup if your gridsquare does not change!\n\n// Messages Set/Returned\n//\n// flow.set('my_lat_dec')\n// flow.set('my_lon_dec')\n//\n// msg.my_lat_dec: \"36.500\"\n// msg.my_lon_dec: \"-79.000\"\n\n// -------------------------------------Modify Below To Your Grid ------------------------------------------------------------\n//\n    my_grid = 'FM06';   // Change this to YOUR grid\n//\n// ------------------------------------Nothing Below Needs To Be Modified-----------------------------------------------------\n\n\nif (flow.get('my_lat_dec') !== undefined){return msg;}\n\nvar str_chr_up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";                          // Constants.\nvar str_chr_lo = \"abcdefghijklmnopqrstuvwxyz\";\nvar str_num = \"0123456789\";\nvar lat, lon, qth, deg, min, sec;\n\n    qth = my_grid;\n    qth = qth.toUpperCase();\n\n// Start Calculations Now. ------------------------------------------------------------------------------------------------------------\n\n    lat = str_chr_up.indexOf(qth.charAt(1)) * 10;               // 2nd digit: 10deg latitude slot.\n    lon = str_chr_up.indexOf(qth.charAt(0)) * 20;               // 1st digit: 20deg longitude slot.\n    lat += str_num.indexOf(qth.charAt(3)) * 1;                  // 4th digit: 1deg latitude slot.\n    lon += str_num.indexOf(qth.charAt(2)) * 2;                  // 3rd digit: 2deg longitude slot.\n\n    lat += 0.5 * 1;\n    lon += 0.5 * 2;\n\n    lat -= 90;                                                  // Locator lat/lon origin shift.\n    lon -= 180;\n\n            msg.my_lat_dec = lat.toFixed(3);  // Display result (rounded to 3 decimal digits).\n            msg.my_lon_dec= lon.toFixed(3);\n\n            flow.set('my_lat_dec',lat.toFixed(3));\n            flow.set('my_lon_dec',lon.toFixed(3));\n\n    return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "5126a898.79621",
        "type": "function",
        "z": "f848aedb.a536d8",
        "name": "<< Housecleaning >>",
        "func": "\n// Remove Debug Payload Message  - Housecleaning//\n\n        delete msg.test;\n        delete msg.delta_frequency;\n        delete msg.packet_type;\n        delete msg.decode_msg_type;\n        delete msg.magic_packet;\n        delete msg.version;\n        delete msg.sw_name;\n        delete msg.decode_UTC_time;\n        delete msg.dt_start;\n        delete msg.dt_stop;\n        delete msg.delta_time;\n        delete msg.qso_message_length;\n        delete msg.decode_confidence;\n        delete msg.offline_decode;\n        delete msg.orig_message;\n        \n        delete msg.full_decode;\n        delete msg.submode;\n        delete msg.fast_mode;\n        delete msg.special_mode;\n        delete msg.rx_delta_frequency;\n        delete msg.tx_delta_frequency;\n        \n// Remove Debug Payload Message  - Housecleaning//\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "1510236b.c83e25",
                "d2a5147b.89fe5"
            ]
        ]
    },
    {
        "id": "7c2cc79.4af00b8",
        "type": "debug",
        "z": "f848aedb.a536d8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 340,
        "wires": []
    }
]
